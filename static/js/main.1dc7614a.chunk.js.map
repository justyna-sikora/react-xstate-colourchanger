{"version":3,"sources":["grammars/gameList.ts","dmGame.ts","index.tsx"],"names":["cancel","actions","list","b1","year","yearString","event","question","correctAnswer","answers","key","stringAnswer","b2","b3","b4","b5","b6","b7","b8","b9","b10","b11","b12","b13","b14","b15","b16","b17","b18","b19","boolGrammar","compliments","a1","a2","a3","a4","a5","say","text","send","_context","type","value","random_event","length","Object","keys","random_number","Math","floor","random","random_obj","event_random","random_compliment","round1","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","target","context","console","log","assign","count","ask","delay","id","answersNumeric","dmMachine","init","CLICK","help","always","maxspeech1","stop","query","invoke","src","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","cond","recResult","intentbest","intent","name","onError","RECOGNISED","hist","welcome","object","stringAns","eventYear","pointsUser","eventCompare","MAXSPEECH","rules","correctAns","wrongAnswer","prompt1","prompt2","maxspeech","compare","compliment","nomatch","correct","wrong","good","bad","final","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.1dc7614a.chunk.js","sourcesContent":["export const questionList = {\r\n    b1: {\r\n        year: 1950,\r\n        yearString: '19 50',\r\n        event: 'Invention of the garbage bag',\r\n        question: 'Where was the garabage bag invented?',\r\n        correctAnswer: '1',\r\n        answers: '1. Canada or 2. France or 3. Belgium',\r\n        key: 'b1',\r\n        stringAnswer: \"Canada\"\r\n    },\r\n    b2: {\r\n        year: 1873,\r\n        yearString: '18 73',\r\n        event: 'Invention of blue jeans',\r\n        question: 'What is the name of the company that created blue jeans?',\r\n        correctAnswer: '2',\r\n        answers: '1. Wrangler or 2. Levi\\'s or 3. Lee Jeans',\r\n        key: 'b2',\r\n        stringAnswer: \"Levis\"\r\n    },\r\n    b3: {\r\n        year: 1908,\r\n        yearString: '19 08',\r\n        event: 'Invention of the first tea bag',\r\n        question: 'What was the first tea bag made of?',\r\n        correctAnswer: '2',\r\n        answers: '1 Paper. 2 Silk. 3 Cotton.',\r\n        key: 'b3',\r\n        stringAnswer: \"Silk\"\r\n    },\r\n    b4: {\r\n      year: 1953,\r\n      yearString: '19 53',\r\n      event: 'Discovery of the double helix structure of dna',\r\n      question: 'When was the sandwich invented?',\r\n      correctAnswer: '3',\r\n      answers: '1 in 12th century. 2 in 14th century. 3 in 17th century',\r\n      key: 'b19',\r\n      stringAnswer: \"in 17th century\"\r\n    },\r\n    b5: {\r\n        year: 1913,\r\n        yearString: '19 13',\r\n        event: 'Invention of crossword puzzle',\r\n        question: 'When?',\r\n        correctAnswer: '3',\r\n        answers: '1 New Yorker.  2 the New York Times.  3 the New York World.',\r\n        key: 'b5',\r\n        stringAnswer: \"the New York World\"\r\n    },\r\n    b6: {\r\n        year: 1810,\r\n        yearString: '18 10',\r\n        event: 'Invention of the first can',\r\n        question: 'Who is responsible for creating the tin canning process?',\r\n        correctAnswer: '1',\r\n        answers: '1 Peter Durand.  2 Thomas Edison.  3 the American Can Company.',\r\n        key: 'b6',\r\n        stringAnswer: \"Peter Durand\"  \r\n    },\r\n    b7: {\r\n        year: 1829,\r\n        yearString: '18 29',\r\n        event: 'Creation of the Braille alphabet',\r\n        question: 'What nationality was Louis Braille?',\r\n        correctAnswer: '2',\r\n        answers: '1 British. 2 French. 3 Dutch.',\r\n        key: 'b7',\r\n        stringAnswer: \"French\" \r\n    },\r\n    b8: {\r\n        year: 1834,\r\n        yearString: '18 34',\r\n        event: 'Invention of the refrigerator',\r\n        question: 'Who is known as the father of the refrigerator?',\r\n        correctAnswer: '2',\r\n        answers: '1 Joseph Banks.  2 Jacob Perkins.  3 Charles Heath.',\r\n        key: 'b8',\r\n        stringAnswer: \"Jacob Perkins\"\r\n    },\r\n    b9: {\r\n        year: 1836,\r\n        yearString: '18 36',\r\n        event: 'The first practical revolver',\r\n        question: 'Who is responsible for the mass production of revolvers?',\r\n        correctAnswer: '1',\r\n        answers: '1 Samuel Colt.  2 Jacob Perkins.  3 Dudley Selden.',\r\n        key: 'b9',\r\n        stringAnswer: \"Samuel Colt\" \r\n    },\r\n    b10: {\r\n        year: 1838,\r\n        yearString: '18 38',\r\n        event: 'The invention of the Morse code',\r\n        question: 'Whom was Samuel Morse beside being an inventor?',\r\n        correctAnswer: '1',\r\n        answers: '1 a painter. 2 a scientist. 3 a politician.',\r\n        key: 'b10',\r\n        stringAnswer: \"a painter\"\r\n    },\r\n    b11: {\r\n        year: 1839,\r\n        yearString: '18 39',\r\n        event: 'The invention of the first mechanically-propelled two-wheeled bicycle',\r\n        question: 'Where did the word bicycle first appear?',\r\n        correctAnswer: '1',\r\n        answers: '1 The Daily News.  2 The Times.  3 New York Post.',\r\n        key: 'b11',\r\n        stringAnswer: \"The Daily News\"\r\n    },\r\n    b12: {\r\n        year: 1861,\r\n        yearString: '18 61',\r\n        event: 'The world\\'s first demonstration of colour photography',\r\n        question: 'Who is known as the father of colour photography?',\r\n        correctAnswer: '1',\r\n        answers: '1 James Clerk Maxwell.  2  Arthur Maxwell.  3 Clerk John Maxwell.',\r\n        key: 'b12',\r\n        stringAnswer: \"James Clerk Maxwell \"\r\n    },\r\n    b13: {\r\n        year: 1886,\r\n        yearString: '18 86',\r\n        event: 'The invention of Coca-Cola',\r\n        question: 'Who did invent Coca-Cola?',\r\n        correctAnswer: '3',\r\n        answers: '1 Charles Heath.   2 Arthur Maxwell.  3 John Pemberton.',\r\n        key: 'b13',\r\n        stringAnswer: \"John Pemberton\" \r\n    },\r\n    b14: {\r\n        year: 1891,\r\n        yearString: '18 91',\r\n        event: 'The invention of the escalator',\r\n        question: 'Who did invent the escalator?',\r\n        correctAnswer: '3',\r\n        answers: '1 Luther Halsey.  2 Arthur Maxwell.  3 Jesse W. Reno.',\r\n        key: 'b14',\r\n        stringAnswer: \"Jesse W. Reno\"\r\n    },\r\n    b15: {\r\n        year: 1893,\r\n        yearString: ' 18 93',\r\n        event: 'the invention of the common zipper',\r\n        question: 'Who is noted for the invention of the common zipper?',\r\n        correctAnswer: '1',\r\n        answers: '1 Whitcomb L. Judson. 2 Arthur Maxwell. 3 Joseph Banks.',\r\n        key: 'b15',\r\n        stringAnswer: \"Whitcomb L. Judson\"\r\n    },\r\n    b16: {\r\n        year: 1849,\r\n        yearString: '18 49',\r\n        event: 'the invention of the safety pin',\r\n        question: ' Walter Hunt is regarded as the inventor of the safety pin. Whom was he?',\r\n        correctAnswer: '1',\r\n        answers: '1 An American mechanic. 2 A British chemist.  3 An American physicist. ',\r\n        key: 'b16',\r\n        stringAnswer: \"An American mechanic\"\r\n    \r\n    },\r\n    b17: {\r\n        year: 1970,\r\n        yearString: '19 70',\r\n        event: 'Invention of wheeled suitcase',\r\n        question: 'Under what name is wheeled suitcase patented?',\r\n        correctAnswer: '3',\r\n        answers: '1 Wheeled Luggage. 2 Rolling Suitcase. 3 Rolling Luggage.',\r\n        key: 'b17',\r\n        stringAnswer: \"Rolling Luggage\"\r\n\r\n    },\r\n    b18: {\r\n        year: 1974,\r\n        yearString: '19 74',\r\n        event: 'Invention of Rubik\\'s cube',\r\n        question: 'Erno Rubik who invented the Rubik\\s cube was',\r\n        correctAnswer: '1',\r\n        answers: '1 a Hungarian. 2 a Slovak. 3 a Romanian.',\r\n        key: 'b18',\r\n        stringAnswer: \"a Hungarian\"\r\n\r\n    },\r\n    b19: {\r\n        year: 1928,\r\n        yearString: '19 28',\r\n        event: 'Invention of sliced bread',\r\n        question: 'When was the sandwich invented?',\r\n        correctAnswer: '3',\r\n        answers: '1 in 12th century. 2 in 14th century. 3 in 17th century',\r\n        key: 'b19',\r\n        stringAnswer: \"in 17th century\"\r\n\r\n    },\r\n    \r\n\r\n}\r\n\r\n\r\nexport const bool= {\r\n      \"yes\": true,\r\n      \"of course\": true,\r\n      \"yep\": true,\r\n      \"sure\": true,\r\n      \"that's right\": true,\r\n      \"nope\": false,\r\n      \"no\": false,\r\n      \"no way\": false,\r\n      \"never\": false,\r\n}\r\n\r\n\r\nexport const complimentsGame = {\r\n    a1: \"You are the best!\" ,\r\n    a2: \"That's right!\",\r\n    a3: \"Keep it up!\",\r\n    a4: \"Good guess!\",\r\n    a5: \"You're right!\"\r\n}\r\n\r\n\r\n\r\n","import { MachineConfig, send, Action, assign, actions } from \"xstate\";\nimport { questionList, bool, complimentsGame} from './grammars/gameList';\nimport { mapContext } from \"xstate/lib/utils\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst { cancel } = actions;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://time-line-game.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst list = questionList\nconst boolGrammar = bool\nconst compliments = complimentsGame\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction random_event() {\n      const length = Object.keys(list).length\n      let random_number = Math.floor((Math.random() * (length)) + 0);\n      let random_obj = list[Object.keys(list)[random_number]];\n      const event_random = random_obj;\n      delete list[random_obj.key]\n    return event_random;\n    }\n\nfunction random_compliment() {\n      const length = Object.keys(compliments).length\n      let random_number = Math.floor((Math.random() * (length)) + 0);\n      let random_obj = compliments[Object.keys(compliments)[random_number]];\n      const compliment_random = random_obj;\n    return compliment_random;\n    }\n\nconst round1 = random_event()\n\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: prompt,\n                on: {  ENDSPEECH:  [\n                { target: \"ask\", actions: [ (context) => console.log(list), assign((context) => { return {count: context.count + 1 }}) ]},\n                    \n                    ]}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\nconst commands = {\"help\": \"H\", \"stop\": \"S\"}\nconst answers = {\"before\": \"B\", \"after\": \"A\"}\nconst answersNumeric = {\"1\": \"1\", \"2\": \"2\", \"3\":\"3\"}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        }, \n        help: {\n            entry: say(\"It seems that you need some help. Let's try again.\"),\n            always:[{target: 'ask.hist', actions: assign((context) => { return {count: (context.count - 1) }}) }] },\n\n        maxspeech1: {\n            entry: say(\"Sorry, I can't hear you.\"),\n            on: { 'ENDSPEECH': 'ask.hist' },  \n\n        },\n\n        stop: {\n            entry: say(\"Ok\"),\n            always: 'init'\n        },\n\n        query: {\n            invoke: {\n                id: 'rasa',\n                src: (context, event) => nluRequest(context.query),\n                onDone: {\n                    target: '#compare',\n                    cond: (context) => !(context.recResult === 'help'),\n                    actions: [assign((context, event) => { return {intentbest: event.data.intent.name }}),\n                            (context:SDSContext, event:any) => console.log(event.data), cancel('maxsp'), ]\n                },\n                onError: {\n                    target: 'ask.hist',\n                    cond: (context) => !(context.recResult === 'help'),\n                    actions: [cancel('maxsp'), (context,event) => console.log(event.data)]\n                     }\n                }\n        },\n\n\n        ask: {\n        initial: 'welcome',\n            on: {RECOGNISED: [\n                    { target: 'help', \n                    cond: (context) => context.recResult === 'help' },\n\n                    { target: 'stop', \n                    actions: cancel('maxsp'),\n                    cond: (context) => context.recResult === 'stop'\n                },]},\n            states: {\n                hist: { type: \"history\" },\n                welcome: {\n                    entry: assign((context) => { return {count: 0 }}),\n                    id: \"wlcm\",\n                    initial: \"prompt\",\n                    on: { RECOGNISED:\n                    [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"#rules\", actions: [ \n                            cancel('maxsp'),\n                            assign((context) => { return {object: random_event()}}),\n                            assign((context) => { return {count: 0 }}), \n                            assign((context) => { return {event: round1.event }}),\n                            assign((context) => { return {stringAns: round1.stringAnswer}}),\n                            assign((context) => { return {question: round1.question }}),\n                            assign((context) => { return {answers: round1.answers } }),\n                            assign((context) => { return {correctAnswer: round1.correctAnswer }}  ), \n                            assign((context) => { return {eventYear: round1.year } }), \n                            assign((context) => { return {pointsUser: 0 }}),\n                            assign((context) => { return {year: context.object.year } }),\n                            assign((context) => { return {eventCompare: context.object.event }}),\n                            assign((context) => { return {yearString: context.object.yearString }}),\n                            ]\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                            target: \"#question\", actions: [ \n                                cancel('maxsp'),\n                                assign((context) => { return {object: random_event()}}),\n                                assign((context) => { return {count: 0 }}), \n                                assign((context) => { return {event: round1.event }}),\n                                assign((context) => { return {stringAns: round1.stringAnswer}}),\n                                assign((context) => { return {question: round1.question }}),\n                                assign((context) => { return {answers: round1.answers } }),\n                                assign((context) => { return {correctAnswer: round1.correctAnswer }}  ), \n                                assign((context) => { return {eventYear: round1.year } }), \n                                assign((context) => { return {pointsUser: 0 }}),\n                                assign((context) => { return {year: context.object.year} }),\n                                assign((context) => { return {eventCompare: context.object.event }}),\n                                assign((context) => { return {yearString: context.object.yearString }}),\n                            ]\n                                \n                        },\n                    ],\n                   \n                    MAXSPEECH: '#root.dm.maxspeech1'\n                },\n                    states: {\n                        prompt: {\n                                ...promptAndAsk(send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `Welcome to Timeline. Do you know how to play?`}))),\n                        },               \n                    }\n            },\n            rules: {\n                id: \"rules\",\n                initial: \"prompt\",\n                on: { ENDSPEECH: { target: \"#question\",}, },\n                states: {\n                    prompt: { entry: say(`You're going to hear a year of an event. You need to decide if one event happened before or after the second one. \\\n                    If you guess correctly, you get a point. If you do not manage to answer correctly, you will hear another question, \\\n                    where you need to decide, which answer is correct. You can do it by saying: 1, 2 or 3. \\ \n                    If you cannot answer the second question, you lose. If you want to stop the game, just say stop. \\\n                    If you need help, just say help.\\\n                    Good luck!`) \n                    }\n                }\n            },\n            question: {\n                id: 'question',\n                initial: \"prompt\",\n                entry: assign((context) => { return {count: 0 }}),\n                on: {\n                    RECOGNISED: [\n\n                        { target: \"#root.dm.query\", actions: [assign((context) => { return {correctAns: \"after\" }}),  assign((context) => { return {wrongAnswer: \"before\" }}), assign((context) => { return { query: context.recResult } })], \n                        cond: (context) => context.year < context.eventYear && !(context.recResult === 'help') &&  !(context.recResult === 'stop')},\n                        { target: \"#root.dm.query\", actions: [assign((context) => { return {correctAns: \"before\" }}),  assign((context) => { return {wrongAnswer: \"after\" }}), assign((context) => { return { query: context.recResult } })], \n                        cond: (context) => context.year > context.eventYear && !(context.recResult === 'help') &&  !(context.recResult === 'stop')},\n                       \n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') &&  !(context.recResult === 'stop') },\n                    \n                    ],\n                    MAXSPEECH: '.maxspeech'\n                        },\n                \n                states: {\n                        prompt: {...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `The year of ${context.eventCompare} is ${context.yearString}. Was ${context.event} earlier or later? What do you think?`})))\n                        },\n                        prompt1: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Was ${context.event} earlier or later? What do you think?`})))\n                        },\n                        prompt2: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `What do you think?`})))\n                        },\n                        \n                        maxspeech: {\n                            entry: say(\"Sorry, I can't hear you.\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 3},\n                                \n                            ]}\n                        },\n                        \n                    }\n            },\n            compare: {\n                id: \"compare\",\n                initial: \"prompt\",\n                on:{ \n                    ENDSPEECH: [{target: \"correct\", actions: [assign((context) => { return {pointsUser: (context.pointsUser +1) }}), assign((context) => { return {eventCompare: context.event}}),\n                        assign((context) => { return {compliment: random_compliment() }})],\n                                cond: (context) => context.correctAns === context.intentbest,\n                        },\n                        {target: \"wrong\", cond: (context) => context.wrongAnswer === context.intentbest,  actions:  [\n                            assign((context) => { return {compliment: random_compliment() }}), assign((context) => { return {eventCompare: context.event}}),]  \n                         },\n\n                         {target: \".nomatch\", cond: (context) => !(context.recResult === 'help') &&  !(context.recResult === 'stop')},\n                        ],\n                    \n                },\n                states: {\n                        prompt: {entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok. Let's check.`}))\n\n                        \n                        }, \n                        nomatch: {\n                            entry: say(\"Because the answer is not valid, you will hear the same question again.\"),\n                            on: { ENDSPEECH: \"#question\" }},                 \n                        \n                    }\n            },\n            correct: {\n                initial: \"prompt\",\n                on: { \n                    ENDSPEECH: [{target: \"final\",  cond: (context) => context.pointsUser === 5},\n                                {target: \"question\", actions: [\n                                    assign((context) => { return {yearString: context.object.yearString }}),\n                                    assign((context) => { return {object: random_event()}}), \n                                    assign((context) => { return {year: context.eventYear}}), \n                                    assign((context) => { return {event: context.object.event } }),\n                                    assign((context) => { return {eventYear: context.object.year } }),\n                                    assign((context) => { return {stringAns: context.object.stringAnswer}}),\n                                    assign((context) => { return {question: context.object.question }}),\n                                    assign((context) => { return {answers: context.object.answers } }),\n                                    assign((context) => { return {correctAnswer: context.object.correctAnswer }} ),  \n                                \n                                ],\n                        \n                },\n                    ],\n                },\n                states: {\n                    prompt: {entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Yes, correct. ${context.compliment}`}))\n                    },                   \n                }\n            },\n\t        wrong: {\n                entry: assign((context) => { return {count: 0 }}),\n                initial: \"prompt\",\n                on: { RECOGNISED: [ {target: \"good\", cond: (context) => context.correctAnswer === context.recResult, actions: assign((context) => { return {pointsUser: (context.pointsUser + 0.5) }}), },\n                                    {target: \"bad\", cond: (context) => !(context.recResult === context.correctAnswer) && context.recResult in answersNumeric,},\n                                    {target: \".maxspeech\", actions: cancel('maxsp'), cond: (context) => !(context.recResult === 'help') &&  !(context.recResult === 'stop') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `No, sorry, you're wrong. Maybe you can answer this one.\n                        ${context.question}. ${context.answers}.`})))\n                    },  \n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Say 1, 2 or 3.`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Say 1, 2 or 3.`})))\n                    },\n                    \n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 3},                           \n                        ]}\n                    },\n                }\n            },\n\t        good: {\n                initial: \"prompt\",\n                on: {\n                    'ENDSPEECH': [{target: \"question\",\n                    actions: [assign((context) => { return {object: random_event()}}),\n                        assign((context) => { return {eventCompare: context.event}}),\n                        assign((context) => { return {year: context.eventYear}}), \n                        assign((context) => { return { event: context.object.event } }),\n                        assign((context) => { return { eventYear: context.object.year } }),\n                        assign((context) => { return {stringAns: context.object.stringAnswer}}),\n                        assign((context) => { return {question: context.object.question }}),\n                        assign((context) => { return {answers: context.object.answers } }),\n                        assign((context) => { return {correctAnswer: context.object.correctAnswer }}  ),                 \n                    ],\n                    \n            },\n        ],\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Yes, that's correct. It was ${context.stringAns}. Your score is ${context.pointsUser}. ${context.compliment}`\n                        })),\n                    },                    \n                }\n            },\n \t        bad: {\n                initial: \"prompt\",\n                on:  {\n                    'ENDSPEECH': '#root.dm.init'\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Sorry, that's not the correct answer. It was ${context.stringAns}. Your score is ${context.pointsUser}. Try again.`\n                        })),},                    \n                        },\n                    },\n\n                    final: {\n                        initial: \"prompt\",\n                        on: { ENDSPEECH: \"#root.dm.init\" },\n                        states: {\n                            prompt: {\n                                entry: send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `Congrats, you won!`\n                                }))\n                            },\n                        }\n                    }\n                }\n            },\n            \n        } \n    })\n\n\n\n\n\n ","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State, actions } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\n//import { dmMachine } from \"./dmAppointmentPlus\";\r\nimport { dmMachine } from \"./dmGame\";\r\n//import { dmMachine } from \"./dmSmartHome\";\r\n//import { cancel } from \"xstate/lib/actionTypes\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: { target: 'idle', actions: 'cancel'},\r\n                        MAXSPEECH: 'idle',\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"],"sourceRoot":""}