{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","grammar","person","day","time","boolGrammar","dmMachine","initial","states","init","on","CLICK","welcome","id","RECOGNISED","target","actions","assign","context","query","recResult","prompt","entry","ENDSPEECH","ask","nomatch","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intentbest","console","log","onError","menu","cond","intent","name","TODOitem","Timer","Appointment","who","duration","confirm_meeting_whole_day","confirm_time","confirmed","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.3b7a087c.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'https://justyna-sikora.github.io/assignment2ds' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n//http://localhost:3000/react-xstate-colourchanger\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\n        welcome: {\n            id: \"wlcm\",\n            initial: \"prompt\",\n            on: {\n            RECOGNISED: {\n                target: 'query',\n                actions: assign((context) => { return { query: context.recResult } }),\n                    }\n                },\n                states: {\n                    prompt: {\n                        entry: say(\"What would you like to do?\"),\n                        on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry I don't understand.\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n        },\n        query: {\n            invoke: {\n            id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n            onDone: {\n                    target: 'menu',\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data)]\n                    },\n            onError: {\n                        target: 'welcome',\n                        actions: (context,event) => console.log(event.data)\n                    }\n                }\n        },\n\t    menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [{\n                cond: (context) => context.intentbest.intent.name === \"timer\",\n                target: \"Timer\"\n                },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                target: \"TODOitem\"\n\t\t        },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                target: \"Appointment\"\n\t\t        },\n                { target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, noted!`\n                    }))\n                },\n                nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                on: { ENDSPEECH: \"#wlcm\" }\n                    },\n                }\n        },\n        TODOitem: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: { entry: say(\"Welcome to the To do item app\")\n                 }\n            }\n        },\n\t    Timer: {\n\t        initial: \"prompt\",\n\t        on: { ENDSPEECH: \"init\" },\n\t        states: {\n\t    prompt: { entry: say (\"Welcome to the Timer app\")\n\t             }\n\t        }\n\t    },\n        Appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                        })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                 }\n\t             }\n        },\n    \tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"time\"\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirm_meeting_whole_day\"\n\t\t            },\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n\t    time: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n                    },\n                    { target: \".nomatch\" }]\n\t\t    },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. What time is your meeting?`\n                        })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t                \tentry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                }\n                }\n        },\n\t    confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"init\"\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirmed\"\n\t\t             },\n                    { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                        })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t        \task: {\n\t\t            entry: listen()\n                },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n \t    confirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"who\"\n                },\n\t\t        {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t        target: \"confirmed\"\n\t\t        },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n\t\t        on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t             entry: listen()\n                     },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t            \ton: { ENDSPEECH: \"prompt\" }\n\t           }\n            },\n        },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t    }\n\t    }\n    }\n})\n\n\n\n\n\n","import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"],"sourceRoot":""}