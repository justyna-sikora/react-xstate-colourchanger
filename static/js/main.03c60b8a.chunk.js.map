{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["cancel","actions","say","text","send","_context","type","value","grammar","person","day","time","boolGrammar","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","target","assign","context","count","ask","delay","id","dmMachine","init","CLICK","help","always","maxspeech1","RECOGNISED","cond","recResult","hist","welcome","query","MAXSPEECH","invoke","src","event","nluRequest","fetch","Request","proxyurl","method","headers","body","then","data","json","onDone","intentbest","console","log","onError","menu","intent","name","nomatch","TODOitem","Timer","Appointment","who","prompt1","prompt2","prompt3","maxspeech","duration","confirm_meeting_whole_day","confirm_time","confirmed","inspect","url","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.03c60b8a.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\nimport { mapContext } from \"xstate/lib/utils\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst { cancel } = actions;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: prompt,\n                on: {  ENDSPEECH:  [{\n                    target: \"ask\",\n                    actions: assign((context) => { return {count: context.count + 1 }})\n                    },\n                    ]}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\n\nconst commands = {\"help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        }, \n        help: {\n            entry: say(\"It seems that you need some help. Let's try again.\"),\n            always:[{target: 'ask.hist', actions: assign((context) => { return {count: (context.count - 1) }}) }] },\n\n        maxspeech1: {\n            entry: say(\"Sorry\"),\n            on: { 'ENDSPEECH': 'ask.hist' },  \n\n        },\n        ask: {\n        initial: 'welcome',\n            on: {RECOGNISED: \n                    { target: 'help', \n                    cond: (context) => context.recResult === 'help' },},\n            states: {\n                hist: { type: \"history\" },\n                welcome: {\n                    entry: assign((context) => { return {count: 0 }}),\n                    id: \"wlcm\",\n                    initial: \"prompt\",\n                    on: { RECOGNISED: \n                            { target: 'query',\n                            cond: (context) => !(context.recResult === 'help'),\n                            actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { query: context.recResult } })],\n                            },\n                        MAXSPEECH: '#root.dm.maxspeech1'\n                    },\n                    states: {\n                        prompt: {\n                                ...promptAndAsk(send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `What would you like to do?`})))\n                            ,\n                            on: { ENDSPEECH: {actions: assign((context) => { return {count: 0 }})} }\n                        },\n                        \n                          \n                        }\n            },\n            query: {\n                invoke: {\n                    id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n                    onDone: {\n                        target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data), cancel('maxsp')]\n                    },\n                    onError: {\n                        target: '#wlcm',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                         }\n                    }\n            },\n\t        menu: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [{\n                    cond: (context) => context.intentbest.intent.name === \"timer\",\n                    target: \"Timer\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                    target: \"TODOitem\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                    target: \"Appointment\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help')}]\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK, noted!`\n                        }))\n                    },\n                    nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                        on: { ENDSPEECH: \"#wlcm\" }\n                        },\n                    }\n            },\n            TODOitem: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say(\"Welcome to the To do item app\")\n                    }\n                }\n            },\n            Timer: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say (\"Welcome to the Timer app\")\n                    }\n                }\n            },\n            Appointment: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#who\" },\n                states: {\n                    prompt: { entry: say(\"Let's create an appointment\") \n                    }\n                }\n            },\n            who: {\n                id: 'who',\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { person: grammar[context.recResult].person } })],\n                        target: \"day\"},\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                        },\n                states: {\n                        prompt: {...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Who are you meeting with?`})))\n                        },\n                        prompt1: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Who is is that you are meeting?`})))\n                        },\n                        prompt2: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Did you want to meet with someone?`})))\n                        },\n                        prompt3: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Ok, last chance. Who are you meeting with?`})))\n                        },\n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                        \n                    }\n            },\n            day: {\n                initial: \"prompt\",\n                on:{ \n                    RECOGNISED: [{\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { day: grammar[context.recResult].day } })],\n                        target: \"duration\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                        prompt: {...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, ${context.person}. What time is your meeting?`})))\n                        },\n                        prompt1: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `When do you want to create a meeting with ${context.person}?`})))\n                        },\n                        prompt2: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `On which day is your appointment with ${context.person}?`})))\n                        },\n                        prompt3: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Ok, last chance. On which day is your meeting with ${context.person}?`})))\n                        },\n                    \n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                    }\n            },\n            duration: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"time\",\n                        actions: [cancel('maxsp'),assign((context) => { return {count: 0 }}),]\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"confirm_meeting_whole_day\",\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}),]\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, ${context.person} on ${context.day},  will it take the whole day?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Will your meeting take the whole day?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Do you think your meeting will last the whole day?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. Will your meeting with ${context.person} on ${context.day} take the whole day?`})))\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                }\n            },\n\t        time: {\n                initial: \"prompt\",\n                on: { RECOGNISED: [{\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { time: grammar[context.recResult].time } })],\n                        target: \"confirm_time\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is yout meeting?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `When exactly do you want to create an appointment?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `When does your meeting start?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. What time is your meeting`})))\n                        \n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                }\n            },\n\t        confirm_meeting_whole_day: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"#root.dm.init\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Are your sure you want to create this meeting?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Do you want me to create this appointment?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})))\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},   \n                        ]}\n                    },\n                }\n            },\n \t        confirm_time: {\n                initial: \"prompt\",\n                on:  {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"who\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Are your sure you want to create this meeting?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Do you want me to create this appointment?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})))\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},  \n                                ]}\n                            },\n                        },\n                    },\n                }\n            },\n            confirmed: {\n                id: 'confirmed',\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Your appointment has been created!`\n                        }))\n                    },\n                }\n            }\n        } \n    })\n\n\n\n\n\n ","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State, actions } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointmentPlus\";\r\n//import { dmMachine } from \"./dmSmartHome\";\r\n//import { cancel } from \"xstate/lib/actionTypes\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: { target: 'idle', actions: 'cancel'},\r\n                        MAXSPEECH: 'idle',\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"],"sourceRoot":""}