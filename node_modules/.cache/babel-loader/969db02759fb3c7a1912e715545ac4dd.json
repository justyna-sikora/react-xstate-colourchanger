{"ast":null,"code":"import { send, assign } from \"xstate\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Ridley\": {\n    person: \"Ridley Scott\"\n  },\n  \"Steven\": {\n    person: \"Steven Spielberg\"\n  },\n  \"Wes\": {\n    person: \"Wes Andreson\"\n  },\n  \"Stanley\": {\n    person: \"Stanley Kubrick\"\n  },\n  \"David\": {\n    person: \"David Lynch\"\n  },\n  \"Ingmar\": {\n    person: \"Ingmar Bergman\"\n  },\n  \"Alfred\": {\n    person: \"Alfred Hitchcock \"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"13:00\"\n  },\n  \"at 13\": {\n    time: \"13:00\"\n  },\n  \"14\": {\n    time: \"14:00\"\n  },\n  \"15\": {\n    time: \"15:00\"\n  },\n  \"16\": {\n    time: \"16:00\"\n  },\n  \"17\": {\n    time: \"17:00\"\n  },\n  \"18\": {\n    time: \"18:00\"\n  },\n  \"19\": {\n    time: \"19:00\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"yep\": true,\n  \"nope\": false,\n  \"no\": false,\n  \"no way\": false,\n  \"never\": false\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: 'query',\n          actions: assign(context => {\n            return {\n              query: context.recResult\n            };\n          })\n        }\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.query),\n        onDone: {\n          target: 'menu',\n          actions: [assign((context, event) => {\n            return {\n              intentbest: event.data\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentbest.intent.name === \"timer\",\n          target: \"Timer\"\n        }, {\n          cond: context => context.intentbest.intent.name === \"todo_item\",\n          target: \"TODOitem\"\n        }, {\n          cond: context => context.intentbest.intent.name === \"appointment\",\n          target: \"Appointment\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK, noted!\"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Sorry, I can't help you with that.\"),\n          on: {\n            ENDSPEECH: \"#root.dm.welcome\"\n          }\n        }\n      }\n    },\n    TODOitem: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the TODOitem app\")\n        }\n      }\n    },\n    Timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the Timer app\")\n        }\n      }\n    },\n    Appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === false,\n          target: \"time\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === true,\n          target: \"confirm_meeting_whole_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"confirm_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_meeting_whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === false,\n          target: \"init\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === true,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === false,\n          target: \"who\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === true,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","context","query","recResult","prompt","entry","ENDSPEECH","ask","nomatch","invoke","id","src","event","onDone","intentbest","console","log","onError","menu","cond","intent","name","TODOitem","Timer","Appointment","who","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"13:00\" },\n    \"at 13\": { time: \"13:00\" },\n    \"14\": { time: \"14:00\" },\n    \"15\": { time: \"15:00\" },\n    \"16\": { time: \"16:00\" },\n    \"17\": { time: \"17:00\" },\n    \"18\": { time: \"18:00\" },\n    \"19\": { time: \"19:00\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\n        welcome: {\n             initial: \"prompt\",\n            on: {\n            RECOGNISED: {\n                target: 'query',\n                actions: assign((context) => { return { query: context.recResult } }),\n                    }\n                },\n                states: {\n                    prompt: {\n                        entry: say(\"What would you like to do?\"),\n                        on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry I don't understand.\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n        },\n        query: {\n            invoke: {\n            id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n            onDone: {\n                    target: 'menu',\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data)]\n                    },\n            onError: {\n                        target: 'welcome',\n                        actions: (context,event) => console.log(event.data)\n                    }\n                }\n        },\n\tmenu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [{\n                cond: (context) => context.intentbest.intent.name === \"timer\",\n                target: \"Timer\"\n\n                },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                target: \"TODOitem\"\n\t\t        },\n\n\t\t        {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                target: \"Appointment\"\n\n\t\t        },\n                {target: \".nomatch\"}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, noted!`\n                    }))\n                },\n                nomatch: {entry: say(\"Sorry, I can't help you with that.\"),\n                on: { ENDSPEECH: \"#root.dm.welcome\" }},\n            }\n            \n        },\n        TODOitem: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: { entry: say(\"Welcome to the TODOitem app\")\n            }\n           }\n        },\n\t    Timer: {\n\t        initial: \"prompt\",\n\t        on: { ENDSPEECH: \"init\" },\n\t        states: {\n\t    prompt: { entry: say (\"Welcome to the Timer app\")\n\t        }\n\t        }\n\t    },\n        Appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === true),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\t    on: { ENDSPEECH: \"prompt\" }\n\t            }\n        }\n\t},\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. What time is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n          }\n    },\n\tconfirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t        }\n         }\n\t},\n \tconfirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"who\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === true),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t        }\n         },\n    },\n\tconfirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t}\n\t}\n}})\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}