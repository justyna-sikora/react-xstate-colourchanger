{"ast":null,"code":"import _objectSpread from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\"; //import { cancel } from \"xstate/lib/actionTypes\";\n\nconst cancel = actions.cancel;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst obj = {\n  counter: 0\n};\nconsole.log(obj.counter);\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Ridley\": {\n    person: \"Ridley Scott\"\n  },\n  \"Steven\": {\n    person: \"Steven Spielberg\"\n  },\n  \"Wes\": {\n    person: \"Wes Andreson\"\n  },\n  \"Stanley\": {\n    person: \"Stanley Kubrick\"\n  },\n  \"David\": {\n    person: \"David Lynch\"\n  },\n  \"Ingmar\": {\n    person: \"Ingmar Bergman\"\n  },\n  \"Alfred\": {\n    person: \"Alfred Hitchcock \"\n  },\n  \"Tim\": {\n    person: \"Tim Burton\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"1:00 pm\"\n  },\n  \"at 13\": {\n    time: \"1:00 pm\"\n  },\n  \"14\": {\n    time: \"2:00 pm\"\n  },\n  \"at 14\": {\n    time: \"2:00 pm\"\n  },\n  \"15\": {\n    time: \"3:00 pm\"\n  },\n  \"at 15\": {\n    time: \"3:00 pm\"\n  },\n  \"16\": {\n    time: \"4:00 pm\"\n  },\n  \"at 16\": {\n    time: \"4:00 pm\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"yep\": true,\n  \"sure\": true,\n  \"that's right\": true,\n  \"nope\": false,\n  \"no\": false,\n  \"no way\": false,\n  \"never\": false\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"H\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'ask'\n      }\n    },\n    help: {\n      entry: say(\"It seems that you need some help. Let's try again.\"),\n      always: 'ask.hist'\n    },\n    maxspeech1: {\n      entry: say(\"Sorry\"),\n      on: {\n        'ENDSPEECH': 'ask.hist'\n      }\n    },\n    maxspeech: {\n      entry: say(\"Sorry, are you there?\"),\n      on: {\n        ENDSPEECH: {\n          target: \"#root.dm.ask.Appointment.day.reprompts\",\n          actions: assign({\n            count: context => context.count + 1\n          })\n        }\n      }\n    },\n    ask: {\n      initial: 'welcome',\n      on: {\n        RECOGNISED: {\n          target: 'help',\n          cond: context => context.recResult === 'help'\n        }\n      },\n      states: {\n        hist: {\n          type: \"history\"\n        },\n        welcome: {\n          id: \"wlcm\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: {\n              target: 'query',\n              cond: context => !(context.recResult === 'help'),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  query: context.recResult\n                };\n              })]\n            },\n            MAXSPEECH: '#root.dm.maxspeech1'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"What would you like to do?\")),\n            nomatch: {\n              entry: say(\"Sorry I don't understand.\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.query),\n            onDone: {\n              target: 'menu',\n              cond: context => !(context.recResult === 'help'),\n              actions: [assign((context, event) => {\n                return {\n                  intentbest: event.data\n                };\n              }), (context, event) => console.log(event.data), cancel('maxsp')]\n            },\n            onError: {\n              target: '#wlcm',\n              cond: context => !(context.recResult === 'help'),\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        menu: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.intentbest.intent.name === \"timer\",\n              target: \"Timer\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"todo_item\",\n              target: \"TODOitem\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"appointment\",\n              target: \"Appointment\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK, noted!\"\n              }))\n            },\n            nomatch: {\n              entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n              on: {\n                ENDSPEECH: \"#wlcm\"\n              }\n            }\n          }\n        },\n        TODOitem: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the To do item app\")\n            }\n          }\n        },\n        Timer: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the Timer app\")\n            }\n          }\n        },\n        Appointment: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.ask.Appointment.who\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Let's create an appointment\")\n            },\n            who: {\n              initial: \"prompt\",\n              on: {\n                RECOGNISED: [{\n                  cond: context => \"person\" in (grammar[context.recResult] || {}),\n                  actions: [cancel('maxsp'), assign(context => {\n                    return {\n                      person: grammar[context.recResult].person\n                    };\n                  })],\n                  target: \"day\"\n                }, {\n                  target: \".nomatch\",\n                  cond: context => !(context.recResult === 'help')\n                }],\n                MAXSPEECH: '#root.dm.maxspeech'\n              },\n              states: {\n                prompt: {\n                  entry: send(context => ({\n                    type: \"SPEAK\",\n                    value: \"Who are you meeting with?\"\n                  })),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"ask\",\n                      actions: assign(context => {\n                        return {\n                          count: 0\n                        };\n                      })\n                    }\n                  }\n                },\n                prompt1: {\n                  id: 'prompt1',\n                  entry: say('Do you maybe want to meet with someone'),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"ask\",\n                      actions: assign(context => {\n                        return {\n                          count: 1\n                        };\n                      })\n                    }\n                  }\n                },\n                prompt2: {\n                  id: 'prompt2',\n                  entry: say('Do you maybe want to meet with someone'),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"ask\",\n                      actions: assign(context => {\n                        return {\n                          count: 2\n                        };\n                      })\n                    }\n                  }\n                },\n                prompt3: {\n                  id: 'prompt3',\n                  entry: say('Ok, your last chance. So who are you meeting with?'),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"#root.dm.init\"\n                    }\n                  }\n                },\n                ask: {\n                  entry: [send('LISTEN'), send('MAXSPEECH', {\n                    delay: 5000,\n                    id: 'maxsp'\n                  })]\n                },\n                nomatch: {\n                  entry: say(\"Sorry I don't know them\"),\n                  on: {\n                    ENDSPEECH: \"prompt\"\n                  }\n                }\n              }\n            },\n            day: {\n              initial: \"prompt\",\n              on: {\n                RECOGNISED: [{\n                  cond: context => \"day\" in (grammar[context.recResult] || {}),\n                  actions: [cancel('maxsp'), assign(context => {\n                    return {\n                      day: grammar[context.recResult].day\n                    };\n                  })],\n                  target: \"duration\"\n                }, {\n                  target: \".nomatch\",\n                  cond: context => !(context.recResult === 'help')\n                }],\n                MAXSPEECH: '#root.dm.maxspeech'\n              },\n              states: {\n                prompt: {\n                  entry: send(context => ({\n                    type: \"SPEAK\",\n                    value: \"When are you meeting with?\"\n                  })),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"ask\",\n                      actions: assign(context => {\n                        return {\n                          count: 0\n                        };\n                      })\n                    }\n                  }\n                },\n                reprompts: {\n                  entry: say(''),\n                  on: {\n                    ENDSPEECH: [{\n                      cond: context => context.count === 0,\n                      target: \"#prompt1\"\n                    }, {\n                      target: \"#prompt2\",\n                      cond: context => context.count === 1\n                    }, {\n                      target: \"#prompt3\",\n                      cond: context => context.count === 2\n                    }]\n                  }\n                },\n                prompt1: {\n                  id: 'prompt1',\n                  entry: say('When Do you maybe want to meet with someone'),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"ask\",\n                      actions: assign(context => {\n                        return {\n                          count: 1\n                        };\n                      })\n                    }\n                  }\n                },\n                prompt2: {\n                  id: 'prompt2',\n                  entry: say('When Do you maybe want to meet with someone'),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"ask\",\n                      actions: assign(context => {\n                        return {\n                          count: 2\n                        };\n                      })\n                    }\n                  }\n                },\n                prompt3: {\n                  id: 'prompt3',\n                  entry: say('When Ok, your last chance. So who are you meeting with?'),\n                  on: {\n                    ENDSPEECH: {\n                      target: \"#root.dm.init\"\n                    }\n                  }\n                },\n                ask: {\n                  entry: [send('LISTEN'), send('MAXSPEECH', {\n                    delay: 5000,\n                    id: 'maxsp'\n                  })]\n                },\n                nomatch: {\n                  entry: say(\"Sorry, I don't understand\"),\n                  on: {\n                    ENDSPEECH: \"prompt\"\n                  }\n                }\n              }\n            },\n            duration: {\n              initial: \"prompt\",\n              on: {\n                RECOGNISED: [{\n                  cond: context => boolGrammar[context.recResult] === false,\n                  target: \"time\",\n                  actions: cancel('maxsp')\n                }, {\n                  cond: context => boolGrammar[context.recResult] === true,\n                  target: \"confirm_meeting_whole_day\",\n                  actions: cancel('maxsp')\n                }, {\n                  target: \".nomatch\",\n                  cond: context => !(context.recResult === 'help')\n                }],\n                MAXSPEECH: '#root.dm.maxspeech'\n              },\n              states: {\n                prompt: _objectSpread({}, promptAndAsk('OK. ${context.person} on ${context.day}. Will it take the whole day?')),\n                nomatch: {\n                  entry: say(\"Sorry, I don't understand\"),\n                  on: {\n                    ENDSPEECH: \"prompt\"\n                  }\n                }\n              }\n            },\n            time: {\n              initial: \"prompt\",\n              on: {\n                RECOGNISED: [{\n                  cond: context => \"time\" in (grammar[context.recResult] || {}),\n                  actions: [cancel('maxsp'), assign(context => {\n                    return {\n                      time: grammar[context.recResult].time\n                    };\n                  })],\n                  target: \"confirm_time\"\n                }, {\n                  target: \".nomatch\",\n                  cond: context => !(context.recResult === 'help')\n                }],\n                MAXSPEECH: '#root.dm.maxspeech'\n              },\n              states: {\n                prompt: _objectSpread({}, promptAndAsk('What time is your meeting?')),\n                nomatch: {\n                  entry: say(\"Sorry, I don't understand\"),\n                  on: {\n                    ENDSPEECH: \"prompt\"\n                  }\n                }\n              }\n            },\n            confirm_meeting_whole_day: {\n              initial: \"prompt\",\n              on: {\n                RECOGNISED: [{\n                  cond: context => boolGrammar[context.recResult] === false,\n                  target: \"#root.dm.init\",\n                  actions: cancel('maxsp')\n                }, {\n                  cond: context => boolGrammar[context.recResult] === true,\n                  target: \"#confirmed\",\n                  actions: cancel('maxsp')\n                }, {\n                  target: \".nomatch\",\n                  cond: context => !(context.recResult === 'help')\n                }],\n                MAXSPEECH: '#root.dm.maxspeech'\n              },\n              states: {\n                prompt: _objectSpread({}, promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?')),\n                nomatch: {\n                  entry: say(\"Sorry, I don't understand\"),\n                  on: {\n                    ENDSPEECH: \"prompt\"\n                  }\n                }\n              }\n            },\n            confirm_time: {\n              initial: \"prompt\",\n              on: {\n                RECOGNISED: [{\n                  cond: context => boolGrammar[context.recResult] === false,\n                  target: \"who\",\n                  actions: cancel('maxsp')\n                }, {\n                  cond: context => boolGrammar[context.recResult] === true,\n                  target: \"#confirmed\",\n                  actions: cancel('maxsp')\n                }, {\n                  target: \".nomatch\",\n                  cond: context => !(context.recResult === 'help')\n                }],\n                MAXSPEECH: '#root.dm.maxspeech'\n              },\n              states: {\n                prompt: _objectSpread({}, promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?')),\n                nomatch: {\n                  entry: say(\"Sorry, I don't understand\"),\n                  on: {\n                    ENDSPEECH: \"prompt\"\n                  }\n                }\n              }\n            }\n          }\n        },\n        confirmed: {\n          id: 'confirmed',\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["send","assign","actions","cancel","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","obj","counter","console","log","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","commands","dmMachine","init","CLICK","help","always","maxspeech1","maxspeech","target","count","context","RECOGNISED","cond","recResult","hist","welcome","query","MAXSPEECH","nomatch","invoke","src","event","onDone","intentbest","onError","menu","intent","name","TODOitem","Timer","Appointment","who","prompt1","prompt2","prompt3","reprompts","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":";AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,EAA8CC,OAA9C,QAA6D,QAA7D,C,CACA;;MACQC,M,GAAWD,O,CAAXC,M;AAER,MAAMC,QAAQ,GAAG,sCAAjB;AACA,MAAMC,OAAO,GAAG,kDAAhB;;AACA,MAAMC,UAAU,GAAIC,IAAD,IACfC,KAAK,CAAC,IAAIC,OAAJ,CAAYL,QAAQ,GAAGC,OAAvB,EAAgC;AAClCK,EAAAA,MAAM,EAAE,MAD0B;AAElCC,EAAAA,OAAO,EAAE;AAAE,cAAU;AAAZ,GAFyB;AAEyC;AAC3EC,EAAAA,IAAI,yBAAeL,IAAf;AAH8B,CAAhC,CAAD,CAAL,CAKKM,IALL,CAKUC,IAAI,IAAIA,IAAI,CAACC,IAAL,EALlB,CADJ;;AAQA,MAAMC,GAAG,GAAG;AAAEC,EAAAA,OAAO,EAAE;AAAX,CAAZ;AACAC,OAAO,CAACC,GAAR,CAAYH,GAAG,CAACC,OAAhB;;AAEA,SAASG,GAAT,CAAab,IAAb,EAAyD;AACrD,SAAOP,IAAI,CAAEqB,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEhB;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASiB,MAAT,GAAgD;AAC5C,SAAOxB,IAAI,CAAC,QAAD,CAAX;AACH;;AAED,MAAMyB,OAA8E,GAAG;AACnF,UAAQ;AAAEC,IAAAA,MAAM,EAAE;AAAV,GAD2E;AAEnF,YAAU;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAFyE;AAGnF,YAAU;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAHyE;AAInF,SAAO;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAJ4E;AAKnF,aAAW;AAAEA,IAAAA,MAAM,EAAE;AAAV,GALwE;AAMnF,WAAS;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAN0E;AAOnF,YAAU;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAPyE;AAQnF,YAAU;AAAEA,IAAAA,MAAM,EAAE;AAAV,GARyE;AASnF,SAAO;AAAEA,IAAAA,MAAM,EAAE;AAAV,GAT4E;AAWnF,eAAa;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAXsE;AAYnF,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAZsE;AAanF,YAAU;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAbyE;AAcnF,YAAU;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAdyE;AAenF,aAAW;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAfwE;AAgBnF,cAAY;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAhBuE;AAiBnF,gBAAc;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAjBqE;AAkBnF,kBAAgB;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAlBmE;AAmBnF,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAnBsE;AAoBnF,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GApBoE;AAqBnF,iBAAe;AAAEA,IAAAA,GAAG,EAAE;AAAP,GArBoE;AAsBnF,cAAY;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAtBuE;AAuBnF,eAAa;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAvBsE;AAwBnF,YAAU;AAAEA,IAAAA,GAAG,EAAE;AAAP,GAxByE;AA0BnF,OAAK;AAAEC,IAAAA,IAAI,EAAE;AAAR,GA1B8E;AA2BnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA3B2E;AA4BnF,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA5B8E;AA6BnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA7B2E;AA8BnF,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA9B8E;AA+BnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA/B2E;AAgCnF,OAAK;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAhC8E;AAiCnF,UAAQ;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAjC2E;AAkCnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAlC6E;AAmCnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAnC0E;AAoCnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GApC6E;AAqCnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GArC0E;AAsCnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAtC6E;AAuCnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAvC0E;AAwCnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAxC6E;AAyCnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GAzC0E;AA0CnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA1C6E;AA2CnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA3C0E;AA4CnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA5C6E;AA6CnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA7C0E;AA8CnF,QAAM;AAAEA,IAAAA,IAAI,EAAE;AAAR,GA9C6E;AA+CnF,WAAS;AAAEA,IAAAA,IAAI,EAAE;AAAR;AA/C0E,CAAvF;AAmDA,MAAMC,WAAW,GAAG;AACd,SAAO,IADO;AAEd,eAAa,IAFC;AAGd,SAAO,IAHO;AAId,UAAQ,IAJM;AAKd,kBAAgB,IALF;AAMd,UAAQ,KANM;AAOd,QAAM,KAPQ;AAQd,YAAU,KARI;AASd,WAAS;AATK,CAApB;;AAaA,SAASC,YAAT,CAAsBC,MAAtB,EAAgF;AAC5E,SAAQ;AACJC,IAAAA,OAAO,EAAE,QADL;AAEJC,IAAAA,MAAM,EAAE;AACJF,MAAAA,MAAM,EAAE;AACJG,QAAAA,KAAK,EAAEd,GAAG,CAACW,MAAD,CADN;AAEJI,QAAAA,EAAE,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb;AAFA,OADJ;AAKJC,MAAAA,GAAG,EAAE;AACDH,QAAAA,KAAK,EAAE,CAAClC,IAAI,CAAC,QAAD,CAAL,EACPA,IAAI,CAAE,WAAF,EAAe;AACbsC,UAAAA,KAAK,EAAE,IADM;AAEfC,UAAAA,EAAE,EAAE;AAFW,SAAf,CADG;AADN;AALD;AAFJ,GAAR;AAeH;;AAID,MAAMC,QAAQ,GAAG;AAAC,UAAQ,GAAT;AAAc,UAAQ;AAAtB,CAAjB;AAEA,OAAO,MAAMC,SAAmD,GAAI;AAChET,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJS,IAAAA,IAAI,EAAE;AACFP,MAAAA,EAAE,EAAE;AACAQ,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMJC,IAAAA,IAAI,EAAE;AACFV,MAAAA,KAAK,EAAEd,GAAG,CAAC,oDAAD,CADR;AAEFyB,MAAAA,MAAM,EAAE;AAFN,KANF;AAWJC,IAAAA,UAAU,EAAE;AACRZ,MAAAA,KAAK,EAAEd,GAAG,CAAC,OAAD,CADF;AAERe,MAAAA,EAAE,EAAE;AAAE,qBAAa;AAAf;AAFI,KAXR;AAiBJY,IAAAA,SAAS,EAAE;AAEPb,MAAAA,KAAK,EAAEd,GAAG,CAAC,uBAAD,CAFH;AAGPe,MAAAA,EAAE,EAAE;AAAEC,QAAAA,SAAS,EAAG;AAACY,UAAAA,MAAM,EAAE,wCAAT;AAAmD9C,UAAAA,OAAO,EAAED,MAAM,CAAC;AAAEgD,YAAAA,KAAK,EAAGC,OAAD,IAAaA,OAAO,CAACD,KAAR,GAAgB;AAAtC,WAAD;AAAlE;AAAd;AAHG,KAjBP;AAwBJZ,IAAAA,GAAG,EAAE;AACLL,MAAAA,OAAO,EAAE,SADJ;AAEDG,MAAAA,EAAE,EAAE;AAACgB,QAAAA,UAAU,EACP;AAAEH,UAAAA,MAAM,EAAE,MAAV;AACAI,UAAAA,IAAI,EAAGF,OAAD,IAAaA,OAAO,CAACG,SAAR,KAAsB;AADzC;AADJ,OAFH;AAKDpB,MAAAA,MAAM,EAAE;AACRqB,QAAAA,IAAI,EAAE;AAAEhC,UAAAA,IAAI,EAAE;AAAR,SADE;AAEJiC,QAAAA,OAAO,EAAE;AACThB,UAAAA,EAAE,EAAE,MADK;AAETP,UAAAA,OAAO,EAAE,QAFA;AAGbG,UAAAA,EAAE,EAAE;AACJgB,YAAAA,UAAU,EAAE;AACRH,cAAAA,MAAM,EAAE,OADA;AAERI,cAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB,CAFX;AAGRnD,cAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,EAAkBF,MAAM,CAAEiD,OAAD,IAAa;AAAE,uBAAO;AAAEM,kBAAAA,KAAK,EAAEN,OAAO,CAACG;AAAjB,iBAAP;AAAqC,eAArD,CAAxB;AAHD,aADR;AAMII,YAAAA,SAAS,EAAE;AANf,WAHS;AAWTxB,UAAAA,MAAM,EAAE;AACJF,YAAAA,MAAM,oBACCD,YAAY,CAAC,4BAAD,CADb,CADF;AAIJ4B,YAAAA,OAAO,EAAE;AACLxB,cAAAA,KAAK,EAAEd,GAAG,CAAC,2BAAD,CADL;AAELe,cAAAA,EAAE,EAAE;AAAEC,gBAAAA,SAAS,EAAE;AAAb;AAFC;AAJL;AAXC,SAFL;AAuBZoB,QAAAA,KAAK,EAAE;AACHG,UAAAA,MAAM,EAAE;AACRpB,YAAAA,EAAE,EAAE,MADI;AAEAqB,YAAAA,GAAG,EAAE,CAACV,OAAD,EAAUW,KAAV,KAAoBvD,UAAU,CAAC4C,OAAO,CAACM,KAAT,CAFnC;AAGRM,YAAAA,MAAM,EAAE;AACAd,cAAAA,MAAM,EAAE,MADR;AAEII,cAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB,CAFvB;AAGInD,cAAAA,OAAO,EAAE,CAACD,MAAM,CAAC,CAACiD,OAAD,EAAUW,KAAV,KAAoB;AAAE,uBAAO;AAACE,kBAAAA,UAAU,EAAEF,KAAK,CAAC/C;AAAnB,iBAAP;AAAiC,eAAxD,CAAP,EACD,CAACoC,OAAD,EAAqBW,KAArB,KAAmC3C,OAAO,CAACC,GAAR,CAAY0C,KAAK,CAAC/C,IAAlB,CADlC,EAC2DX,MAAM,CAAC,OAAD,CADjE;AAHb,aAHA;AASR6D,YAAAA,OAAO,EAAE;AACGhB,cAAAA,MAAM,EAAE,OADX;AAEGI,cAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB,CAFtB;AAGGnD,cAAAA,OAAO,EAAE,CAACgD,OAAD,EAASW,KAAT,KAAmB3C,OAAO,CAACC,GAAR,CAAY0C,KAAK,CAAC/C,IAAlB;AAH/B;AATD;AADL,SAvBK;AAwCfmD,QAAAA,IAAI,EAAE;AACCjC,UAAAA,OAAO,EAAE,QADV;AAECG,UAAAA,EAAE,EAAE;AACAC,YAAAA,SAAS,EAAE,CAAC;AACZgB,cAAAA,IAAI,EAAGF,OAAD,IAAaA,OAAO,CAACa,UAAR,CAAmBG,MAAnB,CAA0BC,IAA1B,KAAmC,OAD1C;AAEZnB,cAAAA,MAAM,EAAE;AAFI,aAAD,EAIjB;AAACI,cAAAA,IAAI,EAAGF,OAAD,IAAaA,OAAO,CAACa,UAAR,CAAmBG,MAAnB,CAA0BC,IAA1B,KAAmC,WAAvD;AACMnB,cAAAA,MAAM,EAAE;AADd,aAJiB,EAOjB;AAACI,cAAAA,IAAI,EAAGF,OAAD,IAAaA,OAAO,CAACa,UAAR,CAAmBG,MAAnB,CAA0BC,IAA1B,KAAmC,aAAvD;AACMnB,cAAAA,MAAM,EAAE;AADd,aAPiB,EAUX;AAAEA,cAAAA,MAAM,EAAE,UAAV;AACAI,cAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB;AADnB,aAVW;AADX,WAFL;AAgBCpB,UAAAA,MAAM,EAAE;AACJF,YAAAA,MAAM,EAAE;AACJG,cAAAA,KAAK,EAAElC,IAAI,CAAEkD,OAAD,KAAc;AACtB5B,gBAAAA,IAAI,EAAE,OADgB;AAEtBC,gBAAAA,KAAK;AAFiB,eAAd,CAAD;AADP,aADJ;AAOJmC,YAAAA,OAAO,EAAE;AAACxB,cAAAA,KAAK,EAAEd,GAAG,CAAC,sEAAD,CAAX;AACTe,cAAAA,EAAE,EAAE;AAAEC,gBAAAA,SAAS,EAAE;AAAb;AADK;AAPL;AAhBT,SAxCS;AAoEZgC,QAAAA,QAAQ,EAAE;AACNpC,UAAAA,OAAO,EAAE,QADH;AAENG,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAFE;AAGNH,UAAAA,MAAM,EAAE;AACJF,YAAAA,MAAM,EAAE;AAAEG,cAAAA,KAAK,EAAEd,GAAG,CAAC,+BAAD;AAAZ;AADJ;AAHF,SApEE;AA4EfiD,QAAAA,KAAK,EAAE;AACHrC,UAAAA,OAAO,EAAE,QADN;AAEHG,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAFD;AAGHH,UAAAA,MAAM,EAAE;AACZF,YAAAA,MAAM,EAAE;AAAEG,cAAAA,KAAK,EAAEd,GAAG,CAAE,0BAAF;AAAZ;AADI;AAHL,SA5EQ;AAoFZkD,QAAAA,WAAW,EAAE;AACTtC,UAAAA,OAAO,EAAE,QADA;AAETG,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAFK;AAGTH,UAAAA,MAAM,EAAE;AACJF,YAAAA,MAAM,EAAE;AAAEG,cAAAA,KAAK,EAAEd,GAAG,CAAC,6BAAD;AAAZ,aADJ;AAGRmD,YAAAA,GAAG,EAAE;AAELvC,cAAAA,OAAO,EAAE,QAFJ;AAGLG,cAAAA,EAAE,EAAE;AACAgB,gBAAAA,UAAU,EAAE,CAAC;AACTC,kBAAAA,IAAI,EAAGF,OAAD,IAAa,aAAazB,OAAO,CAACyB,OAAO,CAACG,SAAT,CAAP,IAA8B,EAA3C,CADV;AAETnD,kBAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,EAAkBF,MAAM,CAAEiD,OAAD,IAAa;AAAE,2BAAO;AAAExB,sBAAAA,MAAM,EAAED,OAAO,CAACyB,OAAO,CAACG,SAAT,CAAP,CAA2B3B;AAArC,qBAAP;AAAsD,mBAAtE,CAAxB,CAFA;AAGTsB,kBAAAA,MAAM,EAAE;AAHC,iBAAD,EAIR;AAAEA,kBAAAA,MAAM,EAAE,UAAV;AACAI,kBAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB;AADnB,iBAJQ,CADZ;AAOII,gBAAAA,SAAS,EAAE;AAPf,eAHC;AAYIxB,cAAAA,MAAM,EAAE;AACTF,gBAAAA,MAAM,EAAE;AACJG,kBAAAA,KAAK,EAAElC,IAAI,CAAEkD,OAAD,KAAc;AACtB5B,oBAAAA,IAAI,EAAE,OADgB;AAEtBC,oBAAAA,KAAK;AAFiB,mBAAd,CAAD,CADP;AAKJY,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE,KAAT;AAClB9C,sBAAAA,OAAO,EAAED,MAAM,CAAEiD,OAAD,IAAa;AAAE,+BAAO;AAACD,0BAAAA,KAAK,EAAE;AAAR,yBAAP;AAAmB,uBAAnC;AADG;AAAd;AALA,iBADC;AASTuB,gBAAAA,OAAO,EAAE;AACLjC,kBAAAA,EAAE,EAAE,SADC;AAELL,kBAAAA,KAAK,EAAEd,GAAG,CAAC,wCAAD,CAFL;AAGLe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE,KAAT;AAClB9C,sBAAAA,OAAO,EAAED,MAAM,CAAEiD,OAAD,IAAa;AAAE,+BAAO;AAACD,0BAAAA,KAAK,EAAE;AAAR,yBAAP;AAAmB,uBAAnC;AADG;AAAd;AAHC,iBATA;AAeTwB,gBAAAA,OAAO,EAAE;AACLlC,kBAAAA,EAAE,EAAE,SADC;AAELL,kBAAAA,KAAK,EAAEd,GAAG,CAAC,wCAAD,CAFL;AAGLe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE,KAAT;AAClB9C,sBAAAA,OAAO,EAAED,MAAM,CAAEiD,OAAD,IAAa;AAAE,+BAAO;AAACD,0BAAAA,KAAK,EAAE;AAAR,yBAAP;AAAmB,uBAAnC;AADG;AAAd;AAHC,iBAfA;AAqBTyB,gBAAAA,OAAO,EAAE;AACLnC,kBAAAA,EAAE,EAAE,SADC;AAELL,kBAAAA,KAAK,EAAGd,GAAG,CAAC,oDAAD,CAFN;AAGLe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE;AAAT;AAAd;AAHC,iBArBA;AA0BTX,gBAAAA,GAAG,EAAE;AACDH,kBAAAA,KAAK,EAAE,CAAClC,IAAI,CAAC,QAAD,CAAL,EACPA,IAAI,CAAE,WAAF,EAAe;AACfsC,oBAAAA,KAAK,EAAE,IADQ;AAEfC,oBAAAA,EAAE,EAAE;AAFW,mBAAf,CADG;AADN,iBA1BI;AAgCTmB,gBAAAA,OAAO,EAAE;AACLxB,kBAAAA,KAAK,EAAEd,GAAG,CAAC,yBAAD,CADL;AAELe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb;AAFC;AAhCA;AAZZ,aAHG;AAqDVT,YAAAA,GAAG,EAAE;AACHK,cAAAA,OAAO,EAAE,QADN;AAEHG,cAAAA,EAAE,EAAC;AACCgB,gBAAAA,UAAU,EAAE,CAAC;AACTC,kBAAAA,IAAI,EAAGF,OAAD,IAAa,UAAUzB,OAAO,CAACyB,OAAO,CAACG,SAAT,CAAP,IAA8B,EAAxC,CADV;AAETnD,kBAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,EAAkBF,MAAM,CAAEiD,OAAD,IAAa;AAAE,2BAAO;AAAEvB,sBAAAA,GAAG,EAAEF,OAAO,CAACyB,OAAO,CAACG,SAAT,CAAP,CAA2B1B;AAAlC,qBAAP;AAAgD,mBAAhE,CAAxB,CAFA;AAGTqB,kBAAAA,MAAM,EAAE;AAHC,iBAAD,EAKZ;AAAEA,kBAAAA,MAAM,EAAE,UAAV;AACAI,kBAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB;AADnB,iBALY,CADb;AAQCI,gBAAAA,SAAS,EAAE;AARZ,eAFA;AAYHxB,cAAAA,MAAM,EAAE;AACJF,gBAAAA,MAAM,EAAE;AACJG,kBAAAA,KAAK,EAAElC,IAAI,CAAEkD,OAAD,KAAc;AACtB5B,oBAAAA,IAAI,EAAE,OADgB;AAEtBC,oBAAAA,KAAK;AAFiB,mBAAd,CAAD,CADP;AAKVY,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE,KAAT;AACZ9C,sBAAAA,OAAO,EAAED,MAAM,CAAEiD,OAAD,IAAa;AAAE,+BAAO;AAACD,0BAAAA,KAAK,EAAE;AAAR,yBAAP;AAAmB,uBAAnC;AADH;AAAd;AALM,iBADJ;AASJ0B,gBAAAA,SAAS,EAAC;AACNzC,kBAAAA,KAAK,EAAEd,GAAG,CAAC,EAAD,CADJ;AAENe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG,CAAC;AACfgB,sBAAAA,IAAI,EAAGF,OAAD,IAAaA,OAAO,CAACD,KAAR,KAAkB,CADtB;AAEfD,sBAAAA,MAAM,EAAE;AAFO,qBAAD,EAId;AAAEA,sBAAAA,MAAM,EAAE,UAAV;AACAI,sBAAAA,IAAI,EAAGF,OAAD,IAAaA,OAAO,CAACD,KAAR,KAAkB;AADrC,qBAJc,EAOd;AAAED,sBAAAA,MAAM,EAAE,UAAV;AACAI,sBAAAA,IAAI,EAAGF,OAAD,IAAaA,OAAO,CAACD,KAAR,KAAkB;AADrC,qBAPc;AAAd;AAFE,iBATN;AAsBJuB,gBAAAA,OAAO,EAAE;AACLjC,kBAAAA,EAAE,EAAE,SADC;AAELL,kBAAAA,KAAK,EAAEd,GAAG,CAAC,6CAAD,CAFL;AAGXe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE,KAAT;AACZ9C,sBAAAA,OAAO,EAAED,MAAM,CAAEiD,OAAD,IAAa;AAAE,+BAAO;AAACD,0BAAAA,KAAK,EAAE;AAAR,yBAAP;AAAmB,uBAAnC;AADH;AAAd;AAHO,iBAtBL;AA4BJwB,gBAAAA,OAAO,EAAE;AACLlC,kBAAAA,EAAE,EAAE,SADC;AAELL,kBAAAA,KAAK,EAAEd,GAAG,CAAC,6CAAD,CAFL;AAGXe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE,KAAT;AACZ9C,sBAAAA,OAAO,EAAED,MAAM,CAAEiD,OAAD,IAAa;AAAE,+BAAO;AAACD,0BAAAA,KAAK,EAAE;AAAR,yBAAP;AAAmB,uBAAnC;AADH;AAAd;AAHO,iBA5BL;AAkCJyB,gBAAAA,OAAO,EAAE;AACLnC,kBAAAA,EAAE,EAAE,SADC;AAELL,kBAAAA,KAAK,EAAGd,GAAG,CAAC,yDAAD,CAFN;AAGXe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAG;AAACY,sBAAAA,MAAM,EAAE;AAAT;AAAd;AAHO,iBAlCL;AAuCJX,gBAAAA,GAAG,EAAE;AACDH,kBAAAA,KAAK,EAAE,CAAClC,IAAI,CAAC,QAAD,CAAL,EACPA,IAAI,CAAE,WAAF,EAAe;AACbsC,oBAAAA,KAAK,EAAE,IADM;AAEfC,oBAAAA,EAAE,EAAE;AAFW,mBAAf,CADG;AADN,iBAvCD;AA6CPmB,gBAAAA,OAAO,EAAE;AACJxB,kBAAAA,KAAK,EAAEd,GAAG,CAAC,2BAAD,CADN;AAEJe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb;AAFA;AA7CF;AAZL,aArDK;AAoHfwC,YAAAA,QAAQ,EAAE;AACH5C,cAAAA,OAAO,EAAE,QADN;AAEHG,cAAAA,EAAE,EAAE;AACAgB,gBAAAA,UAAU,EAAE,CAAC;AAACC,kBAAAA,IAAI,EAAGF,OAAD,IAAcrB,WAAW,CAACqB,OAAO,CAACG,SAAT,CAAX,KAAmC,KAAxD;AACTL,kBAAAA,MAAM,EAAE,MADC;AAET9C,kBAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AAFN,iBAAD,EAId;AAACiD,kBAAAA,IAAI,EAAGF,OAAD,IAAcrB,WAAW,CAACqB,OAAO,CAACG,SAAT,CAAX,KAAmC,IAAxD;AACAL,kBAAAA,MAAM,EAAE,2BADR;AAEM9C,kBAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AAFrB,iBAJc,EAQR;AAAE6C,kBAAAA,MAAM,EAAE,UAAV;AACAI,kBAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB;AADnB,iBARQ,CADZ;AAWII,gBAAAA,SAAS,EAAE;AAXf,eAFD;AAeHxB,cAAAA,MAAM,EAAE;AACJF,gBAAAA,MAAM,oBACCD,YAAY,CAAC,sEAAD,CADb,CADF;AAIP4B,gBAAAA,OAAO,EAAE;AACJxB,kBAAAA,KAAK,EAAEd,GAAG,CAAC,2BAAD,CADN;AAEJe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb;AAFA;AAJF;AAfL,aApHK;AA6IfR,YAAAA,IAAI,EAAE;AACCI,cAAAA,OAAO,EAAE,QADV;AAECG,cAAAA,EAAE,EAAE;AAAEgB,gBAAAA,UAAU,EAAE,CAAC;AACXC,kBAAAA,IAAI,EAAGF,OAAD,IAAa,WAAWzB,OAAO,CAACyB,OAAO,CAACG,SAAT,CAAP,IAA8B,EAAzC,CADR;AAEXnD,kBAAAA,OAAO,EAAE,CAACC,MAAM,CAAC,OAAD,CAAP,EAAkBF,MAAM,CAAEiD,OAAD,IAAa;AAAE,2BAAO;AAAEtB,sBAAAA,IAAI,EAAEH,OAAO,CAACyB,OAAO,CAACG,SAAT,CAAP,CAA2BzB;AAAnC,qBAAP;AAAkD,mBAAlE,CAAxB,CAFE;AAGXoB,kBAAAA,MAAM,EAAE;AAHG,iBAAD,EAKV;AAAEA,kBAAAA,MAAM,EAAE,UAAV;AACAI,kBAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB;AADnB,iBALU,CAAd;AAOII,gBAAAA,SAAS,EAAE;AAPf,eAFL;AAWCxB,cAAAA,MAAM,EAAE;AACJF,gBAAAA,MAAM,oBACCD,YAAY,CAAC,4BAAD,CADb,CADF;AAIP4B,gBAAAA,OAAO,EAAE;AACJxB,kBAAAA,KAAK,EAAEd,GAAG,CAAC,2BAAD,CADN;AAEJe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb;AAFA;AAJF;AAXT,aA7IS;AAkKfyC,YAAAA,yBAAyB,EAAE;AACpB7C,cAAAA,OAAO,EAAE,QADW;AAEpBG,cAAAA,EAAE,EAAE;AACAgB,gBAAAA,UAAU,EAAE,CAAC;AAACC,kBAAAA,IAAI,EAAGF,OAAD,IAAcrB,WAAW,CAACqB,OAAO,CAACG,SAAT,CAAX,KAAmC,KAAxD;AACTL,kBAAAA,MAAM,EAAE,eADC;AAET9C,kBAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AAFN,iBAAD,EAId;AAACiD,kBAAAA,IAAI,EAAGF,OAAD,IAAcrB,WAAW,CAACqB,OAAO,CAACG,SAAT,CAAX,KAAmC,IAAxD;AACAL,kBAAAA,MAAM,EAAE,YADR;AAEM9C,kBAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AAFrB,iBAJc,EAQR;AAAE6C,kBAAAA,MAAM,EAAE,UAAV;AACAI,kBAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB;AADnB,iBARQ,CADZ;AAWII,gBAAAA,SAAS,EAAE;AAXf,eAFgB;AAepBxB,cAAAA,MAAM,EAAE;AACJF,gBAAAA,MAAM,oBACCD,YAAY,CAAC,kGAAD,CADb,CADF;AAIP4B,gBAAAA,OAAO,EAAE;AACRxB,kBAAAA,KAAK,EAAEd,GAAG,CAAC,2BAAD,CADF;AAERe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb;AAFI;AAJF;AAfY,aAlKZ;AA2Ld0C,YAAAA,YAAY,EAAE;AACR9C,cAAAA,OAAO,EAAE,QADD;AAERG,cAAAA,EAAE,EAAG;AACDgB,gBAAAA,UAAU,EAAE,CAAC;AAACC,kBAAAA,IAAI,EAAGF,OAAD,IAAcrB,WAAW,CAACqB,OAAO,CAACG,SAAT,CAAX,KAAmC,KAAxD;AACTL,kBAAAA,MAAM,EAAE,KADC;AAET9C,kBAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AAFN,iBAAD,EAIlB;AAACiD,kBAAAA,IAAI,EAAGF,OAAD,IAAcrB,WAAW,CAACqB,OAAO,CAACG,SAAT,CAAX,KAAmC,IAAxD;AACAL,kBAAAA,MAAM,EAAE,YADR;AAEM9C,kBAAAA,OAAO,EAAEC,MAAM,CAAC,OAAD;AAFrB,iBAJkB,EAQZ;AAAE6C,kBAAAA,MAAM,EAAE,UAAV;AACAI,kBAAAA,IAAI,EAAGF,OAAD,IAAa,EAAEA,OAAO,CAACG,SAAR,KAAsB,MAAxB;AADnB,iBARY,CADX;AAWDI,gBAAAA,SAAS,EAAE;AAXV,eAFG;AAeRxB,cAAAA,MAAM,EAAE;AACJF,gBAAAA,MAAM,oBACDD,YAAY,CAAC,mGAAD,CADX,CADF;AAIP4B,gBAAAA,OAAO,EAAE;AACRxB,kBAAAA,KAAK,EAAEd,GAAG,CAAC,2BAAD,CADF;AAERe,kBAAAA,EAAE,EAAE;AAAEC,oBAAAA,SAAS,EAAE;AAAb;AAFI;AAJF;AAfA;AA3LA;AAHC,SApFD;AA8Sf2C,QAAAA,SAAS,EAAE;AACJxC,UAAAA,EAAE,EAAE,WADA;AAEJP,UAAAA,OAAO,EAAE,QAFL;AAGJG,UAAAA,EAAE,EAAE;AAAEC,YAAAA,SAAS,EAAE;AAAb,WAHA;AAIJH,UAAAA,MAAM,EAAE;AACJF,YAAAA,MAAM,EAAE;AACJG,cAAAA,KAAK,EAAElC,IAAI,CAAEkD,OAAD,KAAc;AACtB5B,gBAAAA,IAAI,EAAE,OADgB;AAEtBC,gBAAAA,KAAK;AAFiB,eAAd,CAAD;AADP;AADJ;AAJJ;AA9SI;AALP;AAxBD;AAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst { cancel } = actions;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst obj = { counter: 0 }\nconsole.log(obj.counter)\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\n\nconst commands = {\"stop\": \"S\", \"help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        }, \n        help: {\n            entry: say(\"It seems that you need some help. Let's try again.\"),\n            always: 'ask.hist'\n\n        },\n        maxspeech1: {\n            entry: say(\"Sorry\"),\n            on: { 'ENDSPEECH': 'ask.hist' },  \n        },\n        \n\n        maxspeech: {\n            \n            entry: say(\"Sorry, are you there?\"),\n            on: { ENDSPEECH : {target: \"#root.dm.ask.Appointment.day.reprompts\", actions: assign({ count: (context) => context.count + 1 })\n            \n        } }\n        },\n        ask: {\n        initial: 'welcome',\n            on: {RECOGNISED: \n                    { target: 'help', \n                    cond: (context) => context.recResult === 'help' },},\n            states: {\n            hist: { type: \"history\" },\n                welcome: {\n                id: \"wlcm\",\n                initial: \"prompt\",\n            on: {\n            RECOGNISED: {\n                target: 'query',\n                cond: (context) => !(context.recResult === 'help'),\n                actions: [cancel('maxsp'), assign((context) => { return { query: context.recResult } })],\n                    },\n                    MAXSPEECH: '#root.dm.maxspeech1'\n                },\n                states: {\n                    prompt: {\n                        ...promptAndAsk(\"What would you like to do?\")\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry I don't understand.\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n        },\n        query: {\n            invoke: {\n            id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n            onDone: {\n                    target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data), cancel('maxsp')]\n                    },\n            onError: {\n                        target: '#wlcm',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                    }\n                }\n        },\n\t    menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [{\n                cond: (context) => context.intentbest.intent.name === \"timer\",\n                target: \"Timer\"\n                },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                target: \"TODOitem\"\n\t\t        },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                target: \"Appointment\"\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help')}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, noted!`\n                    }))\n                },\n                nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                on: { ENDSPEECH: \"#wlcm\" }\n                    },\n                }\n        },\n        TODOitem: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: { entry: say(\"Welcome to the To do item app\")\n                 }\n            }\n        },\n\t    Timer: {\n\t        initial: \"prompt\",\n\t        on: { ENDSPEECH: \"#root.dm.init\" },\n\t        states: {\n\t    prompt: { entry: say (\"Welcome to the Timer app\")\n\t             }\n\t        }\n\t    },\n        Appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.ask.Appointment.who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") \n            },\n            who: {\n            \n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [cancel('maxsp'), assign((context) => { return { person: grammar[context.recResult].person } })],\n                    target: \"day\"},\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n                    },\n                     states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Who are you meeting with?`\n                            })),\n                        on: { ENDSPEECH:  {target: \"ask\",\n                        actions: assign((context) => { return {count: 0 }}) }},\n                    },\n                    prompt1: {\n                        id: 'prompt1',\n                        entry: say('Do you maybe want to meet with someone'),\n                        on: { ENDSPEECH:  {target: \"ask\",\n                        actions: assign((context) => { return {count: 1 }}) }},\n                    },\n                    prompt2: {\n                        id: 'prompt2',\n                        entry: say('Do you maybe want to meet with someone'),\n                        on: { ENDSPEECH:  {target: \"ask\",\n                        actions: assign((context) => { return {count: 2 }}) }},\n                    },\n                    prompt3: {\n                        id: 'prompt3',\n                        entry:  say('Ok, your last chance. So who are you meeting with?'),\n                        on: { ENDSPEECH:  {target: \"#root.dm.init\"}},\n                    },\n                    ask: {\n                        entry: [send('LISTEN'), \n                        send ('MAXSPEECH', {\n                            delay: 5000  ,\n                            id: 'maxsp'})],\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry I don't know them\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n          },\n          day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: [cancel('maxsp'), assign((context) => { return { day: grammar[context.recResult].day } })],\n                    target: \"duration\"\n                },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help') }],\n                MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `When are you meeting with?`\n                        })),\n\t\t            on: { ENDSPEECH:  {target: \"ask\",\n                    actions: assign((context) => { return {count: 0 }}) }},\n                },\n                reprompts:{ \n                    entry: say(''),\n                    on: { ENDSPEECH:  [{\n                        cond: (context) => context.count === 0,\n                        target: \"#prompt1\"},\n        \n                        { target: \"#prompt2\",\n                        cond: (context) => context.count === 1},\n        \n                        { target: \"#prompt3\",\n                        cond: (context) => context.count === 2}]},\n\n                },\n                prompt1: {\n                    id: 'prompt1',\n                    entry: say('When Do you maybe want to meet with someone'),\n\t\t            on: { ENDSPEECH:  {target: \"ask\",\n                    actions: assign((context) => { return {count: 1 }}) }},\n                },\n                prompt2: {\n                    id: 'prompt2',\n                    entry: say('When Do you maybe want to meet with someone'),\n\t\t            on: { ENDSPEECH:  {target: \"ask\",\n                    actions: assign((context) => { return {count: 2 }}) }},\n                },\n                prompt3: {\n                    id: 'prompt3',\n                    entry:  say('When Ok, your last chance. So who are you meeting with?'),\n\t\t            on: { ENDSPEECH:  {target: \"#root.dm.init\"}},\n                },\n                ask: {\n                    entry: [send('LISTEN'), \n                    send ('MAXSPEECH', {\n                          delay: 5000  ,\n                        id: 'maxsp'})],\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                 }\n\t             }\n        },\n    \tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"time\",\n                    actions: cancel('maxsp')\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirm_meeting_whole_day\",\n                    actions: cancel('maxsp'),\n\t\t            },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                    ...promptAndAsk('OK. ${context.person} on ${context.day}. Will it take the whole day?')\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n\t    time: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: [cancel('maxsp'), assign((context) => { return { time: grammar[context.recResult].time } })],\n                    target: \"confirm_time\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n\t\t    },\n            states: {\n                prompt: {\n                    ...promptAndAsk('What time is your meeting?')\n                },\n\t            nomatch: {\n\t                \tentry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                }\n                }\n        },\n\t    confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"#root.dm.init\",\n                    actions: cancel('maxsp')\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"#confirmed\",\n                    actions: cancel('maxsp')\n\t\t             },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                    ...promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?')\n                },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n \t    confirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"who\",\n                    actions: cancel('maxsp')\n                },\n\t\t        {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t        target: \"#confirmed\",\n                actions: cancel('maxsp')\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help') }],\n                MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                  ...promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?')\n                     },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t            \ton: { ENDSPEECH: \"prompt\" }\n\t           }\n            },\n        },\n    }\n},\n        \n\t    confirmed: {\n            id: 'confirmed',\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                    },\n                  }\n               }\n            }\n\t    }\n    }\n})\n\n\n\n\n\n "]},"metadata":{},"sourceType":"module"}