{"ast":null,"code":"import { send, actions, assign } from \"xstate\";\nconst cancel = actions.cancel; // SRGS parser and example (logs the results to console on page load)\n\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/homeGrammar'; //import { cancel } from \"xstate/lib/actionTypes\";\n\nconst gram = loadGrammar(grammar);\nconst input = \"turn the A C off\";\nconst prs = parse(input.split(/\\s+/), gram);\nconst result = parse(\"turn the A C off\".split(/\\s+/), gram).resultsForRule(gram.$root)[0];\nconsole.log(result['todo'][\"object\"]);\nconsole.log(result['todo'][\"action\"]); //console.log(result)\n\nconsole.log(gram);\nconst sayColour = send(context => ({\n  type: \"SPEAK\",\n  value: \"Repainting to \".concat(context.recResult)\n}));\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'who'\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => parse(context.recResult.split(/\\s+/), gram).resultsForRule(gram.$root)[0],\n          actions: assign(context => {\n            return {\n              person: gram[context.recResult]['todo'][\"object\"]\n            };\n          }),\n          target: \"ok\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What do you want to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    ok: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmHome.ts"],"names":["send","actions","assign","cancel","loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log","sayColour","context","type","value","recResult","say","text","_context","listen","dmMachine","initial","states","init","on","CLICK","who","RECOGNISED","cond","person","target","prompt","entry","ENDSPEECH","ask","nomatch","ok"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, actions, assign } from \"xstate\";\r\nconst { cancel } = actions;\r\n\r\n// SRGS parser and example (logs the results to console on page load)\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/homeGrammar'\r\n//import { cancel } from \"xstate/lib/actionTypes\";\r\n\r\nconst gram = loadGrammar(grammar)\r\nconst input = \"turn the A C off\"\r\nconst prs = parse(input.split(/\\s+/), gram)\r\nconst result = parse((\"turn the A C off\").split(/\\s+/), gram).resultsForRule(gram.$root)[0]\r\n\r\nconsole.log((result['todo'][\"object\"]))\r\nconsole.log((result['todo'][\"action\"]))\r\n//console.log(result)\r\nconsole.log(gram)\r\n\r\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\r\n}))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'who'\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => (parse(context.recResult.split(/\\s+/), gram).resultsForRule(gram.$root)[0]),\r\n                    actions: assign((context) => { return { person: gram[context.recResult]['todo'][\"object\"] } }),\r\n                    target: \"ok\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What do you want to do?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        ok: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `OK. ${context.person}. On which day is your meeting?`\r\n                    }))\r\n                },\r\n            }\r\n        }\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}