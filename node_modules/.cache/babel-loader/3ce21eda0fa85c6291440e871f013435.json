{"ast":null,"code":"import _objectSpread from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst cancel = actions.cancel;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst obj = {\n  counter: 0\n};\nconsole.log(obj.counter);\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Ridley\": {\n    person: \"Ridley Scott\"\n  },\n  \"Steven\": {\n    person: \"Steven Spielberg\"\n  },\n  \"Wes\": {\n    person: \"Wes Andreson\"\n  },\n  \"Stanley\": {\n    person: \"Stanley Kubrick\"\n  },\n  \"David\": {\n    person: \"David Lynch\"\n  },\n  \"Ingmar\": {\n    person: \"Ingmar Bergman\"\n  },\n  \"Alfred\": {\n    person: \"Alfred Hitchcock \"\n  },\n  \"Tim\": {\n    person: \"Tim Burton\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"1:00 pm\"\n  },\n  \"at 13\": {\n    time: \"1:00 pm\"\n  },\n  \"14\": {\n    time: \"2:00 pm\"\n  },\n  \"at 14\": {\n    time: \"2:00 pm\"\n  },\n  \"15\": {\n    time: \"3:00 pm\"\n  },\n  \"at 15\": {\n    time: \"3:00 pm\"\n  },\n  \"16\": {\n    time: \"4:00 pm\"\n  },\n  \"at 16\": {\n    time: \"4:00 pm\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"yep\": true,\n  \"sure\": true,\n  \"that's right\": true,\n  \"nope\": false,\n  \"no\": false,\n  \"no way\": false,\n  \"never\": false\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: send(context => ({\n          type: \"SPEAK\",\n          value: 'prompt'\n        })),\n        on: {\n          ENDSPEECH: {\n            target: \"ask\",\n            actions: assign(context => {\n              return {\n                count: 1\n              };\n            })\n          }\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nfunction promptAndAsk1(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: {\n            target: \"ask\",\n            actions: assign(context => {\n              return {\n                count: 2\n              };\n            })\n          }\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nfunction promptAndAsk2(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: {\n            target: \"ask\",\n            actions: assign(context => {\n              return {\n                count: 3\n              };\n            })\n          }\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nfunction promptAndAsk3(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: {\n            target: \"ask\",\n            actions: assign(context => {\n              return {\n                count: 4\n              };\n            })\n          }\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"H\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'ask'\n      }\n    },\n    help: {\n      entry: say(\"It seems that you need some help. Let's try again.\"),\n      always: [{\n        target: 'ask.hist',\n        actions: assign(context => {\n          return {\n            count: context.count - 1\n          };\n        })\n      }]\n    },\n    maxspeech1: {\n      entry: say(\"Sorry\"),\n      on: {\n        'ENDSPEECH': 'ask.hist'\n      }\n    },\n    ask: {\n      initial: 'welcome',\n      on: {\n        RECOGNISED: {\n          target: 'help',\n          cond: context => context.recResult === 'help'\n        }\n      },\n      states: {\n        hist: {\n          type: \"history\"\n        },\n        welcome: {\n          id: \"wlcm\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: {\n              target: 'query',\n              cond: context => !(context.recResult === 'help'),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  query: context.recResult\n                };\n              })]\n            },\n            MAXSPEECH: '#root.dm.maxspeech1'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"What would you like to do?\")),\n            nomatch: {\n              entry: say(\"Sorry I don't understand.\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.query),\n            onDone: {\n              target: 'menu',\n              cond: context => !(context.recResult === 'help'),\n              actions: [assign((context, event) => {\n                return {\n                  intentbest: event.data\n                };\n              }), (context, event) => console.log(event.data), cancel('maxsp')]\n            },\n            onError: {\n              target: '#wlcm',\n              cond: context => !(context.recResult === 'help'),\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        menu: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.intentbest.intent.name === \"timer\",\n              target: \"Timer\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"todo_item\",\n              target: \"TODOitem\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"appointment\",\n              target: \"Appointment\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK, noted!\"\n              }))\n            },\n            nomatch: {\n              entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n              on: {\n                ENDSPEECH: \"#wlcm\"\n              }\n            }\n          }\n        },\n        TODOitem: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the To do item app\")\n            }\n          }\n        },\n        Timer: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the Timer app\")\n            }\n          }\n        },\n        Appointment: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#who\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Let's create an appointment\")\n            }\n          }\n        },\n        who: {\n          id: 'who',\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              })],\n              target: \"day\"\n            }, {\n              target: \".maxspeech\",\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"Who are you meeting with?\")),\n            prompt1: _objectSpread({}, promptAndAsk1(\"Who is is that you are meeting?\")),\n            prompt2: _objectSpread({}, promptAndAsk2(\"Did you want to meet with someone?\")),\n            prompt3: _objectSpread({}, promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")),\n            maxspeech: {\n              entry: say(\"Sorry\"),\n              on: {\n                ENDSPEECH: [{\n                  cond: context => context.count === 0,\n                  target: \"prompt\"\n                }, {\n                  cond: context => context.count === 1,\n                  target: \"prompt1\"\n                }, {\n                  target: \"prompt2\",\n                  cond: context => context.count === 2\n                }, {\n                  target: \"prompt3\",\n                  cond: context => context.count === 3\n                }, {\n                  target: \"#root.dm.init\",\n                  cond: context => context.count === 4\n                }]\n              }\n            }\n          }\n        },\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              })],\n              target: \"duration\"\n            }, {\n              target: \".maxspeech\",\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"OK. ${context.person}\")),\n            prompt1: _objectSpread({}, promptAndAsk1(\"When do you want to meet with?\")),\n            prompt2: _objectSpread({}, promptAndAsk2(\"Do you know when you want to meet with?\")),\n            prompt3: _objectSpread({}, promptAndAsk3(\"Ok, last chance. On which day is your meeting?\")),\n            maxspeech: {\n              entry: say(\"Sorry\"),\n              on: {\n                ENDSPEECH: [{\n                  cond: context => context.count === 0,\n                  target: \"prompt\"\n                }, {\n                  cond: context => context.count === 1,\n                  target: \"prompt1\"\n                }, {\n                  target: \"prompt2\",\n                  cond: context => context.count === 2\n                }, {\n                  target: \"prompt3\",\n                  cond: context => context.count === 3\n                }, {\n                  target: \"#root.dm.init\",\n                  cond: context => context.count === 4\n                }]\n              }\n            }\n          }\n        },\n        duration: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"time\",\n              actions: cancel('maxsp')\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"confirm_meeting_whole_day\",\n              actions: cancel('maxsp')\n            }, {\n              target: \".maxspeech\",\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"Will it take the whole day?\")),\n            prompt1: _objectSpread({}, promptAndAsk1(\"Will yout meeting take the whole day?\")),\n            prompt2: _objectSpread({}, promptAndAsk2(\"Do you want to meet with for the whole day?\")),\n            prompt3: _objectSpread({}, promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")),\n            maxspeech: {\n              entry: say(\"Sorry\"),\n              on: {\n                ENDSPEECH: [{\n                  cond: context => context.count === 0,\n                  target: \"prompt\"\n                }, {\n                  cond: context => context.count === 1,\n                  target: \"prompt1\"\n                }, {\n                  target: \"prompt2\",\n                  cond: context => context.count === 2\n                }, {\n                  target: \"prompt3\",\n                  cond: context => context.count === 3\n                }, {\n                  target: \"#root.dm.init\",\n                  cond: context => context.count === 4\n                }]\n              }\n            }\n          }\n        },\n        time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              })],\n              target: \"confirm_time\"\n            }, {\n              target: \".maxspeech\",\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"What time is yout meeting?\")),\n            prompt1: _objectSpread({}, promptAndAsk1(\"When exactly do you want to meet with?\")),\n            prompt2: _objectSpread({}, promptAndAsk2(\"Do yoy know when you want to meet with?\")),\n            prompt3: _objectSpread({}, promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")),\n            maxspeech: {\n              entry: say(\"Sorry\"),\n              on: {\n                ENDSPEECH: [{\n                  cond: context => context.count === 0,\n                  target: \"prompt\"\n                }, {\n                  cond: context => context.count === 1,\n                  target: \"prompt1\"\n                }, {\n                  target: \"prompt2\",\n                  cond: context => context.count === 2\n                }, {\n                  target: \"prompt3\",\n                  cond: context => context.count === 3\n                }, {\n                  target: \"#root.dm.init\",\n                  cond: context => context.count === 4\n                }]\n              }\n            }\n          }\n        },\n        confirm_meeting_whole_day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"#root.dm.init\",\n              actions: cancel('maxsp')\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"#confirmed\",\n              actions: cancel('maxsp')\n            }, {\n              target: \".maxspeech\",\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"Do you want to create a meeting with?\")),\n            prompt1: _objectSpread({}, promptAndAsk1(\"Are your sure?\")),\n            prompt2: _objectSpread({}, promptAndAsk2(\"Do yoy know when you want to meet with?\")),\n            prompt3: _objectSpread({}, promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")),\n            maxspeech: {\n              entry: say(\"Sorry\"),\n              on: {\n                ENDSPEECH: [{\n                  cond: context => context.count === 0,\n                  target: \"prompt\"\n                }, {\n                  cond: context => context.count === 1,\n                  target: \"prompt1\"\n                }, {\n                  target: \"prompt2\",\n                  cond: context => context.count === 2\n                }, {\n                  target: \"prompt3\",\n                  cond: context => context.count === 3\n                }, {\n                  target: \"#root.dm.init\",\n                  cond: context => context.count === 4\n                }]\n              }\n            }\n          }\n        },\n        confirm_time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"who\",\n              actions: cancel('maxsp')\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"#confirmed\",\n              actions: cancel('maxsp')\n            }, {\n              target: \".maxspeech\",\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"On which day is your meeting?\")),\n            prompt1: _objectSpread({}, promptAndAsk1(\"When do you want to meet with?\")),\n            prompt2: _objectSpread({}, promptAndAsk2(\"Do yoy know when you want to meet with?\")),\n            prompt3: _objectSpread({}, promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")),\n            maxspeech: {\n              entry: say(\"Sorry\"),\n              on: {\n                ENDSPEECH: [{\n                  cond: context => context.count === 0,\n                  target: \"prompt\"\n                }, {\n                  cond: context => context.count === 1,\n                  target: \"prompt1\"\n                }, {\n                  target: \"prompt2\",\n                  cond: context => context.count === 2\n                }, {\n                  target: \"prompt3\",\n                  cond: context => context.count === 3\n                }, {\n                  target: \"#root.dm.init\",\n                  cond: context => context.count === 4\n                }]\n              }\n            }\n          }\n        }\n      }\n    },\n    confirmed: {\n      id: 'confirmed',\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"#root.dm.init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointmentPlus1.ts"],"names":["send","assign","actions","cancel","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","obj","counter","console","log","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","promptAndAsk","prompt","initial","states","entry","context","on","ENDSPEECH","target","count","ask","delay","id","promptAndAsk1","promptAndAsk2","promptAndAsk3","commands","dmMachine","init","CLICK","help","always","maxspeech1","RECOGNISED","cond","recResult","hist","welcome","query","MAXSPEECH","nomatch","invoke","src","event","onDone","intentbest","onError","menu","intent","name","TODOitem","Timer","Appointment","who","prompt1","prompt2","prompt3","maxspeech","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\nimport { mapContext } from \"xstate/lib/utils\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst { cancel } = actions;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst obj = { counter: 0 }\nconsole.log(obj.counter)\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: 'prompt'\n                })),\n                on: {  ENDSPEECH:  {target: \"ask\",\n                actions: assign((context) => { return {count: 1 }}) }}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\nfunction promptAndAsk1(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: {  ENDSPEECH:  {target: \"ask\",\n                actions: assign((context) => { return {count: 2 }}) }}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\nfunction promptAndAsk2(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: {  ENDSPEECH:  {target: \"ask\",\n                actions: assign((context) => { return {count: 3 }}) }}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\nfunction promptAndAsk3(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: {  ENDSPEECH:  {target: \"ask\",\n                actions: assign((context) => { return {count: 4 }}) }}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\n\nconst commands = {\"stop\": \"S\", \"help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        }, \n        help: {\n            entry: say(\"It seems that you need some help. Let's try again.\"),\n            always:[{target: 'ask.hist', actions: assign((context) => { return {count: (context.count - 1) }}) }] },\n\n        maxspeech1: {\n            entry: say(\"Sorry\"),\n            on: { 'ENDSPEECH': 'ask.hist' },  \n\n        },\n        ask: {\n        initial: 'welcome',\n            on: {RECOGNISED: \n                    { target: 'help', \n                    cond: (context) => context.recResult === 'help' },},\n            states: {\n                hist: { type: \"history\" },\n                welcome: {\n                    id: \"wlcm\",\n                    initial: \"prompt\",\n                    on: { RECOGNISED: \n                            { target: 'query',\n                            cond: (context) => !(context.recResult === 'help'),\n                            actions: [cancel('maxsp'), assign((context) => { return { query: context.recResult } })],\n                            },\n                        MAXSPEECH: '#root.dm.maxspeech1'\n                    },\n                    states: {\n                        prompt: {...promptAndAsk(\"What would you like to do?\")\n                        },\n                        nomatch: {\n                            entry: say(\"Sorry I don't understand.\"),\n                            on: { ENDSPEECH: \"prompt\" }\n                                }   \n                        }\n            },\n            query: {\n                invoke: {\n                    id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n                    onDone: {\n                        target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data), cancel('maxsp')]\n                    },\n                    onError: {\n                        target: '#wlcm',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                         }\n                    }\n            },\n\t        menu: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [{\n                    cond: (context) => context.intentbest.intent.name === \"timer\",\n                    target: \"Timer\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                    target: \"TODOitem\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                    target: \"Appointment\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help')}]\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK, noted!`\n                        }))\n                    },\n                    nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                        on: { ENDSPEECH: \"#wlcm\" }\n                        },\n                    }\n            },\n            TODOitem: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say(\"Welcome to the To do item app\")\n                    }\n                }\n            },\n            Timer: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say (\"Welcome to the Timer app\")\n                    }\n                }\n            },\n            Appointment: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#who\" },\n                states: {\n                    prompt: { entry: say(\"Let's create an appointment\") \n                    }\n                }\n            },\n            who: {\n                id: 'who',\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return { person: grammar[context.recResult].person } })],\n                        target: \"day\"},\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                        },\n                states: {\n                        prompt: {...promptAndAsk(\"Who are you meeting with?\")\n                        },\n                        prompt1: {\n                            ...promptAndAsk1(\"Who is is that you are meeting?\")\n                        },\n                        prompt2: {\n                            ...promptAndAsk2(\"Did you want to meet with someone?\")\n                        },\n                        prompt3: {\n                            ...promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")\n                        },\n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                        \n                    }\n            },\n            day: {\n                initial: \"prompt\",\n                on:{\n                    RECOGNISED: [{\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'),assign((context) => { return { day: grammar[context.recResult].day } })],\n                        target: \"duration\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                        prompt: {...promptAndAsk(\"OK. ${context.person}\")\n                        },\n                        prompt1: {\n                            ...promptAndAsk1(\"When do you want to meet with?\")\n                        },\n                        prompt2: {\n                            ...promptAndAsk2(\"Do you know when you want to meet with?\")\n                        },\n                        prompt3: {\n                            ...promptAndAsk3(\"Ok, last chance. On which day is your meeting?\")\n                        },\n                    \n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                    }\n            },\n            duration: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"time\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"confirm_meeting_whole_day\",\n                        actions: cancel('maxsp'),\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(\"Will it take the whole day?\")\n                    },\n                    prompt1: {\n                        ...promptAndAsk1(\"Will yout meeting take the whole day?\")\n                    },\n                    prompt2: {\n                        ...promptAndAsk2(\"Do you want to meet with for the whole day?\")\n                    },\n                    prompt3: {\n                        ...promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                    }\n            },\n\t        time: {\n                initial: \"prompt\",\n                on: { RECOGNISED: [{\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return { time: grammar[context.recResult].time } })],\n                        target: \"confirm_time\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(\"What time is yout meeting?\")\n                    },\n                    prompt1: {\n                        ...promptAndAsk1(\"When exactly do you want to meet with?\")\n                    },\n                    prompt2: {\n                        ...promptAndAsk2(\"Do yoy know when you want to meet with?\")\n                    },\n                    prompt3: {\n                        ...promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                    }\n            },\n\t        confirm_meeting_whole_day: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"#root.dm.init\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(\"Do you want to create a meeting with?\")\n                    },\n                    prompt1: {\n                        ...promptAndAsk1(\"Are your sure?\")\n                    },\n                    prompt2: {\n                        ...promptAndAsk2(\"Do yoy know when you want to meet with?\")\n                    },\n                    prompt3: {\n                        ...promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},   \n                        ]}\n                    },\n                }\n            },\n \t        confirm_time: {\n                initial: \"prompt\",\n                on:  {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"who\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(\"On which day is your meeting?\")\n                    },\n                    prompt1: {\n                        ...promptAndAsk1(\"When do you want to meet with?\")\n                    },\n                    prompt2: {\n                        ...promptAndAsk2(\"Do yoy know when you want to meet with?\")\n                    },\n                    prompt3: {\n                        ...promptAndAsk3(\"Ok, last chance. Who are you meeting with?\")\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},  \n                                ]}\n                            },\n                        },\n                    },\n                }\n            },\n            confirmed: {\n                id: 'confirmed',\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Your appointment has been created!`\n                        }))\n                    },\n                }\n            }\n        } \n    })\n\n\n\n\n\n "]},"metadata":{},"sourceType":"module"}