{"ast":null,"code":"import { send, assign } from \"xstate\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Ridley\": {\n    person: \"Ridley Scott\"\n  },\n  \"Steven\": {\n    person: \"Steven Spielberg\"\n  },\n  \"Wes\": {\n    person: \"Wes Andreson\"\n  },\n  \"Stanley\": {\n    person: \"Stanley Kubrick\"\n  },\n  \"David\": {\n    person: \"David Lynch\"\n  },\n  \"Ingmar\": {\n    person: \"Ingmar Bergman\"\n  },\n  \"Alfred\": {\n    person: \"Alfred Hitchcock \"\n  },\n  \"Tim\": {\n    person: \"Tim Burton\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"1:00 pm\"\n  },\n  \"at 13\": {\n    time: \"1:00 pm\"\n  },\n  \"14\": {\n    time: \"2:00 pm\"\n  },\n  \"at 14\": {\n    time: \"2:00 pm\"\n  },\n  \"15\": {\n    time: \"3:00 pm\"\n  },\n  \"at 15\": {\n    time: \"3:00 pm\"\n  },\n  \"16\": {\n    time: \"4:00 pm\"\n  },\n  \"at 16\": {\n    time: \"4:00 pm\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"yep\": true,\n  \"sure\": true,\n  \"that's right\": true,\n  \"nope\": false,\n  \"no\": false,\n  \"no way\": false,\n  \"never\": false\n};\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"H\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'ask'\n      }\n    },\n    ask: {\n      initial: \"welcome\",\n      on: {\n        RECOGNISED: {\n          target: '#help',\n          cond: context => context.recResult === 'help'\n        }\n      },\n      states: {\n        hist: {\n          type: history\n        },\n        welcome: {\n          id: \"wlcm\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: {\n              target: 'query',\n              cond: context => !(context.recResult === 'help'),\n              actions: assign(context => {\n                return {\n                  query: context.recResult\n                };\n              })\n            }\n          },\n          states: {\n            prompt: {\n              entry: say(\"What would you like to do?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry I don't understand.\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        help: {\n          id: \"help\",\n          entry: say(\"It seems that you need some help.\"),\n          always: 'ask.hist'\n        },\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.query),\n            onDone: {\n              target: 'menu',\n              cond: context => !(context.recResult === 'help'),\n              actions: [assign((context, event) => {\n                return {\n                  intentbest: event.data\n                };\n              }), (context, event) => console.log(event.data)]\n            },\n            onError: {\n              target: 'welcome',\n              cond: context => !(context.recResult === 'help'),\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        menu: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.intentbest.intent.name === \"timer\",\n              target: \"Timer\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"todo_item\",\n              target: \"TODOitem\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"appointment\",\n              target: \"Appointment\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK, noted!\"\n              }))\n            },\n            nomatch: {\n              entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n              on: {\n                ENDSPEECH: \"#wlcm\"\n              }\n            }\n          }\n        },\n        TODOitem: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the To do item app\")\n            }\n          }\n        },\n        Timer: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the Timer app\")\n            }\n          }\n        },\n        Appointment: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"who\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Let's create an appointment\")\n            }\n          }\n        },\n        who: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }),\n              target: \"day\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: say(\"Who are you meeting with?\"),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry I don't know them\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }),\n              target: \"duration\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        duration: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"time\"\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"confirm_meeting_whole_day\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),\n              target: \"confirm_time\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK. What time is your meeting?\"\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirm_meeting_whole_day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"#root.dm.init\"\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"confirmed\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirm_time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"who\"\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"confirmed\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirmed: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointmentble.ts"],"names":["send","assign","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","commands","dmMachine","initial","states","init","on","CLICK","ask","RECOGNISED","target","cond","context","recResult","hist","history","welcome","id","actions","query","prompt","entry","ENDSPEECH","nomatch","help","always","invoke","src","event","onDone","intentbest","console","log","onError","menu","intent","name","TODOitem","Timer","Appointment","who","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\nconst commands = {\"stop\": \"S\", \"help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        },\n        \n    ask: {\n        initial: \"welcome\",\n        on: {RECOGNISED: \n            { target: '#help', \n            cond: (context) => context.recResult === 'help' },},\n        states: {\n        hist: {type: history},\n        welcome: {\n            id: \"wlcm\",\n            initial: \"prompt\",\n            on: {\n            RECOGNISED: {\n                target: 'query',\n                cond: (context) => !(context.recResult === 'help'),\n                actions: assign((context) => { return { query: context.recResult } }),\n                    }\n                },\n                states: {\n                    prompt: {\n                        entry: say(\"What would you like to do?\"),\n                        on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry I don't understand.\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n        },\n        help: {\n            id: \"help\", \n            entry: say(\"It seems that you need some help.\"),\n            always: 'ask.hist'\n        },\n        query: {\n            invoke: {\n            id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n            onDone: {\n                    target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data)]\n                    },\n            onError: {\n                        target: 'welcome',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                    }\n                }\n        },\n\t    menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [{\n                cond: (context) => context.intentbest.intent.name === \"timer\",\n                target: \"Timer\"\n                },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                target: \"TODOitem\"\n\t\t        },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                target: \"Appointment\"\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'),}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, noted!`\n                    }))\n                },\n                nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                on: { ENDSPEECH: \"#wlcm\" }\n                    },\n                }\n        },\n        TODOitem: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: { entry: say(\"Welcome to the To do item app\")\n                 }\n            }\n        },\n\t    Timer: {\n\t        initial: \"prompt\",\n\t        on: { ENDSPEECH: \"#root.dm.init\" },\n\t        states: {\n\t    prompt: { entry: say (\"Welcome to the Timer app\")\n\t             }\n\t        }\n\t    },\n        Appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                        })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                 }\n\t             }\n        },\n    \tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"time\"\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirm_meeting_whole_day\"\n\t\t            },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n\t    time: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help'), }]\n\t\t    },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. What time is your meeting?`\n                        })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t                \tentry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                }\n                }\n        },\n\t    confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"#root.dm.init\"\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirmed\"\n\t\t             },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                        })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t        \task: {\n\t\t            entry: listen()\n                },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n \t    confirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"who\"\n                },\n\t\t        {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t        target: \"confirmed\"\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n\t\t        on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t             entry: listen()\n                     },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t            \ton: { ENDSPEECH: \"prompt\" }\n\t           }\n            },\n        },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t    }\n\t    }\n    }\n }\n}\n})\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}