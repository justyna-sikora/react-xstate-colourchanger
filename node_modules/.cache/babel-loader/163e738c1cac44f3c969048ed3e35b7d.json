{"ast":null,"code":"import _slicedToArray from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/index.tsx\",\n    _s = $RefreshSig$();\n\nimport \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst newMachine = Machine({\n  states: {\n    welcome: {\n      id: \"wlcm\",\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: 'query',\n          actions: assign(context => {\n            return {\n              query: context.recResult\n            };\n          })\n        }\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.query),\n        onDone: {\n          target: 'menu',\n          actions: [assign((context, event) => {\n            return {\n              intentbest: event.data\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentbest.intent.name === \"timer\",\n          target: \"Timer\"\n        }, {\n          cond: context => context.intentbest.intent.name === \"todo_item\",\n          target: \"TODOitem\"\n        }, {\n          cond: context => context.intentbest.intent.name === \"appointment\",\n          target: \"dm\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK, noted!\"\n          }))\n        },\n        nomatch: {\n          entry: say(\"Oh sorry, it seems that I can't help you with that at the moment.\"),\n          on: {\n            ENDSPEECH: \"#wlcm\"\n          }\n        }\n      }\n    },\n    TODOitem: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the TODOitem app\")\n        }\n      }\n    },\n    Timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the Timer app\")\n        }\n      }\n    },\n    dm: _objectSpread({}, dmMachine)\n  }\n});\nconst machine = Machine({\n  id: 'root',\n  type: 'parallel',\n  states: {\n    dm: _objectSpread({}, dmMachine),\n    asrtts: {\n      initial: 'idle',\n      states: {\n        idle: {\n          on: {\n            LISTEN: 'recognising',\n            SPEAK: {\n              target: 'speaking',\n              actions: assign((_context, event) => {\n                return {\n                  ttsAgenda: event.value\n                };\n              })\n            }\n          }\n        },\n        recognising: {\n          entry: 'recStart',\n          exit: 'recStop',\n          on: {\n            ASRRESULT: {\n              actions: ['recLogResult', assign((_context, event) => {\n                return {\n                  recResult: event.value\n                };\n              })],\n              target: '.match'\n            },\n            RECOGNISED: 'idle'\n          },\n          states: {\n            match: {\n              entry: send('RECOGNISED')\n            }\n          }\n        },\n        speaking: {\n          entry: 'ttsStart',\n          on: {\n            ENDSPEECH: 'idle'\n          }\n        }\n      }\n    }\n  }\n}, {\n  actions: {\n    recLogResult: context => {\n      /* context.recResult = event.recResult; */\n      console.log('<< ASR: ' + context.recResult);\n    },\n    test: () => {\n      console.log('test');\n    },\n    logIntent: context => {\n      /* context.nluData = event.data */\n      console.log('<< NLU intent: ' + context.nluData.intent.name);\n    }\n  }\n});\n\nconst ReactiveButton = props => {\n  switch (true) {\n    case props.state.matches({\n      asrtts: 'recognising'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"glowing 20s linear\"\n        }\n      }, props), {}, {\n        children: \"Listening...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 17\n      }, this);\n\n    case props.state.matches({\n      asrtts: 'speaking'\n    }):\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\",\n        style: {\n          animation: \"bordering 1s infinite\"\n        }\n      }, props), {}, {\n        children: \"Speaking...\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this);\n\n    default:\n      return /*#__PURE__*/_jsxDEV(\"button\", _objectSpread(_objectSpread({\n        type: \"button\",\n        className: \"glow-on-hover\"\n      }, props), {}, {\n        children: \"Click to start\"\n      }), void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this);\n  }\n};\n\n_c = ReactiveButton;\n\nfunction App() {\n  _s();\n\n  const _useSpeechSynthesis = useSpeechSynthesis({\n    onEnd: () => {\n      send('ENDSPEECH');\n    }\n  }),\n        speak = _useSpeechSynthesis.speak,\n        cancel = _useSpeechSynthesis.cancel,\n        speaking = _useSpeechSynthesis.speaking;\n\n  const _useSpeechRecognition = useSpeechRecognition({\n    onResult: result => {\n      send({\n        type: \"ASRRESULT\",\n        value: result\n      });\n    }\n  }),\n        listen = _useSpeechRecognition.listen,\n        listening = _useSpeechRecognition.listening,\n        stop = _useSpeechRecognition.stop;\n\n  const _useMachine = useMachine(machine, {\n    devTools: true,\n    actions: {\n      recStart: asEffect(() => {\n        console.log('Ready to receive a color command.');\n        listen({\n          interimResults: false,\n          continuous: true\n        });\n      }),\n      recStop: asEffect(() => {\n        console.log('Recognition stopped.');\n        stop();\n      }),\n      changeColour: asEffect(context => {\n        console.log('Repainting...');\n        document.body.style.background = context.recResult;\n      }),\n      ttsStart: asEffect((context, effect) => {\n        console.log('Speaking...');\n        speak({\n          text: context.ttsAgenda\n        });\n      }),\n      ttsCancel: asEffect((context, effect) => {\n        console.log('TTS STOP...');\n        cancel();\n      })\n      /* speak: asEffect((context) => {\n      * console.log('Speaking...');\n       *     speak({text: context.ttsAgenda })\n       * } */\n\n    }\n  }),\n        _useMachine2 = _slicedToArray(_useMachine, 3),\n        current = _useMachine2[0],\n        send = _useMachine2[1],\n        service = _useMachine2[2];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(ReactiveButton, {\n      state: current,\n      onClick: () => send('CLICK')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 250,\n    columnNumber: 9\n  }, this);\n}\n\n_s(App, \"RIIO137itlHAPnsUEd30120dxYQ=\", false, function () {\n  return [useSpeechSynthesis, useSpeechRecognition, useMachine];\n});\n\n_c2 = App;\n;\n/* RASA API\n *  */\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 276,\n  columnNumber: 5\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ReactiveButton\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","send","useMachine","asEffect","inspect","dmMachine","url","iframe","useSpeechSynthesis","useSpeechRecognition","newMachine","states","welcome","id","initial","on","RECOGNISED","target","actions","context","query","recResult","prompt","entry","say","ENDSPEECH","ask","listen","nomatch","invoke","src","event","nluRequest","onDone","intentbest","data","console","log","onError","menu","cond","intent","name","type","value","TODOitem","Timer","dm","machine","asrtts","idle","LISTEN","SPEAK","_context","ttsAgenda","recognising","exit","ASRRESULT","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listening","stop","devTools","recStart","interimResults","continuous","recStop","changeColour","document","body","style","background","ttsStart","effect","text","ttsCancel","current","service","proxyurl","rasaurl","fetch","Request","method","headers","then","json","rootElement","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport { Machine, assign, send, State } from \"xstate\";\nimport { useMachine, asEffect } from \"@xstate/react\";\nimport { inspect } from \"@xstate/inspect\";\nimport { dmMachine } from \"./dmAppointment\";\n\n\ninspect({\n    url: \"https://statecharts.io/inspect\",\n    iframe: false\n});\n\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\n\n\nconst newMachine = Machine<SDSContext, any, SDSEvent>({\n    states: {\n\n    welcome: {\n        id: \"wlcm\",\n        initial: \"prompt\",\n        on: {\n        RECOGNISED: {\n            target: 'query',\n            actions: assign((context) => { return { query: context.recResult } }),\n                }\n            },\n            states: {\n                prompt: {\n                    entry: say(\"What would you like to do?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't understand.\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n    },\n    query: {\n        invoke: {\n        id: 'rasa',\n                src: (context, event) => nluRequest(context.query),\n        onDone: {\n                target: 'menu',\n                    actions: [assign((context, event) => { return {intentbest: event.data }}),\n                            (context:SDSContext, event:any) => console.log(event.data)]\n                },\n        onError: {\n                    target: 'welcome',\n                    actions: (context,event) => console.log(event.data)\n                }\n            }\n    },\nmenu: {\n        initial: \"prompt\",\n        on: {\n            ENDSPEECH: [{\n            cond: (context) => context.intentbest.intent.name === \"timer\",\n            target: \"Timer\"\n\n            },\n            {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n            target: \"TODOitem\"\n            },\n\n            {cond: (context) => context.intentbest.intent.name === \"appointment\",\n            target: \"dm\"\n\n            },\n            { target: \".nomatch\"}]\n        },\n        states: {\n            prompt: {\n                entry: send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK, noted!`\n                }))\n            },\n            nomatch: {entry: say(\"Oh sorry, it seems that I can't help you with that at the moment.\"),\n            on: { ENDSPEECH: \"#wlcm\" }\n        },\n        }\n    },\n    TODOitem: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n            prompt: { entry: say(\"Welcome to the TODOitem app\")\n        }\n       }\n    },\n    Timer: {\n        initial: \"prompt\",\n        on: { ENDSPEECH: \"init\" },\n        states: {\n    prompt: { entry: say (\"Welcome to the Timer app\")\n        }\n        }\n    },\n    dm: {\n        ...dmMachine\n    }\n\n    }\n})\n\nconst machine = Machine<SDSContext, any, SDSEvent>({\n    id: 'root',\n    type: 'parallel',\n    states: {\n        dm: {\n            ...dmMachine\n        },\n        asrtts: {\n            initial: 'idle',\n            states: {\n                idle: {\n                    on: {\n                        LISTEN: 'recognising',\n                        SPEAK: {\n                            target: 'speaking',\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\n                        }\n                    }\n                },\n                recognising: {\n                    entry: 'recStart',\n                    exit: 'recStop',\n                    on: {\n                        ASRRESULT: {\n                            actions: ['recLogResult',\n                                assign((_context, event) => { return { recResult: event.value } })],\n                            target: '.match'\n                        },\n                        RECOGNISED: 'idle'\n                    },\n                    states: {\n                        match: {\n                            entry: send('RECOGNISED'),\n                        },\n                    }\n                },\n                speaking: {\n                    entry: 'ttsStart',\n                    on: {\n                        ENDSPEECH: 'idle',\n                    }\n                }\n            }\n        }\n    },\n},\n    {\n        actions: {\n            recLogResult: (context: SDSContext) => {\n                /* context.recResult = event.recResult; */\n                console.log('<< ASR: ' + context.recResult);\n            },\n            test: () => {\n                console.log('test')\n            },\n            logIntent: (context: SDSContext) => {\n                /* context.nluData = event.data */\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\n            }\n        },\n    });\n\n\n\ninterface Props extends React.HTMLAttributes<HTMLElement> {\n    state: State<SDSContext, any, any, any>;\n}\nconst ReactiveButton = (props: Props): JSX.Element => {\n    switch (true) {\n        case props.state.matches({ asrtts: 'recognising' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\n                    Listening...\n                </button>\n            );\n        case props.state.matches({ asrtts: 'speaking' }):\n            return (\n                <button type=\"button\" className=\"glow-on-hover\"\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\n                    Speaking...\n                </button>\n            );\n        default:\n            return (\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\n                    Click to start\n                </button >\n            );\n    }\n}\n\nfunction App() {\n    const { speak, cancel, speaking } = useSpeechSynthesis({\n        onEnd: () => {\n            send('ENDSPEECH');\n        },\n    });\n    const { listen, listening, stop } = useSpeechRecognition({\n        onResult: (result: any) => {\n            send({ type: \"ASRRESULT\", value: result });\n        },\n    });\n    const [current, send, service] = useMachine(machine, {\n        devTools: true,\n        actions: {\n            recStart: asEffect(() => {\n                console.log('Ready to receive a color command.');\n                listen({\n                    interimResults: false,\n                    continuous: true\n                });\n            }),\n            recStop: asEffect(() => {\n                console.log('Recognition stopped.');\n                stop()\n            }),\n            changeColour: asEffect((context) => {\n                console.log('Repainting...');\n                document.body.style.background = context.recResult;\n            }),\n            ttsStart: asEffect((context, effect) => {\n                console.log('Speaking...');\n                speak({ text: context.ttsAgenda })\n            }),\n            ttsCancel: asEffect((context, effect) => {\n                console.log('TTS STOP...');\n                cancel()\n            })\n            /* speak: asEffect((context) => {\n\t     * console.log('Speaking...');\n             *     speak({text: context.ttsAgenda })\n             * } */\n        }\n    });\n\n\n    return (\n        <div className=\"App\">\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\n        </div>\n    )\n};\n\n\n\n\n\n\n\n/* RASA API\n *  */\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n    <App />,\n    rootElement);\n"]},"metadata":{},"sourceType":"module"}