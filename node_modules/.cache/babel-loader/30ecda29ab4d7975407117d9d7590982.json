{"ast":null,"code":"import { send, assign } from \"xstate\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://maraev.me'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Joan\": {\n    person: \"Joan Orange\"\n  },\n  \"Ridley\": {\n    person: \"Ridley Scott\"\n  },\n  \"Steven\": {\n    person: \"Steven Spielberg\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"friday\": {\n    day: \"Friday\"\n  },\n  \"on tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"thursday\": {\n    day: \"Thursday\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"8\": {\n    time: \"10:00\"\n  },\n  \"15\": {\n    time: \"15:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"yep\": true,\n  \"nope\": false,\n  \"no\": false,\n  \"no way\": false,\n  \"never\": false\n};\nconst menuGrammar = {\n  \"appointment\": {\n    activity: \"Appointment\"\n  },\n  \"to do\": {\n    activity: \"TODOitem\"\n  },\n  \"timer\": {\n    activity: \"Timer\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: 'query',\n          actions: assign(context => {\n            return {\n              query: context.recResult\n            };\n          })\n        }\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.query),\n        onDone: {\n          target: 'menu',\n          actions: [assign((context, event) => {\n            return {\n              intentbest: event.data\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    menu: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.intentbest.intent.name === \"timer\",\n          actions: assign(context => {\n            return {\n              activity: context.recResult\n            };\n          }),\n          target: \"Timer\"\n        }, {\n          cond: context => context.intentbest.intent.name == \"todo_item\",\n          actions: assign(context => {\n            return {\n              activity: context.recResult\n            };\n          }),\n          target: \"TODOitem\"\n        }, {\n          cond: context => context.intentbest.intent.name === \"appointment\",\n          actions: assign(context => {\n            return {\n              activity: context.recResult\n            };\n          }),\n          target: \"Appointment\"\n        }, {\n          target: \"welcome\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK, noted!\"\n          }))\n        }\n      }\n    },\n    TODOitem: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the TODOitem app\")\n        }\n      }\n    },\n    Timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Welcome to the Timer app\")\n        }\n      }\n    },\n    Appointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === false,\n          target: \"time\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === true,\n          target: \"confirm_meeting_whole_day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"confirm_time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". What time is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_meeting_whole_day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === b,\n          target: \"init\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] === b,\n          target: \"who\"\n        }, {\n          cond: context => boolGrammar[context.recResult] === a,\n          target: \"confirmed\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't understand\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmed: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Your appointment has been created!\"\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","menuGrammar","activity","dmMachine","initial","states","init","on","CLICK","welcome","RECOGNISED","target","actions","context","query","recResult","prompt","entry","ENDSPEECH","ask","nomatch","invoke","id","src","event","onDone","intentbest","console","log","onError","menu","cond","intent","name","TODOitem","Timer","Appointment","who","duration","confirm_meeting_whole_day","b","a","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Joan\": { person: \"Joan Orange\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"friday\": { day: \"Friday\" },\n    \"on tuesday\": { day: \"Tuesday\" },\n    \"thursday\": { day: \"Thursday\" },\n    \"10\": { time: \"10:00\" },\n    \"9\": { time: \"9:00\" },\n    \"12\": { time: \"12:00\" },\n    \"8\": { time: \"10:00\" },\n    \"15\": { time: \"15:00\" },\n    \"11\": { time: \"11:00\" },\n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\nconst menuGrammar: { [index: string]: { activity?: string} } = {\n    \"appointment\": { activity: \"Appointment\" },\n    \"to do\": { activity: \"TODOitem\" },\n    \"timer\": { activity: \"Timer\" },\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n\n        welcome: {\n             initial: \"prompt\",\n            on: {\n            RECOGNISED: {\n                target: 'query',\n                actions: assign((context) => { return { query: context.recResult } }),\n                    }\n                },\n                states: {\n                    prompt: {\n                        entry: say(\"What would you like to do?\"),\n                        on: { ENDSPEECH: \"ask\" }\n                    },\n                    ask: {\n                        entry: listen()\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry I don't understand.\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n        },\n        query: {\n            invoke: {\n            id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n                    onDone: {\n                        target: 'menu',\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                            (context:SDSContext, event:any) => console.log(event.data)]\n                    },\n            onError: {\n                        target: 'welcome',\n                        actions: (context,event) => console.log(event.data)\n                    }\n                }\n        },\n\tmenu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [{\n                    cond: (context) => context.intentbest.intent.name === \"timer\",\n                    actions: assign((context) => { return { activity: context.recResult } }),\n                    target: \"Timer\"\n\n                },\n\t\t{cond: (context) => context.intentbest.intent.name == \"todo_item\",\n                    actions: assign((context) => { return { activity: context.recResult } }),\n                    target: \"TODOitem\"\n\t\t    },\n\n\t\t{cond: (context) => context.intentbest.intent.name === \"appointment\",\n                    actions: assign((context) => { return { activity: context.recResult } }),\n                    target: \"Appointment\"\n\t\t    },\n                {target: \"welcome\"}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, noted!`\n                    }))\n                }\n            }\n            \n        },\n        TODOitem: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: { entry: say(\"Welcome to the TODOitem app\")\n            }\n           }\n        },\n\t    Timer: {\n\t        initial: \"prompt\",\n\t        on: { ENDSPEECH: \"init\" },\n\t        states: {\n\t    prompt: { entry: say (\"Welcome to the Timer app\")\n\t        }\n\t        }\n\t    },\n        Appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"time\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === true),\n\t\ttarget: \"confirm_meeting_whole_day\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n        }\n\t},\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. What time is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t            }\n          }\n    },\n\tconfirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === b),\n                    target: \"init\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t        }\n         }\n\t},\n \tconfirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === b),\n                    target: \"who\"\n                },\n\t\t{cond: (context) => (boolGrammar[context.recResult] === a),\n\t\ttarget: \"confirmed\"\n\t\t},\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't understand\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t        }\n         },\n    },\n\tconfirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t}\n\t}\n}})\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}