{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\"),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          }))\n        }\n      }\n    }\n  },\n  time: {\n    initial: \"prompt\",\n    on: {\n      ENDSPEECH: \"init\"\n    },\n    states: {\n      prompt: {\n        entry: send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \" on \").concat(content.day, \". Is it going to take whole day?\")\n        }))\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","content"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"at ten\": { time: \"10:00\" },\n}\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"time\"},\n\t\t{ target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`,\n\t\t\ton: { ENDSPEECH: \"ask\" }\n                    }))\n                },\n            }\n        }\n\t},\n\ttime: {\n\t      initial: \"prompt\",\n\t      on: { ENDSPEECH: \"init\" },\n\t      states: {\n\t\tprompt: {\n\t\t    entry: send((context) => ({\n\t\t    \ttype: \"SPEAK\",\n\t\t\tvalue: `OK. ${context.person} on ${content.day}. Is it going to take whole day?`\n\t\t\t}))\n\t\t},\n\t}\n       }\n\n    }\n)"]},"metadata":{},"sourceType":"module"}