{"ast":null,"code":"import _objectSpread from\"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send,assign,actions}from\"xstate\";//import { cancel } from \"xstate/lib/actionTypes\";\nconst cancel=actions.cancel;const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl='https://assignment2nlu.herokuapp.com/model/parse';const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',headers:{'Origin':'http://localhost:3000/react-xstate-colourchanger'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}const grammar={\"John\":{person:\"John Appleseed\"},\"Ridley\":{person:\"Ridley Scott\"},\"Steven\":{person:\"Steven Spielberg\"},\"Wes\":{person:\"Wes Andreson\"},\"Stanley\":{person:\"Stanley Kubrick\"},\"David\":{person:\"David Lynch\"},\"Ingmar\":{person:\"Ingmar Bergman\"},\"Alfred\":{person:\"Alfred Hitchcock \"},\"Tim\":{person:\"Tim Burton\"},\"on Friday\":{day:\"Friday\"},\"on Monday\":{day:\"Monday\"},\"Monday\":{day:\"Monday\"},\"Friday\":{day:\"Friday\"},\"Tuesday\":{day:\"Tuesday\"},\"Thursday\":{day:\"Thursday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"Wednesday\":{day:\"Wednesday\"},\"on Thursday\":{day:\"Thursday\"},\"on Saturday\":{day:\"Saturday\"},\"Saturday\":{day:\"Saturday\"},\"on Sunday\":{day:\"Sunday\"},\"Sunday\":{day:\"Sunday\"},\"6\":{time:\"6:00\"},\"at 6\":{time:\"6:00\"},\"7\":{time:\"7:00\"},\"at 7\":{time:\"7:00\"},\"8\":{time:\"8:00\"},\"at 8\":{time:\"8:00\"},\"9\":{time:\"9:00\"},\"at 9\":{time:\"9:00\"},\"10\":{time:\"10:00\"},\"at 10\":{time:\"10:00\"},\"11\":{time:\"11:00\"},\"at 11\":{time:\"11:00\"},\"12\":{time:\"12:00\"},\"at 12\":{time:\"12:00\"},\"13\":{time:\"1:00 pm\"},\"at 13\":{time:\"1:00 pm\"},\"14\":{time:\"2:00 pm\"},\"at 14\":{time:\"2:00 pm\"},\"15\":{time:\"3:00 pm\"},\"at 15\":{time:\"3:00 pm\"},\"16\":{time:\"4:00 pm\"},\"at 16\":{time:\"4:00 pm\"}};const boolGrammar={\"yes\":true,\"of course\":true,\"yep\":true,\"sure\":true,\"that's right\":true,\"nope\":false,\"no\":false,\"no way\":false,\"never\":false};function promptAndAsk(prompt){return{initial:'prompt',states:{prompt:{entry:prompt,on:{ENDSPEECH:[{target:\"ask\",actions:assign(context=>{return{count:context.count+1};})}]}},ask:{entry:[send('LISTEN'),send('MAXSPEECH',{delay:5000,id:'maxsp'})]}}};}const commands={\"help\":\"H\"};export const dmMachine={initial:'init',states:{init:{on:{CLICK:'ask'}},help:{entry:say(\"It seems that you need some help. Let's try again.\"),always:[{target:'ask.hist',actions:assign(context=>{return{count:context.count-1};})}]},maxspeech1:{entry:say(\"Sorry\"),on:{'ENDSPEECH':'ask.hist'}},ask:{initial:'welcome',on:{RECOGNISED:{target:'help',cond:context=>context.recResult==='help'}},states:{hist:{type:\"history\"},welcome:{entry:assign(context=>{return{count:0};}),id:\"wlcm\",initial:\"prompt\",on:{RECOGNISED:{target:'query',cond:context=>!(context.recResult==='help'),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{query:context.recResult};})]},MAXSPEECH:'#root.dm.maxspeech1'},states:{prompt:_objectSpread(_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"What would you like to do?\"})))),{},{on:{ENDSPEECH:{actions:assign(context=>{return{count:0};})}}})}},query:{invoke:{id:'rasa',src:(context,event)=>nluRequest(context.query),onDone:{target:'menu',cond:context=>!(context.recResult==='help'),actions:[assign((context,event)=>{return{intentbest:event.data};}),(context,event)=>console.log(event.data),cancel('maxsp')]},onError:{target:'#wlcm',cond:context=>!(context.recResult==='help'),actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{cond:context=>context.intentbest.intent.name===\"timer\",target:\"Timer\"},{cond:context=>context.intentbest.intent.name===\"todo_item\",target:\"TODOitem\"},{cond:context=>context.intentbest.intent.name===\"appointment\",target:\"Appointment\"},{target:\".nomatch\",cond:context=>!(context.recResult==='help')}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK, noted!\"}))},nomatch:{entry:say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),on:{ENDSPEECH:\"#wlcm\"}}}},TODOitem:{initial:\"prompt\",on:{ENDSPEECH:\"#root.dm.init\"},states:{prompt:{entry:say(\"Welcome to the To do item app\")}}},Timer:{initial:\"prompt\",on:{ENDSPEECH:\"#root.dm.init\"},states:{prompt:{entry:say(\"Welcome to the Timer app\")}}},Appointment:{initial:\"prompt\",on:{ENDSPEECH:\"#who\"},states:{prompt:{entry:say(\"Let's create an appointment\")}}},who:{id:'who',initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{person:grammar[context.recResult].person};})],target:\"day\"},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Who are you meeting with?\"})))),prompt1:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Who is is that you are meeting?\"})))),prompt2:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Did you want to meet with someone?\"})))),prompt3:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, last chance. Who are you meeting with?\"})))),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{day:grammar[context.recResult].day};})],target:\"duration\"},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, \".concat(context.person,\". What time is your meeting?\")})))),prompt1:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"When do you want to create a meeting with \".concat(context.person,\"?\")})))),prompt2:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"On which day is your appointment with \".concat(context.person,\"?\")})))),prompt3:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, last chance. On which day is your meeting with \".concat(context.person,\"?\")})))),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},duration:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>boolGrammar[context.recResult]===false,target:\"time\",actions:[cancel('maxsp'),assign(context=>{return{count:0};})]},{cond:context=>boolGrammar[context.recResult]===true,target:\"confirm_meeting_whole_day\",actions:[cancel('maxsp'),assign(context=>{return{count:0};})]},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, \".concat(context.person,\" on \").concat(context.day,\",  will it take the whole day?\")})))),prompt1:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Will your meeting take the whole day?\"})))),prompt2:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Do you think your meeting will last the whole day?\"})))),prompt3:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, last chance. Will your meeting with \".concat(context.person,\" on \").concat(context.day,\" take the whole day?\")})))),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{time:grammar[context.recResult].time};})],target:\"confirm_time\"},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"What time is yout meeting?\"})))),prompt1:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"When exactly do you want to create an appointment?\"})))),prompt2:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"When does your meeting start?\"})))),prompt3:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, last chance. What time is your meeting\"})))),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},confirm_meeting_whole_day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>boolGrammar[context.recResult]===false,target:\"#root.dm.init\",actions:cancel('maxsp')},{cond:context=>boolGrammar[context.recResult]===true,target:\"#confirmed\",actions:cancel('maxsp')},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")})))),prompt1:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Are your sure you want to create this meeting?\"})))),prompt2:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Do you want me to create this appointment?\"})))),prompt3:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, last chance. Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")})))),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},confirm_time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>boolGrammar[context.recResult]===false,target:\"who\",actions:cancel('maxsp')},{cond:context=>boolGrammar[context.recResult]===true,target:\"#confirmed\",actions:cancel('maxsp')},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})))),prompt1:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Are your sure you want to create this meeting?\"})))),prompt2:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Do you want me to create this appointment?\"})))),prompt3:_objectSpread({},promptAndAsk(send(context=>({type:\"SPEAK\",value:\"Ok, last chance. Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")})))),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}}}},confirmed:{id:'confirmed',initial:\"prompt\",on:{ENDSPEECH:\"#root.dm.init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Your appointment has been created!\"}))}}}}};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["send","assign","actions","cancel","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","target","context","count","ask","delay","id","commands","dmMachine","init","CLICK","help","always","maxspeech1","RECOGNISED","cond","recResult","hist","welcome","query","MAXSPEECH","invoke","src","event","onDone","intentbest","console","log","onError","menu","intent","name","nomatch","TODOitem","Timer","Appointment","who","prompt1","prompt2","prompt3","maxspeech","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"yLAAA,OAAwBA,IAAxB,CAAsCC,MAAtC,CAA8CC,OAA9C,KAA6D,QAA7D,CAEA;KACQC,CAAAA,M,CAAWD,O,CAAXC,M,CAER,KAAMC,CAAAA,QAAQ,CAAG,sCAAjB,CACA,KAAMC,CAAAA,OAAO,CAAG,kDAAhB,CACA,KAAMC,CAAAA,UAAU,CAAIC,IAAD,EACfC,KAAK,CAAC,GAAIC,CAAAA,OAAJ,CAAYL,QAAQ,CAAGC,OAAvB,CAAgC,CAClCK,MAAM,CAAE,MAD0B,CAElCC,OAAO,CAAE,CAAE,SAAU,kDAAZ,CAFyB,CAEyC;AAC3EC,IAAI,wBAAeL,IAAf,OAH8B,CAAhC,CAAD,CAAL,CAKKM,IALL,CAKUC,IAAI,EAAIA,IAAI,CAACC,IAAL,EALlB,CADJ,CAUA,QAASC,CAAAA,GAAT,CAAaT,IAAb,CAAyD,CACrD,MAAOP,CAAAA,IAAI,CAAEiB,QAAD,GAA2B,CAAEC,IAAI,CAAE,OAAR,CAAiBC,KAAK,CAAEZ,IAAxB,CAA3B,CAAD,CAAX,CACH,CAGD,QAASa,CAAAA,MAAT,EAAgD,CAC5C,MAAOpB,CAAAA,IAAI,CAAC,QAAD,CAAX,CACH,CAED,KAAMqB,CAAAA,OAA8E,CAAG,CACnF,OAAQ,CAAEC,MAAM,CAAE,gBAAV,CAD2E,CAEnF,SAAU,CAAEA,MAAM,CAAE,cAAV,CAFyE,CAGnF,SAAU,CAAEA,MAAM,CAAE,kBAAV,CAHyE,CAInF,MAAO,CAAEA,MAAM,CAAE,cAAV,CAJ4E,CAKnF,UAAW,CAAEA,MAAM,CAAE,iBAAV,CALwE,CAMnF,QAAS,CAAEA,MAAM,CAAE,aAAV,CAN0E,CAOnF,SAAU,CAAEA,MAAM,CAAE,gBAAV,CAPyE,CAQnF,SAAU,CAAEA,MAAM,CAAE,mBAAV,CARyE,CASnF,MAAO,CAAEA,MAAM,CAAE,YAAV,CAT4E,CAWnF,YAAa,CAAEC,GAAG,CAAE,QAAP,CAXsE,CAYnF,YAAa,CAAEA,GAAG,CAAE,QAAP,CAZsE,CAanF,SAAU,CAAEA,GAAG,CAAE,QAAP,CAbyE,CAcnF,SAAU,CAAEA,GAAG,CAAE,QAAP,CAdyE,CAenF,UAAW,CAAEA,GAAG,CAAE,SAAP,CAfwE,CAgBnF,WAAY,CAAEA,GAAG,CAAE,UAAP,CAhBuE,CAiBnF,aAAc,CAAEA,GAAG,CAAE,SAAP,CAjBqE,CAkBnF,eAAgB,CAAEA,GAAG,CAAE,WAAP,CAlBmE,CAmBnF,YAAa,CAAEA,GAAG,CAAE,WAAP,CAnBsE,CAoBnF,cAAe,CAAEA,GAAG,CAAE,UAAP,CApBoE,CAqBnF,cAAe,CAAEA,GAAG,CAAE,UAAP,CArBoE,CAsBnF,WAAY,CAAEA,GAAG,CAAE,UAAP,CAtBuE,CAuBnF,YAAa,CAAEA,GAAG,CAAE,QAAP,CAvBsE,CAwBnF,SAAU,CAAEA,GAAG,CAAE,QAAP,CAxByE,CA0BnF,IAAK,CAAEC,IAAI,CAAE,MAAR,CA1B8E,CA2BnF,OAAQ,CAAEA,IAAI,CAAE,MAAR,CA3B2E,CA4BnF,IAAK,CAAEA,IAAI,CAAE,MAAR,CA5B8E,CA6BnF,OAAQ,CAAEA,IAAI,CAAE,MAAR,CA7B2E,CA8BnF,IAAK,CAAEA,IAAI,CAAE,MAAR,CA9B8E,CA+BnF,OAAQ,CAAEA,IAAI,CAAE,MAAR,CA/B2E,CAgCnF,IAAK,CAAEA,IAAI,CAAE,MAAR,CAhC8E,CAiCnF,OAAQ,CAAEA,IAAI,CAAE,MAAR,CAjC2E,CAkCnF,KAAM,CAAEA,IAAI,CAAE,OAAR,CAlC6E,CAmCnF,QAAS,CAAEA,IAAI,CAAE,OAAR,CAnC0E,CAoCnF,KAAM,CAAEA,IAAI,CAAE,OAAR,CApC6E,CAqCnF,QAAS,CAAEA,IAAI,CAAE,OAAR,CArC0E,CAsCnF,KAAM,CAAEA,IAAI,CAAE,OAAR,CAtC6E,CAuCnF,QAAS,CAAEA,IAAI,CAAE,OAAR,CAvC0E,CAwCnF,KAAM,CAAEA,IAAI,CAAE,SAAR,CAxC6E,CAyCnF,QAAS,CAAEA,IAAI,CAAE,SAAR,CAzC0E,CA0CnF,KAAM,CAAEA,IAAI,CAAE,SAAR,CA1C6E,CA2CnF,QAAS,CAAEA,IAAI,CAAE,SAAR,CA3C0E,CA4CnF,KAAM,CAAEA,IAAI,CAAE,SAAR,CA5C6E,CA6CnF,QAAS,CAAEA,IAAI,CAAE,SAAR,CA7C0E,CA8CnF,KAAM,CAAEA,IAAI,CAAE,SAAR,CA9C6E,CA+CnF,QAAS,CAAEA,IAAI,CAAE,SAAR,CA/C0E,CAAvF,CAmDA,KAAMC,CAAAA,WAAW,CAAG,CACd,MAAO,IADO,CAEd,YAAa,IAFC,CAGd,MAAO,IAHO,CAId,OAAQ,IAJM,CAKd,eAAgB,IALF,CAMd,OAAQ,KANM,CAOd,KAAM,KAPQ,CAQd,SAAU,KARI,CASd,QAAS,KATK,CAApB,CAcA,QAASC,CAAAA,YAAT,CAAsBC,MAAtB,CAAsG,CAClG,MAAQ,CACJC,OAAO,CAAE,QADL,CAEJC,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAEH,MADH,CAEJI,EAAE,CAAE,CAAGC,SAAS,CAAG,CAAC,CAChBC,MAAM,CAAE,KADQ,CAEhB/B,OAAO,CAAED,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAED,OAAO,CAACC,KAAR,CAAgB,CAAxB,CAAP,CAAmC,CAAnD,CAFC,CAAD,CAAf,CAFA,CADJ,CASJC,GAAG,CAAE,CACDN,KAAK,CAAE,CAAC9B,IAAI,CAAC,QAAD,CAAL,CACPA,IAAI,CAAE,WAAF,CAAe,CACbqC,KAAK,CAAE,IADM,CAEfC,EAAE,CAAE,OAFW,CAAf,CADG,CADN,CATD,CAFJ,CAAR,CAmBH,CAID,KAAMC,CAAAA,QAAQ,CAAG,CAAC,OAAQ,GAAT,CAAjB,CAEA,MAAO,MAAMC,CAAAA,SAAmD,CAAI,CAChEZ,OAAO,CAAE,MADuD,CAEhEC,MAAM,CAAE,CACJY,IAAI,CAAE,CACFV,EAAE,CAAE,CACAW,KAAK,CAAE,KADP,CADF,CADF,CAMJC,IAAI,CAAE,CACFb,KAAK,CAAEd,GAAG,CAAC,oDAAD,CADR,CAEF4B,MAAM,CAAC,CAAC,CAACX,MAAM,CAAE,UAAT,CAAqB/B,OAAO,CAAED,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAGD,OAAO,CAACC,KAAR,CAAgB,CAAzB,CAAP,CAAqC,CAArD,CAApC,CAAD,CAFL,CANF,CAUJU,UAAU,CAAE,CACRf,KAAK,CAAEd,GAAG,CAAC,OAAD,CADF,CAERe,EAAE,CAAE,CAAE,YAAa,UAAf,CAFI,CAVR,CAeJK,GAAG,CAAE,CACLR,OAAO,CAAE,SADJ,CAEDG,EAAE,CAAE,CAACe,UAAU,CACP,CAAEb,MAAM,CAAE,MAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACc,SAAR,GAAsB,MADzC,CADJ,CAFH,CAKDnB,MAAM,CAAE,CACJoB,IAAI,CAAE,CAAE/B,IAAI,CAAE,SAAR,CADF,CAEJgC,OAAO,CAAE,CACLpB,KAAK,CAAE7B,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CADR,CAELG,EAAE,CAAE,MAFC,CAGLV,OAAO,CAAE,QAHJ,CAILG,EAAE,CAAE,CAAEe,UAAU,CACR,CAAEb,MAAM,CAAE,OAAV,CACAc,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CADnB,CAEA9C,OAAO,CAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CAAkBF,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CAAxB,CAA8DlC,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAAEiB,KAAK,CAAEjB,OAAO,CAACc,SAAjB,CAAP,CAAqC,CAArD,CAApE,CAFT,CADJ,CAKAI,SAAS,CAAE,qBALX,CAJC,CAWLvB,MAAM,CAAE,CACJF,MAAM,gCACKD,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,6BAF0B,CAAd,CAAD,CAAL,CADjB,MAKFY,EAAE,CAAE,CAAEC,SAAS,CAAE,CAAC9B,OAAO,CAAED,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CAAhB,CAAb,CALF,EADF,CAXH,CAFL,CAyBRgB,KAAK,CAAE,CACHE,MAAM,CAAE,CACJf,EAAE,CAAE,MADA,CAEJgB,GAAG,CAAE,CAACpB,OAAD,CAAUqB,KAAV,GAAoBjD,UAAU,CAAC4B,OAAO,CAACiB,KAAT,CAF/B,CAGJK,MAAM,CAAE,CACJvB,MAAM,CAAE,MADJ,CAEJc,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFf,CAGJ9C,OAAO,CAAE,CAACD,MAAM,CAAC,CAACiC,OAAD,CAAUqB,KAAV,GAAoB,CAAE,MAAO,CAACE,UAAU,CAAEF,KAAK,CAACzC,IAAnB,CAAP,CAAiC,CAAxD,CAAP,CACD,CAACoB,OAAD,CAAqBqB,KAArB,GAAmCG,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACzC,IAAlB,CADlC,CAC2DX,MAAM,CAAC,OAAD,CADjE,CAHL,CAHJ,CASJyD,OAAO,CAAE,CACL3B,MAAM,CAAE,OADH,CAELc,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFd,CAGL9C,OAAO,CAAE,CAACgC,OAAD,CAASqB,KAAT,GAAmBG,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACzC,IAAlB,CAHvB,CATL,CADL,CAzBC,CA0CX+C,IAAI,CAAE,CACCjC,OAAO,CAAE,QADV,CAECG,EAAE,CAAE,CACAC,SAAS,CAAE,CAAC,CACZe,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACuB,UAAR,CAAmBK,MAAnB,CAA0BC,IAA1B,GAAmC,OAD1C,CAEZ9B,MAAM,CAAE,OAFI,CAAD,CAIX,CAACc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACuB,UAAR,CAAmBK,MAAnB,CAA0BC,IAA1B,GAAmC,WAAvD,CACA9B,MAAM,CAAE,UADR,CAJW,CAOX,CAACc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACuB,UAAR,CAAmBK,MAAnB,CAA0BC,IAA1B,GAAmC,aAAvD,CACA9B,MAAM,CAAE,aADR,CAPW,CAUX,CAAEA,MAAM,CAAE,UAAV,CACAc,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CADnB,CAVW,CADX,CAFL,CAgBCnB,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAE9B,IAAI,CAAEkC,OAAD,GAAc,CACtBhB,IAAI,CAAE,OADgB,CAEtBC,KAAK,aAFiB,CAAd,CAAD,CADP,CADJ,CAOJ6C,OAAO,CAAE,CAAClC,KAAK,CAAEd,GAAG,CAAC,sEAAD,CAAX,CACLe,EAAE,CAAE,CAAEC,SAAS,CAAE,OAAb,CADC,CAPL,CAhBT,CA1CK,CAsERiC,QAAQ,CAAE,CACNrC,OAAO,CAAE,QADH,CAENG,EAAE,CAAE,CAAEC,SAAS,CAAE,eAAb,CAFE,CAGNH,MAAM,CAAE,CACJF,MAAM,CAAE,CAAEG,KAAK,CAAEd,GAAG,CAAC,+BAAD,CAAZ,CADJ,CAHF,CAtEF,CA8ERkD,KAAK,CAAE,CACHtC,OAAO,CAAE,QADN,CAEHG,EAAE,CAAE,CAAEC,SAAS,CAAE,eAAb,CAFD,CAGHH,MAAM,CAAE,CACJF,MAAM,CAAE,CAAEG,KAAK,CAAEd,GAAG,CAAE,0BAAF,CAAZ,CADJ,CAHL,CA9EC,CAsFRmD,WAAW,CAAE,CACTvC,OAAO,CAAE,QADA,CAETG,EAAE,CAAE,CAAEC,SAAS,CAAE,MAAb,CAFK,CAGTH,MAAM,CAAE,CACJF,MAAM,CAAE,CAAEG,KAAK,CAAEd,GAAG,CAAC,6BAAD,CAAZ,CADJ,CAHC,CAtFL,CA8FRoD,GAAG,CAAE,CACD9B,EAAE,CAAE,KADH,CAEDV,OAAO,CAAE,QAFR,CAGDG,EAAE,CAAE,CACAe,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGb,OAAD,EAAa,WAAab,OAAO,CAACa,OAAO,CAACc,SAAT,CAAP,EAA8B,EAA3C,CADV,CAET9C,OAAO,CAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CAAkBF,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CAAxB,CAA8DlC,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAAEZ,MAAM,CAAED,OAAO,CAACa,OAAO,CAACc,SAAT,CAAP,CAA2B1B,MAArC,CAAP,CAAsD,CAAtE,CAApE,CAFA,CAGTW,MAAM,CAAE,KAHC,CAAD,CAIR,CAAEA,MAAM,CAAE,YAAV,CACA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CADf,CAEA4C,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFnB,CAJQ,CADZ,CAQAI,SAAS,CAAE,YARX,CAHH,CAaDvB,MAAM,CAAE,CACAF,MAAM,kBAAMD,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CACxChB,IAAI,CAAE,OADkC,CAExCC,KAAK,4BAFmC,CAAd,CAAD,CAAL,CAAlB,CADN,CAKAkD,OAAO,kBACA3C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,kCAF0B,CAAd,CAAD,CAAL,CADZ,CALP,CAUAmD,OAAO,kBACA5C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,qCAF0B,CAAd,CAAD,CAAL,CADZ,CAVP,CAeAoD,OAAO,kBACA7C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,6CAF0B,CAAd,CAAD,CAAL,CADZ,CAfP,CAoBAqD,SAAS,CAAE,CACP1C,KAAK,CAAEd,GAAG,CAAC,OAAD,CADH,CAEPe,EAAE,CAAE,CAAEC,SAAS,CAAG,CAAC,CACfe,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADtB,CAEfF,MAAM,CAAE,QAFO,CAAD,CAGd,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAEAF,MAAM,CAAE,SAFR,CAHc,CAOd,CAAEA,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAPc,CAUd,CAAEF,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAVc,CAad,CAAEF,MAAM,CAAE,eAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAbc,CAAd,CAFG,CApBX,CAbP,CA9FG,CAsJRZ,GAAG,CAAE,CACDK,OAAO,CAAE,QADR,CAEDG,EAAE,CAAC,CACCe,UAAU,CAAE,CAAC,CACTC,IAAI,CAAGb,OAAD,EAAa,QAAUb,OAAO,CAACa,OAAO,CAACc,SAAT,CAAP,EAA8B,EAAxC,CADV,CAET9C,OAAO,CAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CAAkBF,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CAAxB,CAA8DlC,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAAEX,GAAG,CAAEF,OAAO,CAACa,OAAO,CAACc,SAAT,CAAP,CAA2BzB,GAAlC,CAAP,CAAgD,CAAhE,CAApE,CAFA,CAGTU,MAAM,CAAE,UAHC,CAAD,CAKR,CAAEA,MAAM,CAAE,YAAV,CACA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CADf,CAEA4C,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFnB,CALQ,CADb,CASCI,SAAS,CAAE,YATZ,CAFF,CAaDvB,MAAM,CAAE,CACAF,MAAM,kBAAMD,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CACxChB,IAAI,CAAE,OADkC,CAExCC,KAAK,eAASe,OAAO,CAACZ,MAAjB,gCAFmC,CAAd,CAAD,CAAL,CAAlB,CADN,CAKA+C,OAAO,kBACA3C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,qDAA+Ce,OAAO,CAACZ,MAAvD,KAF0B,CAAd,CAAD,CAAL,CADZ,CALP,CAUAgD,OAAO,kBACA5C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,iDAA2Ce,OAAO,CAACZ,MAAnD,KAF0B,CAAd,CAAD,CAAL,CADZ,CAVP,CAeAiD,OAAO,kBACA7C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,8DAAwDe,OAAO,CAACZ,MAAhE,KAF0B,CAAd,CAAD,CAAL,CADZ,CAfP,CAqBAkD,SAAS,CAAE,CACP1C,KAAK,CAAEd,GAAG,CAAC,OAAD,CADH,CAEPe,EAAE,CAAE,CAAEC,SAAS,CAAG,CAAC,CACfe,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADtB,CAEfF,MAAM,CAAE,QAFO,CAAD,CAGd,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAEAF,MAAM,CAAE,SAFR,CAHc,CAOd,CAAEA,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAPc,CAUd,CAAEF,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAVc,CAad,CAAEF,MAAM,CAAE,eAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAbc,CAAd,CAFG,CArBX,CAbP,CAtJG,CA8MRsC,QAAQ,CAAE,CACN7C,OAAO,CAAE,QADH,CAENG,EAAE,CAAE,CACAe,UAAU,CAAE,CAAC,CAACC,IAAI,CAAGb,OAAD,EAAcT,WAAW,CAACS,OAAO,CAACc,SAAT,CAAX,GAAmC,KAAxD,CACTf,MAAM,CAAE,MADC,CAET/B,OAAO,CAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CAAiBF,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CAAvB,CAFA,CAAD,CAIR,CAACY,IAAI,CAAGb,OAAD,EAAcT,WAAW,CAACS,OAAO,CAACc,SAAT,CAAX,GAAmC,IAAxD,CACAf,MAAM,CAAE,2BADR,CAEA/B,OAAO,CAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CAAkBF,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CAAxB,CAFT,CAJQ,CAQR,CAAEF,MAAM,CAAE,YAAV,CACA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CADf,CAEA4C,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFnB,CARQ,CADZ,CAYAI,SAAS,CAAE,YAZX,CAFE,CAgBNvB,MAAM,CAAE,CACJF,MAAM,kBAAMD,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CACxChB,IAAI,CAAE,OADkC,CAExCC,KAAK,eAASe,OAAO,CAACZ,MAAjB,gBAA8BY,OAAO,CAACX,GAAtC,kCAFmC,CAAd,CAAD,CAAL,CAAlB,CADF,CAKJ8C,OAAO,kBACA3C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,wCAF0B,CAAd,CAAD,CAAL,CADZ,CALH,CAUJmD,OAAO,kBACA5C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,qDAF0B,CAAd,CAAD,CAAL,CADZ,CAVH,CAeJoD,OAAO,kBACA7C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,mDAA6Ce,OAAO,CAACZ,MAArD,gBAAkEY,OAAO,CAACX,GAA1E,wBAF0B,CAAd,CAAD,CAAL,CADZ,CAfH,CAoBJiD,SAAS,CAAE,CACP1C,KAAK,CAAEd,GAAG,CAAC,OAAD,CADH,CAEPe,EAAE,CAAE,CAAEC,SAAS,CAAG,CAAC,CACfe,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADtB,CAEfF,MAAM,CAAE,QAFO,CAAD,CAGd,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAEAF,MAAM,CAAE,SAFR,CAHc,CAOd,CAAEA,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAPc,CAUd,CAAEF,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAVc,CAad,CAAEF,MAAM,CAAE,eAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAbc,CAAd,CAFG,CApBP,CAhBF,CA9MF,CAwQXX,IAAI,CAAE,CACCI,OAAO,CAAE,QADV,CAECG,EAAE,CAAE,CAAEe,UAAU,CAAE,CAAC,CACXC,IAAI,CAAGb,OAAD,EAAa,SAAWb,OAAO,CAACa,OAAO,CAACc,SAAT,CAAP,EAA8B,EAAzC,CADR,CAEX9C,OAAO,CAAE,CAACC,MAAM,CAAC,OAAD,CAAP,CAAkBF,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAACC,KAAK,CAAE,CAAR,CAAP,CAAmB,CAAnC,CAAxB,CAA8DlC,MAAM,CAAEiC,OAAD,EAAa,CAAE,MAAO,CAAEV,IAAI,CAAEH,OAAO,CAACa,OAAO,CAACc,SAAT,CAAP,CAA2BxB,IAAnC,CAAP,CAAkD,CAAlE,CAApE,CAFE,CAGXS,MAAM,CAAE,cAHG,CAAD,CAKV,CAAEA,MAAM,CAAE,YAAV,CACA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CADf,CAEA4C,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFnB,CALU,CAAd,CAQAI,SAAS,CAAE,YARX,CAFL,CAYCvB,MAAM,CAAE,CACJF,MAAM,kBAAMD,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CACxChB,IAAI,CAAE,OADkC,CAExCC,KAAK,6BAFmC,CAAd,CAAD,CAAL,CAAlB,CADF,CAKJkD,OAAO,kBACA3C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,qDAF0B,CAAd,CAAD,CAAL,CADZ,CALH,CAUJmD,OAAO,kBACA5C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,gCAF0B,CAAd,CAAD,CAAL,CADZ,CAVH,CAeJoD,OAAO,kBACA7C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,6CAF0B,CAAd,CAAD,CAAL,CADZ,CAfH,CAqBJqD,SAAS,CAAE,CACP1C,KAAK,CAAEd,GAAG,CAAC,OAAD,CADH,CAEPe,EAAE,CAAE,CAAEC,SAAS,CAAG,CAAC,CACfe,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADtB,CAEfF,MAAM,CAAE,QAFO,CAAD,CAGd,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAEAF,MAAM,CAAE,SAFR,CAHc,CAOd,CAAEA,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAPc,CAUd,CAAEF,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAVc,CAad,CAAEF,MAAM,CAAE,eAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAbc,CAAd,CAFG,CArBP,CAZT,CAxQK,CA+TXuC,yBAAyB,CAAE,CACpB9C,OAAO,CAAE,QADW,CAEpBG,EAAE,CAAE,CACAe,UAAU,CAAE,CAAC,CAACC,IAAI,CAAGb,OAAD,EAAcT,WAAW,CAACS,OAAO,CAACc,SAAT,CAAX,GAAmC,KAAxD,CACTf,MAAM,CAAE,eADC,CAET/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CAFN,CAAD,CAIR,CAAC4C,IAAI,CAAGb,OAAD,EAAcT,WAAW,CAACS,OAAO,CAACc,SAAT,CAAX,GAAmC,IAAxD,CACAf,MAAM,CAAE,YADR,CAEA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CAFf,CAJQ,CAQR,CAAE8B,MAAM,CAAE,YAAV,CACA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CADf,CAEA4C,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFnB,CARQ,CADZ,CAYAI,SAAS,CAAE,YAZX,CAFgB,CAgBpBvB,MAAM,CAAE,CACJF,MAAM,kBAAMD,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CACxChB,IAAI,CAAE,OADkC,CAExCC,KAAK,qDAA+Ce,OAAO,CAACZ,MAAvD,gBAAoEY,OAAO,CAACX,GAA5E,uBAFmC,CAAd,CAAD,CAAL,CAAlB,CADF,CAKJ8C,OAAO,kBACA3C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,iDAF0B,CAAd,CAAD,CAAL,CADZ,CALH,CAUJmD,OAAO,kBACA5C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,6CAF0B,CAAd,CAAD,CAAL,CADZ,CAVH,CAeJoD,OAAO,kBACA7C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,sEAAgEe,OAAO,CAACZ,MAAxE,gBAAqFY,OAAO,CAACX,GAA7F,uBAF0B,CAAd,CAAD,CAAL,CADZ,CAfH,CAoBJiD,SAAS,CAAE,CACP1C,KAAK,CAAEd,GAAG,CAAC,OAAD,CADH,CAEPe,EAAE,CAAE,CAAEC,SAAS,CAAG,CAAC,CACfe,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADtB,CAEfF,MAAM,CAAE,QAFO,CAAD,CAGd,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAEAF,MAAM,CAAE,SAFR,CAHc,CAOd,CAAEA,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAPc,CAUd,CAAEF,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAVc,CAad,CAAEF,MAAM,CAAE,eAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAbc,CAAd,CAFG,CApBP,CAhBY,CA/ThB,CAwXVwC,YAAY,CAAE,CACR/C,OAAO,CAAE,QADD,CAERG,EAAE,CAAG,CACDe,UAAU,CAAE,CAAC,CAACC,IAAI,CAAGb,OAAD,EAAcT,WAAW,CAACS,OAAO,CAACc,SAAT,CAAX,GAAmC,KAAxD,CACTf,MAAM,CAAE,KADC,CAET/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CAFN,CAAD,CAIR,CAAC4C,IAAI,CAAGb,OAAD,EAAcT,WAAW,CAACS,OAAO,CAACc,SAAT,CAAX,GAAmC,IAAxD,CACAf,MAAM,CAAE,YADR,CAEA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CAFf,CAJQ,CAQR,CAAE8B,MAAM,CAAE,YAAV,CACA/B,OAAO,CAAEC,MAAM,CAAC,OAAD,CADf,CAEA4C,IAAI,CAAGb,OAAD,EAAa,EAAEA,OAAO,CAACc,SAAR,GAAsB,MAAxB,CAFnB,CARQ,CADX,CAYDI,SAAS,CAAE,YAZV,CAFG,CAgBRvB,MAAM,CAAE,CACJF,MAAM,kBAAMD,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CACxChB,IAAI,CAAE,OADkC,CAExCC,KAAK,qDAA+Ce,OAAO,CAACZ,MAAvD,gBAAoEY,OAAO,CAACX,GAA5E,gBAAsFW,OAAO,CAACV,IAA9F,KAFmC,CAAd,CAAD,CAAL,CAAlB,CADF,CAKJ6C,OAAO,kBACA3C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,iDAF0B,CAAd,CAAD,CAAL,CADZ,CALH,CAUJmD,OAAO,kBACA5C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,6CAF0B,CAAd,CAAD,CAAL,CADZ,CAVH,CAeJoD,OAAO,kBACA7C,YAAY,CAAC1B,IAAI,CAAEkC,OAAD,GAAc,CAC/BhB,IAAI,CAAE,OADyB,CAE/BC,KAAK,sEAAgEe,OAAO,CAACZ,MAAxE,gBAAqFY,OAAO,CAACX,GAA7F,gBAAuGW,OAAO,CAACV,IAA/G,KAF0B,CAAd,CAAD,CAAL,CADZ,CAfH,CAoBJgD,SAAS,CAAE,CACP1C,KAAK,CAAEd,GAAG,CAAC,OAAD,CADH,CAEPe,EAAE,CAAE,CAAEC,SAAS,CAAG,CAAC,CACfe,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADtB,CAEfF,MAAM,CAAE,QAFO,CAAD,CAGd,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAEAF,MAAM,CAAE,SAFR,CAHc,CAOd,CAAEA,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAPc,CAUd,CAAEF,MAAM,CAAE,SAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAVc,CAad,CAAEF,MAAM,CAAE,eAAV,CACAc,IAAI,CAAGb,OAAD,EAAaA,OAAO,CAACC,KAAR,GAAkB,CADrC,CAbc,CAAd,CAFG,CApBP,CAhBA,CAxXJ,CALP,CAfD,CAucAyC,SAAS,CAAE,CACPtC,EAAE,CAAE,WADG,CAEPV,OAAO,CAAE,QAFF,CAGPG,EAAE,CAAE,CAAEC,SAAS,CAAE,eAAb,CAHG,CAIPH,MAAM,CAAE,CACJF,MAAM,CAAE,CACJG,KAAK,CAAE9B,IAAI,CAAEkC,OAAD,GAAc,CACtBhB,IAAI,CAAE,OADgB,CAEtBC,KAAK,qCAFiB,CAAd,CAAD,CADP,CADJ,CAJD,CAvcX,CAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\nimport { mapContext } from \"xstate/lib/utils\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst { cancel } = actions;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: prompt,\n                on: {  ENDSPEECH:  [{\n                    target: \"ask\",\n                    actions: assign((context) => { return {count: context.count + 1 }})\n                    },\n                    ]}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\n\nconst commands = {\"help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        }, \n        help: {\n            entry: say(\"It seems that you need some help. Let's try again.\"),\n            always:[{target: 'ask.hist', actions: assign((context) => { return {count: (context.count - 1) }}) }] },\n\n        maxspeech1: {\n            entry: say(\"Sorry\"),\n            on: { 'ENDSPEECH': 'ask.hist' },  \n\n        },\n        ask: {\n        initial: 'welcome',\n            on: {RECOGNISED: \n                    { target: 'help', \n                    cond: (context) => context.recResult === 'help' },},\n            states: {\n                hist: { type: \"history\" },\n                welcome: {\n                    entry: assign((context) => { return {count: 0 }}),\n                    id: \"wlcm\",\n                    initial: \"prompt\",\n                    on: { RECOGNISED: \n                            { target: 'query',\n                            cond: (context) => !(context.recResult === 'help'),\n                            actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { query: context.recResult } })],\n                            },\n                        MAXSPEECH: '#root.dm.maxspeech1'\n                    },\n                    states: {\n                        prompt: {\n                                ...promptAndAsk(send((context) => ({\n                                    type: \"SPEAK\",\n                                    value: `What would you like to do?`})))\n                            ,\n                            on: { ENDSPEECH: {actions: assign((context) => { return {count: 0 }})} }\n                        },\n                        \n                          \n                        }\n            },\n            query: {\n                invoke: {\n                    id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n                    onDone: {\n                        target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data), cancel('maxsp')]\n                    },\n                    onError: {\n                        target: '#wlcm',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                         }\n                    }\n            },\n\t        menu: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [{\n                    cond: (context) => context.intentbest.intent.name === \"timer\",\n                    target: \"Timer\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                    target: \"TODOitem\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                    target: \"Appointment\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help')}]\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK, noted!`\n                        }))\n                    },\n                    nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                        on: { ENDSPEECH: \"#wlcm\" }\n                        },\n                    }\n            },\n            TODOitem: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say(\"Welcome to the To do item app\")\n                    }\n                }\n            },\n            Timer: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say (\"Welcome to the Timer app\")\n                    }\n                }\n            },\n            Appointment: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#who\" },\n                states: {\n                    prompt: { entry: say(\"Let's create an appointment\") \n                    }\n                }\n            },\n            who: {\n                id: 'who',\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { person: grammar[context.recResult].person } })],\n                        target: \"day\"},\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                        },\n                states: {\n                        prompt: {...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Who are you meeting with?`})))\n                        },\n                        prompt1: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Who is is that you are meeting?`})))\n                        },\n                        prompt2: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Did you want to meet with someone?`})))\n                        },\n                        prompt3: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Ok, last chance. Who are you meeting with?`})))\n                        },\n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                        \n                    }\n            },\n            day: {\n                initial: \"prompt\",\n                on:{ \n                    RECOGNISED: [{\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { day: grammar[context.recResult].day } })],\n                        target: \"duration\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                        prompt: {...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, ${context.person}. What time is your meeting?`})))\n                        },\n                        prompt1: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `When do you want to create a meeting with ${context.person}?`})))\n                        },\n                        prompt2: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `On which day is your appointment with ${context.person}?`})))\n                        },\n                        prompt3: {\n                            ...promptAndAsk(send((context) => ({\n                                type: \"SPEAK\",\n                                value: `Ok, last chance. On which day is your meeting with ${context.person}?`})))\n                        },\n                    \n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                    }\n            },\n            duration: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"time\",\n                        actions: [cancel('maxsp'),assign((context) => { return {count: 0 }}),]\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"confirm_meeting_whole_day\",\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}),]\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Ok, ${context.person} on ${context.day},  will it take the whole day?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Will your meeting take the whole day?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Do you think your meeting will last the whole day?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. Will your meeting with ${context.person} on ${context.day} take the whole day?`})))\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                }\n            },\n\t        time: {\n                initial: \"prompt\",\n                on: { RECOGNISED: [{\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { time: grammar[context.recResult].time } })],\n                        target: \"confirm_time\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `What time is yout meeting?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `When exactly do you want to create an appointment?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `When does your meeting start?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. What time is your meeting`})))\n                        \n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                }\n            },\n\t        confirm_meeting_whole_day: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"#root.dm.init\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Are your sure you want to create this meeting?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Do you want me to create this appointment?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`})))\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},   \n                        ]}\n                    },\n                }\n            },\n \t        confirm_time: {\n                initial: \"prompt\",\n                on:  {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"who\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})))\n                    },\n                    prompt1: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Are your sure you want to create this meeting?`})))\n                    },\n                    prompt2: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Do you want me to create this appointment?`})))\n                    },\n                    prompt3: {\n                        ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Ok, last chance. Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})))\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},  \n                                ]}\n                            },\n                        },\n                    },\n                }\n            },\n            confirmed: {\n                id: 'confirmed',\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Your appointment has been created!`\n                        }))\n                    },\n                }\n            }\n        } \n    })\n\n\n\n\n\n "]},"metadata":{},"sourceType":"module"}