{"ast":null,"code":"import _objectSpread from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { assign, actions } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt, nomatch) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: prompt,\n        on: {\n          ENDSPEECH: [{\n            target: \"ask\",\n            actions: assign(context => {\n              return {\n                count: context.count + 1\n              };\n            })\n          }]\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: \"prompt\"\n        }\n      }\n    }\n  };\n}\n\nconst grammar = {\n  //people\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Julia\": {\n    person: \"Julia Harvees\"\n  },\n  \"Victoria\": {\n    person: \"Victoria Bloom\"\n  },\n  //days\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  //time\n  \"at 5\": {\n    time: \"5:00\"\n  },\n  \"5\": {\n    time: \"5:00\"\n  },\n  \"at 5 p.m.\": {\n    time: \"5:00 p.m.\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6 p.m.\": {\n    time: \"6:00 p.m.\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7 p.m.\": {\n    time: \"7:00 p.m.\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 13\": {\n    time: \"1:00 p.m.\"\n  },\n  \"at 14\": {\n    time: \"2:00 p.m.\"\n  },\n  \"at 15\": {\n    time: \"3:00 p.m.\"\n  },\n  \"at 16\": {\n    time: \"4:00 p.m.\"\n  }\n};\nconst booleanGrammar = {\n  \"yes\": {\n    bool: true\n  },\n  \"yep\": {\n    bool: true\n  },\n  \"of course\": {\n    bool: true\n  },\n  \"sure\": {\n    bool: true\n  },\n  \"I want to\": {\n    bool: true\n  },\n  \"no\": {\n    bool: false\n  },\n  \"no way\": {\n    bool: false\n  },\n  \"hell no\": {\n    bool: false\n  },\n  \"nope\": {\n    bool: false\n  }\n};\nconst commands = {\n  \"help\": \"H\"\n};\nexport const dmMachine = {\n  initial: 'welcome',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"appointment\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    appointment: {\n      initial: \"who\",\n      on: {\n        MAXSPEECH: [{\n          cond: context => context.count === 4,\n          target: 'final'\n        }, {\n          cond: context => context.count === 1,\n          target: 'maxspeech1'\n        }, {\n          cond: context => context.count === 2,\n          target: 'maxspeech'\n        }, {\n          cond: context => context.count === 3,\n          target: 'maxspeech'\n        }]\n      },\n      states: {\n        hist: {\n          type: 'history'\n        },\n        who: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              }), assign(context => {\n                return {\n                  count: 0\n                };\n              }), cancel('maxsp')],\n              target: \"day\"\n            }, {\n              cond: context => context.recResult in commands,\n              // actions: cancel('maxsp'),\n              target: \"#help\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(say(\"Who are you meeting with?\"), \"Sorry, I don't know them\")),\n        day: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              }), assign(context => {\n                return {\n                  count: 0\n                };\n              }), cancel('maxsp')],\n              target: \"wholeday\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n        })), \"Sorry, I do not understand\")),\n        wholeday: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => booleanGrammar[context.recResult].bool === true,\n              actions: [assign(context => {\n                return {\n                  count: 0\n                };\n              }), cancel('maxsp')],\n              //cancel('maxsp'),\n              target: \"whole_day_confirmation\"\n            }, {\n              cond: context => booleanGrammar[context.recResult].bool === false,\n              actions: [assign(context => {\n                return {\n                  count: 0\n                };\n              }), cancel('maxsp')],\n              // actions: cancel('maxsp'),\n              target: \"time\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n        })), \"Sorry, I do not understand\")),\n        time: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              }),, assign(context => {\n                return {\n                  count: 0\n                };\n              }), cancel('maxsp')],\n              //  cancel('maxsp'),],\n              target: \"time_confirmation\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. What time is your meeting?\"\n        })), \"Sorry, I do not understand\")),\n        whole_day_confirmation: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => booleanGrammar[context.recResult].bool === true,\n              actions: assign(context => {\n                return {\n                  count: 0\n                };\n              }),\n              // actions: cancel('maxsp'),\n              target: \"confirmed\"\n            }, {\n              cond: context => booleanGrammar[context.recResult].bool === false,\n              actions: [assign(context => {\n                return {\n                  count: 0\n                };\n              }), cancel('maxsp')],\n              // actions: cancel('maxsp'),\n              target: \"who\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n        })), \"Sorry, I do not understand\")),\n        time_confirmation: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => booleanGrammar[context.recResult].bool === true,\n              actions: [assign(context => {\n                return {\n                  count: 0\n                };\n              }),, cancel('maxsp')],\n              // actions: cancel('maxsp'),\n              target: \"confirmed\"\n            }, {\n              cond: context => booleanGrammar[context.recResult].bool === false,\n              actions: [assign(context => {\n                return {\n                  count: 0\n                };\n              }), cancel('maxsp')],\n              // actions: cancel('maxsp'),\n              target: \"wholeday\"\n            }, {\n              cond: context => context.recResult in commands,\n              target: \"#help\"\n            }, {\n              cond: context => !(context.recResult in commands),\n              // actions: cancel('maxsp'),\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(send(context => ({\n          type: \"SPEAK\",\n          value: \"OK. Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n        })), \"Sorry, I do not understand\")),\n        confirmed: {\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created.\"\n              }))\n            }\n          }\n        }\n      }\n    },\n    help: {\n      id: 'help',\n      entry: say(\"We can go back if you need help\"),\n      always: [{\n        target: 'appointment.hist',\n        actions: assign(context => {\n          return {\n            count: context.count - 1\n          };\n        })\n      }]\n    },\n    maxspeech: {\n      entry: say(\"I cannot hear you\"),\n      on: {\n        'ENDSPEECH': 'appointment.hist'\n      }\n    },\n    maxspeech1: {\n      entry: say(\"Please answer\"),\n      on: {\n        'ENDSPEECH': 'appointment.hist'\n      }\n    },\n    maxspeech2: {\n      entry: say(\"Don't be shy. Answer me.\"),\n      on: {\n        'ENDSPEECH': 'appointment.hist'\n      }\n    },\n    final: {\n      entry: say(\"Let me know if you change your mind about talking to me\"),\n      on: {\n        'ENDSPEECH': 'init'\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/4567.ts"],"names":["assign","actions","send","cancel","say","text","_context","type","value","listen","promptAndAsk","prompt","nomatch","initial","states","entry","on","ENDSPEECH","target","context","count","ask","delay","id","grammar","person","day","time","booleanGrammar","bool","commands","dmMachine","init","CLICK","welcome","appointment","MAXSPEECH","cond","hist","who","RECOGNISED","recResult","wholeday","whole_day_confirmation","time_confirmation","confirmed","help","always","maxspeech","maxspeech1","maxspeech2","final"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\";\nconst { send, cancel } = actions;\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nfunction promptAndAsk(prompt: Action<SDSContext, SDSEvent>, nomatch: string) : MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states:{\n            prompt: {\n                entry: prompt,\n                on: {ENDSPEECH:[{\n                    target: \"ask\",\n                actions: assign((context) => {return {count: (context.count +1)}})},]}\n    },\n            ask: {\n                entry: [send('LISTEN'), send('MAXSPEECH', {delay: 5000, id: 'maxsp'})],\n            },\n            nomatch: {\n                entry: say(nomatch),\n                on: { ENDSPEECH: \"prompt\" }\n            },\n        }\n    })\n}\n\n\n\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    //people\n    \"John\": { person: \"John Appleseed\" },\n    \"Julia\": { person: \"Julia Harvees\" },\n    \"Victoria\": {person: \"Victoria Bloom\"},\n\n    //days\n    \"on Monday\": { day: \"Monday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Monday\": { day: \"Monday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"Friday\": { day: \"Friday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    //time\n    \"at 5\": { time: \"5:00\"},\n    \"5\": { time: \"5:00\"},\n    \"at 5 p.m.\": {time: \"5:00 p.m.\"},\n    \"at 6\": { time: \"6:00\"},\n    \"6\": { time: \"6:00\"},\n    \"at 6 p.m.\": { time: \"6:00 p.m.\"},\n    \"at 7\": { time: \"7:00\"},\n    \"7\": { time: \"7:00\"},\n    \"at 7 p.m.\": { time: \"7:00 p.m.\"},\n    \"at 8\": { time: \"8:00\"},\n    \"8\": { time: \"8:00\"},\n    \"at 10\": { time: \"10:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 11\": {time: \"11:00\"},\n    \"11\": {time: \"11:00\"},\n    \"at 12\": { time: \"12:00\"},\n    \"12\": { time: \"12:00\"},\n    \"at 13\": { time: \"1:00 p.m.\"},\n    \"at 14\": { time: \"2:00 p.m.\"},\n    \"at 15\": { time: \"3:00 p.m.\"},\n    \"at 16\": { time: \"4:00 p.m.\"},\n\n}\n\nconst booleanGrammar: { [index: string]: {bool?: boolean}} = {\n    \"yes\": { bool: true },\n    \"yep\": { bool: true },\n    \"of course\": { bool: true },\n    \"sure\": { bool: true },\n    \"I want to\": { bool: true },\n    \"no\": { bool: false },\n    \"no way\": { bool: false },\n    \"hell no\": { bool: false },\n    \"nope\": { bool: false },\n}\n\nconst commands = {\"help\":\"H\"};\n\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'welcome',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: { \n            initial: \"prompt\",\n            on: { ENDSPEECH: \"appointment\" },\n            states: { \n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        appointment: {\n            initial: \"who\",\n            on: {\n                MAXSPEECH: [ \n                {cond: (context) => context.count === 4,\n                target: 'final'},\n                {cond: (context) => context.count === 1,\n                    target: 'maxspeech1'},\n                {cond: (context) => context.count === 2,\n                    target: 'maxspeech'},\n                {cond: (context) => context.count === 3,\n                target: 'maxspeech'}\n                ]\n            },\n            states:{\n                hist: {type : 'history'},\n                who: \n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"person\" in (grammar[context.recResult] || {}), \n                            actions: [assign((context) => { return { person: grammar[context.recResult].person } }),\n                            assign((context) => { return { count: 0 } }),\n                                    cancel('maxsp'), ],\n                            target: \"day\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \"#help\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                    },\n                    ...promptAndAsk(say(\"Who are you meeting with?\"),\n                     \"Sorry, I don't know them\")\n                },\n                day:\n                {\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"day\" in (grammar[context.recResult] || {}), \n                            actions: [assign((context) => { return { day: grammar[context.recResult].day } }),\n                            assign((context) => { return { count: 0 } }),\n                            cancel('maxsp'), ],\n                            target: \"wholeday\"\n        \n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \"#help\"\n                        },\n                        {   \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK. ${context.person}. On which day is your meeting?`})), \n                        \"Sorry, I do not understand\")\n                },\n                wholeday: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [\n                            {cond: (context) => (booleanGrammar[context.recResult].bool === true),\n                            actions: [assign((context) => { return { count: 0 } }),\n                            \n                                    cancel('maxsp'), ],//cancel('maxsp'),\n                            target:\"whole_day_confirmation\"}, \n                            {\n                            cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                            actions: [assign((context) => { return { count: 0 } }),\n                            cancel('maxsp'), ],\n                            // actions: cancel('maxsp'),\n                            target: \"time\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \"#help\"\n                        },\n                        {   cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`})),\n                    \"Sorry, I do not understand\"),\n                },\n                time: {\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                            actions: [assign((context) => { return { time: grammar[context.recResult].time } }),\n                            ,assign((context) => { return { count: 0 } }),\n                            cancel('maxsp'), ],     //  cancel('maxsp'),],\n                            target: \"time_confirmation\"\n        \n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \"#help\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({\n                    type: \"SPEAK\",\n                    value: `OK. What time is your meeting?`})), \n                        \"Sorry, I do not understand\"),\n                },\n                whole_day_confirmation:{\n                    initial: \"prompt\",\n                    on: {\n                        RECOGNISED: [{\n                            cond: (context) => (booleanGrammar[context.recResult].bool === true),\n                            actions: assign((context) => { return { count: 0 } }),\n                            // actions: cancel('maxsp'),\n                            target: \"confirmed\"\n        \n                        }, {\n                            cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                            actions: [assign((context) => { return { count: 0 } }),\n                            \n                                    cancel('maxsp'), ],\n                            // actions: cancel('maxsp'),\n                            target: \"who\"\n                        },\n                        {\n                            cond: (context) => (context.recResult in commands),\n                            target: \"#help\"\n                        },\n                        { \n                            cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                            target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`})),\n                \"Sorry, I do not understand\")\n                },\n                time_confirmation: {\n                    initial: \"prompt\",\n                    on:  {\n                        RECOGNISED: [\n                            {cond: (context) => (booleanGrammar[context.recResult].bool === true),\n                            actions: [assign((context) => { return { count: 0 } }),,\n                            cancel('maxsp'), ],\n                            // actions: cancel('maxsp'),\n                            target: \"confirmed\"},\n                            {cond: (context) => (booleanGrammar[context.recResult].bool === false),\n                            actions: [assign((context) => { return { count: 0 } }),\n                        \n                                    cancel('maxsp'), ],\n                            // actions: cancel('maxsp'),\n                            target: \"wholeday\"},\n                        {cond: (context) => (context.recResult in commands),\n                        target: \"#help\"},\n\n                        {cond: (context) => !(context.recResult in commands),\n                            // actions: cancel('maxsp'),\n                        target: \".nomatch\" }]\n                        \n                        },\n                    ...promptAndAsk(send((context) => ({ \n                    type: \"SPEAK\",\n                    value: `OK. Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time}?`})),\n                \"Sorry, I do not understand\"),\n                },\n                confirmed:\n                {\n                    states: {\n                        prompt: {\n                            entry: send((context) => ({ \n                                type: \"SPEAK\",\n                                value: `Your appointment has been created.`\n                            })),\n                        }\n                    }\n                }\n            }\n        },\n        help: {\n            id: 'help',\n            entry: say(\"We can go back if you need help\"),\n            always: [{target: 'appointment.hist',\n                      actions: assign((context) => {return {count: (context.count -1)}}) }]\n        },\n        maxspeech : {\n            entry: say(\"I cannot hear you\"),\n            on: {'ENDSPEECH': 'appointment.hist'}\n        },\n        maxspeech1 : {\n            entry: say(\"Please answer\"),\n            on: {'ENDSPEECH': 'appointment.hist'}\n        },\n        maxspeech2 : {\n            entry: say(\"Don't be shy. Answer me.\"),\n            on: {'ENDSPEECH': 'appointment.hist'}\n        },\n        final: {\n            entry: say(\"Let me know if you change your mind about talking to me\"),\n            on: {'ENDSPEECH': 'init'}\n        },  \n    }\n})"]},"metadata":{},"sourceType":"module"}