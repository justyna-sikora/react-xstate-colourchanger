{"ast":null,"code":"import _objectSpread from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, actions } from \"xstate\";\nconst cancel = actions.cancel; // SRGS parser and example (logs the results to console on page load)\n//import { loadGrammar } from './runparser'\n//import { parse } from './chartparser'\n//import { grammar } from './grammars/pizzaGrammar1'\n//import { cancel } from \"xstate/lib/actionTypes\";\n//const gram = loadGrammar(grammar)\n//const input = \"do be do be do\"\n//const prs = parse(input.split(/\\s+/), gram)\n//const result = prs.resultsForRule(gram.$root)[0]\n//console.log(result)\n\nconst sayColour = send(context => ({\n  type: \"SPEAK\",\n  value: \"Repainting to \".concat(context.recResult)\n}));\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"H\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'askColourAndShape'\n      }\n    },\n    askColourAndShape: {\n      initial: 'colour',\n      on: {\n        RECOGNISED: {\n          target: 'stop',\n          actions: cancel('maxsp'),\n          cond: context => context.recResult === 'stop'\n        },\n        MAXSPEECH: 'maxspeech'\n      },\n      states: {\n        hist: {\n          type: history\n        },\n        colour: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              target: 'shape',\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'stop')\n            }]\n          }\n        }, promptAndAsk(\"Tell me the colour\")),\n        shape: _objectSpread({\n          on: {\n            RECOGNISED: [{\n              target: '#root.dm.repaint',\n              actions: cancel('maxsp'),\n              cond: context => !(context.recResult === 'stop')\n            }]\n          }\n        }, promptAndAsk(\"Tell me the shape\"))\n      }\n    },\n    maxspeech: {\n      entry: say(\"Oho what\"),\n      on: {\n        'ENDSPEECH': 'askColourAndShape.hist'\n      }\n    },\n    stop: {\n      entry: say(\"Ok\"),\n      always: 'init'\n    },\n    repaint: {\n      initial: 'prompt',\n      states: {\n        prompt: {\n          entry: sayColour,\n          on: {\n            ENDSPEECH: 'repaint'\n          }\n        },\n        repaint: {\n          entry: 'changeColour',\n          always: '#root.dm.askColourAndShape'\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmColourChanger1.ts"],"names":["send","actions","cancel","sayColour","context","type","value","recResult","say","text","_context","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","commands","dmMachine","init","CLICK","askColourAndShape","RECOGNISED","target","cond","MAXSPEECH","hist","history","colour","shape","maxspeech","stop","always","repaint"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, actions } from \"xstate\";\r\nconst { cancel } = actions;\r\n\r\n// SRGS parser and example (logs the results to console on page load)\r\n//import { loadGrammar } from './runparser'\r\n//import { parse } from './chartparser'\r\n//import { grammar } from './grammars/pizzaGrammar1'\r\n//import { cancel } from \"xstate/lib/actionTypes\";\r\n\r\n//const gram = loadGrammar(grammar)\r\n//const input = \"do be do be do\"\r\n//const prs = parse(input.split(/\\s+/), gram)\r\n//const result = prs.resultsForRule(gram.$root)[0]\r\n\r\n//console.log(result)\r\n\r\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\r\n}))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: [send('LISTEN'), \r\n                send ('MAXSPEECH', {\r\n                      delay: 5000  ,\r\n                    id: 'maxsp'})],\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\nconst commands = {\"stop\": \"S\", \"help\": \"H\"}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'askColourAndShape'\r\n            }\r\n        },\r\n        askColourAndShape: {\r\n            initial: 'colour',\r\n            on: {RECOGNISED: \r\n                    { target: 'stop', \r\n                    actions: cancel('maxsp'),\r\n                    cond: (context) => context.recResult === 'stop'\r\n                },\r\n                MAXSPEECH: 'maxspeech'\r\n            },\r\n            states: {\r\n                hist: { type: history },\r\n                colour: {\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {target: 'shape',\r\n                            actions: cancel('maxsp'),\r\n                            cond: (context) => !(context.recResult === 'stop')}]\r\n                    },\r\n                         \r\n                    ...promptAndAsk(\"Tell me the colour\")\r\n                },\r\n                shape: {\r\n                    on: {\r\n                        RECOGNISED: [\r\n                            {target: '#root.dm.repaint',\r\n                            actions: cancel('maxsp'),\r\n                            cond: (context) => !(context.recResult === 'stop')}]\r\n                    },\r\n                    ...promptAndAsk(\"Tell me the shape\")\r\n                }}\r\n            },\r\n\r\n        maxspeech: {\r\n            entry: say(\"Oho what\"),\r\n            on: { 'ENDSPEECH': 'askColourAndShape.hist' }\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok\"),\r\n            always: 'init'\r\n        },\r\n        repaint: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: sayColour,\r\n                    on: { ENDSPEECH: 'repaint' }\r\n                },\r\n                repaint: {\r\n                    entry: 'changeColour',\r\n                    always: '#root.dm.askColourAndShape'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})"]},"metadata":{},"sourceType":"module"}