{"ast":null,"code":"import _objectSpread from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign, actions } from \"xstate\"; //import { cancel } from \"xstate/lib/actionTypes\";\n\nconst cancel = actions.cancel;\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Ridley\": {\n    person: \"Ridley Scott\"\n  },\n  \"Steven\": {\n    person: \"Steven Spielberg\"\n  },\n  \"Wes\": {\n    person: \"Wes Andreson\"\n  },\n  \"Stanley\": {\n    person: \"Stanley Kubrick\"\n  },\n  \"David\": {\n    person: \"David Lynch\"\n  },\n  \"Ingmar\": {\n    person: \"Ingmar Bergman\"\n  },\n  \"Alfred\": {\n    person: \"Alfred Hitchcock \"\n  },\n  \"Tim\": {\n    person: \"Tim Burton\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"1:00 pm\"\n  },\n  \"at 13\": {\n    time: \"1:00 pm\"\n  },\n  \"14\": {\n    time: \"2:00 pm\"\n  },\n  \"at 14\": {\n    time: \"2:00 pm\"\n  },\n  \"15\": {\n    time: \"3:00 pm\"\n  },\n  \"at 15\": {\n    time: \"3:00 pm\"\n  },\n  \"16\": {\n    time: \"4:00 pm\"\n  },\n  \"at 16\": {\n    time: \"4:00 pm\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"yep\": true,\n  \"sure\": true,\n  \"that's right\": true,\n  \"nope\": false,\n  \"no\": false,\n  \"no way\": false,\n  \"never\": false\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"H\"\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'ask'\n      }\n    },\n    help: {\n      entry: say(\"It seems that you need some help. Let's try again.\"),\n      always: 'ask.hist'\n    },\n    maxspeech: {\n      entry: say(\"Sorry\"),\n      on: {\n        'ENDSPEECH': 'ask.hist'\n      }\n    },\n    ask: {\n      initial: 'welcome',\n      on: {\n        RECOGNISED: {\n          target: 'help',\n          cond: context => context.recResult === 'help'\n        }\n      },\n      states: {\n        hist: {\n          type: \"history\"\n        },\n        welcome: {\n          id: \"wlcm\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: {\n              target: 'query',\n              cond: context => !(context.recResult === 'help'),\n              actions: assign(context => {\n                return {\n                  query: context.recResult\n                };\n              })\n            },\n            MAXSPEECH: '#root.dm.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk(\"What would you like to do?\")),\n            nomatch: {\n              entry: say(\"Sorry I don't understand.\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.query),\n            onDone: {\n              target: 'menu',\n              cond: context => !(context.recResult === 'help'),\n              actions: [assign((context, event) => {\n                return {\n                  intentbest: event.data\n                };\n              }), (context, event) => console.log(event.data), cancel('maxsp')]\n            },\n            onError: {\n              target: '#wlcm',\n              cond: context => !(context.recResult === 'help'),\n              actions: (context, event) => console.log(event.data)\n            }\n          }\n        },\n        menu: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.intentbest.intent.name === \"timer\",\n              target: \"Timer\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"todo_item\",\n              target: \"TODOitem\"\n            }, {\n              cond: context => context.intentbest.intent.name === \"appointment\",\n              target: \"Appointment\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"OK, noted!\"\n              }))\n            },\n            nomatch: {\n              entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n              on: {\n                ENDSPEECH: \"#wlcm\"\n              }\n            }\n          }\n        },\n        TODOitem: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the To do item app\")\n            }\n          }\n        },\n        Timer: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Welcome to the Timer app\")\n            }\n          }\n        },\n        Appointment: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"who\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"Let's create an appointment\")\n            }\n          }\n        },\n        who: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (grammar[context.recResult] || {}),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  person: grammar[context.recResult].person\n                };\n              })],\n              target: \"day\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '#root.dm.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk('Who are you meeting with?')),\n            nomatch: {\n              entry: say(\"Sorry I don't know them\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (grammar[context.recResult] || {}),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  day: grammar[context.recResult].day\n                };\n              })],\n              target: \"duration\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '#root.dm.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk('OK. ${context.person}. On which day is your meeting?')),\n            ask: {\n              entry: listen()\n            },\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        duration: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"time\",\n              actions: cancel('maxsp')\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"confirm_meeting_whole_day\",\n              actions: cancel('maxsp')\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '#root.dm.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk('OK. ${context.person} on ${context.day}. Will it take the whole day?')),\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (grammar[context.recResult] || {}),\n              actions: [cancel('maxsp'), assign(context => {\n                return {\n                  time: grammar[context.recResult].time\n                };\n              })],\n              target: \"confirm_time\"\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '#root.dm.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk('What time is your meeting?')),\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirm_meeting_whole_day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"#root.dm.init\",\n              actions: cancel('maxsp')\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"confirmed\",\n              actions: cancel('maxsp')\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '#root.dm.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?')),\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirm_time: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => boolGrammar[context.recResult] === false,\n              target: \"who\",\n              actions: cancel('maxsp')\n            }, {\n              cond: context => boolGrammar[context.recResult] === true,\n              target: \"confirmed\",\n              actions: cancel('maxsp')\n            }, {\n              target: \".nomatch\",\n              cond: context => !(context.recResult === 'help')\n            }],\n            MAXSPEECH: '#root.dm.maxspeech'\n          },\n          states: {\n            prompt: _objectSpread({}, promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?')),\n            nomatch: {\n              entry: say(\"Sorry, I don't understand\"),\n              on: {\n                ENDSPEECH: \"prompt\"\n              }\n            }\n          }\n        },\n        confirmed: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"#root.dm.init\"\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Your appointment has been created!\"\n              }))\n            }\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["send","assign","actions","cancel","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","commands","dmMachine","init","CLICK","help","always","maxspeech","RECOGNISED","target","cond","context","recResult","hist","welcome","query","MAXSPEECH","nomatch","invoke","src","event","onDone","intentbest","console","log","onError","menu","intent","name","TODOitem","Timer","Appointment","who","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst { cancel } = actions;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\n\nconst commands = {\"stop\": \"S\", \"help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        }, \n        help: {\n            entry: say(\"It seems that you need some help. Let's try again.\"),\n            always: 'ask.hist'\n\n        },\n        maxspeech: {\n            entry: say(\"Sorry\"),\n            on: { 'ENDSPEECH': 'ask.hist' }\n            \n        },\n        ask: {\n        initial: 'welcome',\n            on: {RECOGNISED: \n                    { target: 'help', \n                    cond: (context) => context.recResult === 'help' },},\n            states: {\n                hist: { type: \"history\" },\n                welcome: {\n                id: \"wlcm\",\n                initial: \"prompt\",\n            on: {\n            RECOGNISED: {\n                target: 'query',\n                cond: (context) => !(context.recResult === 'help'),\n                actions: assign((context) => { return { query: context.recResult } }),\n                    },\n                    MAXSPEECH: '#root.dm.maxspeech'\n                },\n                states: {\n                    prompt: {\n                        ...promptAndAsk(\"What would you like to do?\")\n                    },\n                    nomatch: {\n                        entry: say(\"Sorry I don't understand.\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n        },\n        query: {\n            invoke: {\n            id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n            onDone: {\n                    target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data), cancel('maxsp')]\n                    },\n            onError: {\n                        target: '#wlcm',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                    }\n                }\n        },\n\t    menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [{\n                cond: (context) => context.intentbest.intent.name === \"timer\",\n                target: \"Timer\"\n                },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                target: \"TODOitem\"\n\t\t        },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                target: \"Appointment\"\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help')}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, noted!`\n                    }))\n                },\n                nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                on: { ENDSPEECH: \"#wlcm\" }\n                    },\n                }\n        },\n        TODOitem: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: { entry: say(\"Welcome to the To do item app\")\n                 }\n            }\n        },\n\t    Timer: {\n\t        initial: \"prompt\",\n\t        on: { ENDSPEECH: \"#root.dm.init\" },\n\t        states: {\n\t    prompt: { entry: say (\"Welcome to the Timer app\")\n\t             }\n\t        }\n\t    },\n        Appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: [cancel('maxsp'), assign((context) => { return { person: grammar[context.recResult].person } })],\n                    target: \"day\"},\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n\n                \n              },\n            \n            states: {\n                prompt: {\n                   ...promptAndAsk('Who are you meeting with?')\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: [cancel('maxsp'),assign((context) => { return { day: grammar[context.recResult].day } })],\n                    target: \"duration\"\n                },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help') }],\n                MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                ...promptAndAsk('OK. ${context.person}. On which day is your meeting?')\n                 },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                 }\n\t             }\n        },\n    \tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"time\",\n                    actions: cancel('maxsp')\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirm_meeting_whole_day\",\n                    actions: cancel('maxsp'),\n\t\t            },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                    ...promptAndAsk('OK. ${context.person} on ${context.day}. Will it take the whole day?')\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n\t    time: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: [cancel('maxsp'), assign((context) => { return { time: grammar[context.recResult].time } })],\n                    target: \"confirm_time\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n\t\t    },\n            states: {\n                prompt: {\n                    ...promptAndAsk('What time is your meeting?')\n                },\n\t            nomatch: {\n\t                \tentry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                }\n                }\n        },\n\t    confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"#root.dm.init\",\n                    actions: cancel('maxsp')\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirmed\",\n                    actions: cancel('maxsp')\n\t\t             },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                    ...promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?')\n                },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n \t    confirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"who\",\n                    actions: cancel('maxsp')\n                },\n\t\t        {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t        target: \"confirmed\",\n                actions: cancel('maxsp')\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help') }],\n                MAXSPEECH: '#root.dm.maxspeech'\n            },\n            states: {\n                prompt: {\n                  ...promptAndAsk('Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?')\n                     },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t            \ton: { ENDSPEECH: \"prompt\" }\n\t           }\n            },\n        },\n        \n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                    },\n                  }\n               }\n            }\n\t    }\n    }\n})\n\n\n\n\n\n "]},"metadata":{},"sourceType":"module"}