{"ast":null,"code":"import _objectSpread from\"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{send,assign,actions}from\"xstate\";//import { cancel } from \"xstate/lib/actionTypes\";\nconst cancel=actions.cancel;const proxyurl=\"https://cors-anywhere.herokuapp.com/\";const rasaurl='https://assignment2nlu.herokuapp.com/model/parse';const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',headers:{'Origin':'http://localhost:3000/react-xstate-colourchanger'},// only required with proxy\nbody:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());const obj={counter:0};console.log(obj.counter);function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}const grammar={\"John\":{person:\"John Appleseed\"},\"Ridley\":{person:\"Ridley Scott\"},\"Steven\":{person:\"Steven Spielberg\"},\"Wes\":{person:\"Wes Andreson\"},\"Stanley\":{person:\"Stanley Kubrick\"},\"David\":{person:\"David Lynch\"},\"Ingmar\":{person:\"Ingmar Bergman\"},\"Alfred\":{person:\"Alfred Hitchcock \"},\"Tim\":{person:\"Tim Burton\"},\"on Friday\":{day:\"Friday\"},\"on Monday\":{day:\"Monday\"},\"Monday\":{day:\"Monday\"},\"Friday\":{day:\"Friday\"},\"Tuesday\":{day:\"Tuesday\"},\"Thursday\":{day:\"Thursday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"Wednesday\":{day:\"Wednesday\"},\"on Thursday\":{day:\"Thursday\"},\"on Saturday\":{day:\"Saturday\"},\"Saturday\":{day:\"Saturday\"},\"on Sunday\":{day:\"Sunday\"},\"Sunday\":{day:\"Sunday\"},\"6\":{time:\"6:00\"},\"at 6\":{time:\"6:00\"},\"7\":{time:\"7:00\"},\"at 7\":{time:\"7:00\"},\"8\":{time:\"8:00\"},\"at 8\":{time:\"8:00\"},\"9\":{time:\"9:00\"},\"at 9\":{time:\"9:00\"},\"10\":{time:\"10:00\"},\"at 10\":{time:\"10:00\"},\"11\":{time:\"11:00\"},\"at 11\":{time:\"11:00\"},\"12\":{time:\"12:00\"},\"at 12\":{time:\"12:00\"},\"13\":{time:\"1:00 pm\"},\"at 13\":{time:\"1:00 pm\"},\"14\":{time:\"2:00 pm\"},\"at 14\":{time:\"2:00 pm\"},\"15\":{time:\"3:00 pm\"},\"at 15\":{time:\"3:00 pm\"},\"16\":{time:\"4:00 pm\"},\"at 16\":{time:\"4:00 pm\"}};const boolGrammar={\"yes\":true,\"of course\":true,\"yep\":true,\"sure\":true,\"that's right\":true,\"nope\":false,\"no\":false,\"no way\":false,\"never\":false};const confirm=send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" at \").concat(context.time,\"?\")}));const confirmWholeDay=send(context=>({type:\"SPEAK\",value:\"Do you want to create an appointment with \".concat(context.person,\" on \").concat(context.day,\" for the whole day?\")}));function promptAndAsk(prompt){return{initial:'prompt',states:{prompt:{entry:say(prompt),on:{ENDSPEECH:[{target:\"ask\",actions:assign(context=>{return{count:context.count+1};})}]}},ask:{entry:[send('LISTEN'),send('MAXSPEECH',{delay:5000,id:'maxsp'})]}}};}const commands={\"stop\":\"S\",\"help\":\"H\"};export const dmMachine={initial:'init',states:{init:{on:{CLICK:'ask'}},help:{entry:say(\"It seems that you need some help. Let's try again.\"),always:[{target:'ask.hist',actions:assign(context=>{return{count:context.count-1};})}]},maxspeech1:{entry:say(\"Sorry\"),on:{'ENDSPEECH':'ask.hist'}},ask:{initial:'welcome',on:{RECOGNISED:{target:'help',cond:context=>context.recResult==='help'}},states:{hist:{type:\"history\"},welcome:{entry:assign(context=>{return{count:0};}),id:\"wlcm\",initial:\"prompt\",on:{RECOGNISED:{target:'query',cond:context=>!(context.recResult==='help'),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{query:context.recResult};})]},MAXSPEECH:'#root.dm.maxspeech1'},states:{prompt:_objectSpread(_objectSpread({},promptAndAsk(\"What would you like to do?\")),{},{on:{ENDSPEECH:{actions:assign(context=>{return{count:0};})}}})}},query:{invoke:{id:'rasa',src:(context,event)=>nluRequest(context.query),onDone:{target:'menu',cond:context=>!(context.recResult==='help'),actions:[assign((context,event)=>{return{intentbest:event.data};}),(context,event)=>console.log(event.data),cancel('maxsp')]},onError:{target:'#wlcm',cond:context=>!(context.recResult==='help'),actions:(context,event)=>console.log(event.data)}}},menu:{initial:\"prompt\",on:{ENDSPEECH:[{cond:context=>context.intentbest.intent.name===\"timer\",target:\"Timer\"},{cond:context=>context.intentbest.intent.name===\"todo_item\",target:\"TODOitem\"},{cond:context=>context.intentbest.intent.name===\"appointment\",target:\"Appointment\"},{target:\".nomatch\",cond:context=>!(context.recResult==='help')}]},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"OK, noted!\"}))},nomatch:{entry:say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),on:{ENDSPEECH:\"#wlcm\"}}}},TODOitem:{initial:\"prompt\",on:{ENDSPEECH:\"#root.dm.init\"},states:{prompt:{entry:say(\"Welcome to the To do item app\")}}},Timer:{initial:\"prompt\",on:{ENDSPEECH:\"#root.dm.init\"},states:{prompt:{entry:say(\"Welcome to the Timer app\")}}},Appointment:{initial:\"prompt\",on:{ENDSPEECH:\"#who\"},states:{prompt:{entry:say(\"Let's create an appointment\")}}},who:{id:'who',initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{person:grammar[context.recResult].person};})],target:\"day\"},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(\"Who are you meeting with?\")),prompt1:_objectSpread({},promptAndAsk(\"Who is is that you are meeting?\")),prompt2:_objectSpread({},promptAndAsk(\"Did you want to meet with someone?\")),prompt3:_objectSpread({},promptAndAsk(\"Ok, last chance. Who are you meeting with?\")),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{day:grammar[context.recResult].day};})],target:\"duration\"},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(\"When is your meeting?\")),prompt1:_objectSpread({},promptAndAsk(\"When do you want to create a meeting?\")),prompt2:_objectSpread({},promptAndAsk(\"On which day is your appointment?\")),prompt3:_objectSpread({},promptAndAsk(\"Ok, last chance. On which day is your meeting?\")),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},duration:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>boolGrammar[context.recResult]===false,target:\"time\",actions:[cancel('maxsp'),assign(context=>{return{count:0};})]},{cond:context=>boolGrammar[context.recResult]===true,target:\"confirm_meeting_whole_day\",actions:[cancel('maxsp'),assign(context=>{return{count:0};})]},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(\"Ok,  will it take the whole day?\")),prompt1:_objectSpread({},promptAndAsk(\"Will your meeting take the whole day?\")),prompt2:_objectSpread({},promptAndAsk(\"Do you think your meeting will last the whole day?\")),prompt3:_objectSpread({},promptAndAsk(\"Ok, last chance. Will it take the whole day?\")),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:[cancel('maxsp'),assign(context=>{return{count:0};}),assign(context=>{return{time:grammar[context.recResult].time};})],target:\"confirm_time\"},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({},promptAndAsk(\"What time is yout meeting?\")),prompt1:_objectSpread({},promptAndAsk(\"When exactly do you want to create an appointment?\")),prompt2:_objectSpread({},promptAndAsk(\"When does your meeting start?\")),prompt3:_objectSpread({},promptAndAsk(\"Ok, last chance. What time is your meeting\")),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},confirm_meeting_whole_day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>boolGrammar[context.recResult]===false,target:\"#root.dm.init\",actions:cancel('maxsp')},{cond:context=>boolGrammar[context.recResult]===true,target:\"#confirmed\",actions:cancel('maxsp')},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({entry:confirmWholeDay},promptAndAsk(\"Do you want to create this meeting?\")),prompt1:_objectSpread({entry:confirmWholeDay},promptAndAsk(\"Are your sure you want to create this meeting?\")),prompt2:_objectSpread({entry:confirmWholeDay},promptAndAsk(\"Do you want me to create this appointment?\")),prompt3:_objectSpread({entry:confirmWholeDay},promptAndAsk(\"Ok, last chance. Do you want to create this meeting?\")),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}},confirm_time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>boolGrammar[context.recResult]===false,target:\"who\",actions:cancel('maxsp')},{cond:context=>boolGrammar[context.recResult]===true,target:\"#confirmed\",actions:cancel('maxsp')},{target:\".maxspeech\",actions:cancel('maxsp'),cond:context=>!(context.recResult==='help')}],MAXSPEECH:'.maxspeech'},states:{prompt:_objectSpread({entry:confirm},promptAndAsk(\"Do you want to create this meeting?\")),prompt1:_objectSpread({entry:confirm},promptAndAsk(\"Are your sure you want to create this meeting?\")),prompt2:_objectSpread({entry:confirm},promptAndAsk(\"Do you want me to create this appointment?\")),prompt3:_objectSpread({entry:confirm},promptAndAsk(\"Ok, last chance. Do you want to create this meeting?\")),maxspeech:{entry:say(\"Sorry\"),on:{ENDSPEECH:[{cond:context=>context.count===0,target:\"prompt\"},{cond:context=>context.count===1,target:\"prompt1\"},{target:\"prompt2\",cond:context=>context.count===2},{target:\"prompt3\",cond:context=>context.count===3},{target:\"#root.dm.init\",cond:context=>context.count===4}]}}}}}},confirmed:{id:'confirmed',initial:\"prompt\",on:{ENDSPEECH:\"#root.dm.init\"},states:{prompt:{entry:send(context=>({type:\"SPEAK\",value:\"Your appointment has been created!\"}))}}}}};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointmentPlus.ts"],"names":["send","assign","actions","cancel","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","obj","counter","console","log","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","confirm","context","confirmWholeDay","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","target","count","ask","delay","id","commands","dmMachine","init","CLICK","help","always","maxspeech1","RECOGNISED","cond","recResult","hist","welcome","query","MAXSPEECH","invoke","src","event","onDone","intentbest","onError","menu","intent","name","nomatch","TODOitem","Timer","Appointment","who","prompt1","prompt2","prompt3","maxspeech","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\nimport { mapContext } from \"xstate/lib/utils\";\n//import { cancel } from \"xstate/lib/actionTypes\";\nconst { cancel } = actions;\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\nconst obj = { counter: 0 }\nconsole.log(obj.counter)\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\n\n\n\nconst confirm: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n}))\n\nconst confirmWholeDay: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\n    type: \"SPEAK\", value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n}))\n\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: {  ENDSPEECH:  [{\n                    target: \"ask\",\n                    actions: assign((context) => { return {count: context.count + 1 }})\n                    },\n                    ]}\n            },\n            ask: {\n                entry: [send('LISTEN'), \n                send ('MAXSPEECH', {\n                      delay: 5000  ,\n                    id: 'maxsp'})],\n            },\n        }\n    })\n}\n\n\n\nconst commands = {\"stop\": \"S\", \"help\": \"H\"}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        }, \n        help: {\n            entry: say(\"It seems that you need some help. Let's try again.\"),\n            always:[{target: 'ask.hist', actions: assign((context) => { return {count: (context.count - 1) }}) }] },\n\n        maxspeech1: {\n            entry: say(\"Sorry\"),\n            on: { 'ENDSPEECH': 'ask.hist' },  \n\n        },\n        ask: {\n        initial: 'welcome',\n            on: {RECOGNISED: \n                    { target: 'help', \n                    cond: (context) => context.recResult === 'help' },},\n            states: {\n                hist: { type: \"history\" },\n                welcome: {\n                    entry: assign((context) => { return {count: 0 }}),\n                    id: \"wlcm\",\n                    initial: \"prompt\",\n                    on: { RECOGNISED: \n                            { target: 'query',\n                            cond: (context) => !(context.recResult === 'help'),\n                            actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { query: context.recResult } })],\n                            },\n                        MAXSPEECH: '#root.dm.maxspeech1'\n                    },\n                    states: {\n                        prompt: {\n                                ...promptAndAsk(\"What would you like to do?\")\n                            ,\n                            on: { ENDSPEECH: {actions: assign((context) => { return {count: 0 }})} }\n                        },\n                        \n                          \n                        }\n            },\n            query: {\n                invoke: {\n                    id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n                    onDone: {\n                        target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data), cancel('maxsp')]\n                    },\n                    onError: {\n                        target: '#wlcm',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                         }\n                    }\n            },\n\t        menu: {\n                initial: \"prompt\",\n                on: {\n                    ENDSPEECH: [{\n                    cond: (context) => context.intentbest.intent.name === \"timer\",\n                    target: \"Timer\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                    target: \"TODOitem\"\n                    },\n                    {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                    target: \"Appointment\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help')}]\n                },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `OK, noted!`\n                        }))\n                    },\n                    nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                        on: { ENDSPEECH: \"#wlcm\" }\n                        },\n                    }\n            },\n            TODOitem: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say(\"Welcome to the To do item app\")\n                    }\n                }\n            },\n            Timer: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: { entry: say (\"Welcome to the Timer app\")\n                    }\n                }\n            },\n            Appointment: {\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#who\" },\n                states: {\n                    prompt: { entry: say(\"Let's create an appointment\") \n                    }\n                }\n            },\n            who: {\n                id: 'who',\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{\n                        cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { person: grammar[context.recResult].person } })],\n                        target: \"day\"},\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                        },\n                states: {\n                        prompt: {...promptAndAsk(\"Who are you meeting with?\")\n                        },\n                        prompt1: {\n                            ...promptAndAsk(\"Who is is that you are meeting?\")\n                        },\n                        prompt2: {\n                            ...promptAndAsk(\"Did you want to meet with someone?\")\n                        },\n                        prompt3: {\n                            ...promptAndAsk(\"Ok, last chance. Who are you meeting with?\")\n                        },\n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                        \n                    }\n            },\n            day: {\n                initial: \"prompt\",\n                on:{ \n                    RECOGNISED: [{\n                        cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { day: grammar[context.recResult].day } })],\n                        target: \"duration\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                        prompt: {...promptAndAsk(\"When is your meeting?\")\n                        },\n                        prompt1: {\n                            ...promptAndAsk(\"When do you want to create a meeting?\")\n                        },\n                        prompt2: {\n                            ...promptAndAsk(\"On which day is your appointment?\")\n                        },\n                        prompt3: {\n                            ...promptAndAsk(\"Ok, last chance. On which day is your meeting?\")\n                        },\n                    \n                        maxspeech: {\n                            entry: say(\"Sorry\"),\n                            on: { ENDSPEECH : [{\n                                cond: (context) => context.count === 0,\n                                target: \"prompt\"},\n                                {\n                                cond: (context) => context.count === 1,\n                                target: \"prompt1\"},\n                \n                                { target: \"prompt2\",\n                                cond: (context) => context.count === 2},\n                \n                                { target: \"prompt3\",\n                                cond: (context) => context.count === 3},\n                            \n                                { target: \"#root.dm.init\",\n                                cond: (context) => context.count === 4},\n                                \n                            ]}\n                        },\n                    }\n            },\n            duration: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"time\",\n                        actions: [cancel('maxsp'),assign((context) => { return {count: 0 }}),]\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"confirm_meeting_whole_day\",\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}),]\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(\"Ok,  will it take the whole day?\")\n                    },\n                    prompt1: {\n                        ...promptAndAsk(\"Will your meeting take the whole day?\")\n                    },\n                    prompt2: {\n                        ...promptAndAsk(\"Do you think your meeting will last the whole day?\")\n                    },\n                    prompt3: {\n                        ...promptAndAsk(\"Ok, last chance. Will it take the whole day?\")\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                }\n            },\n\t        time: {\n                initial: \"prompt\",\n                on: { RECOGNISED: [{\n                        cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                        actions: [cancel('maxsp'), assign((context) => { return {count: 0 }}), assign((context) => { return { time: grammar[context.recResult].time } })],\n                        target: \"confirm_time\"\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {...promptAndAsk(\"What time is yout meeting?\")\n                    },\n                    prompt1: {\n                        ...promptAndAsk(\"When exactly do you want to create an appointment?\")\n                    },\n                    prompt2: {\n                        ...promptAndAsk(\"When does your meeting start?\")\n                    },\n                    prompt3: {\n                        ...promptAndAsk(\"Ok, last chance. What time is your meeting\")\n                        \n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},\n                            \n                        ]}\n                    },\n                }\n            },\n\t        confirm_meeting_whole_day: {\n                initial: \"prompt\",\n                on: {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"#root.dm.init\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {entry: confirmWholeDay, ...promptAndAsk(\"Do you want to create this meeting?\")\n                    },\n                    prompt1: {entry: confirmWholeDay,\n                        ...promptAndAsk(\"Are your sure you want to create this meeting?\")\n                    },\n                    prompt2: {entry: confirmWholeDay,\n                        ...promptAndAsk(\"Do you want me to create this appointment?\")\n                    },\n                    prompt3: {entry: confirmWholeDay,\n                        ...promptAndAsk(\"Ok, last chance. Do you want to create this meeting?\")\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},   \n                        ]}\n                    },\n                }\n            },\n \t        confirm_time: {\n                initial: \"prompt\",\n                on:  {\n                    RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                        target: \"who\",\n                        actions: cancel('maxsp')\n                        },\n                        {cond: (context) => (boolGrammar[context.recResult] === true),\n                        target: \"#confirmed\",\n                        actions: cancel('maxsp')\n                        },\n                        { target: \".maxspeech\",\n                        actions: cancel('maxsp'),\n                        cond: (context) => !(context.recResult === 'help') }],\n                    MAXSPEECH: '.maxspeech'\n                },\n                states: {\n                    prompt: {entry: confirm, ...promptAndAsk(\"Do you want to create this meeting?\")\n                    },\n                    prompt1: {entry: confirm,\n                        ...promptAndAsk(\"Are your sure you want to create this meeting?\")\n                    },\n                    prompt2: {entry: confirm,\n                        ...promptAndAsk(\"Do you want me to create this appointment?\")\n                    },\n                    prompt3: {entry: confirm,\n                        ...promptAndAsk(\"Ok, last chance. Do you want to create this meeting?\")\n                    },\n                    maxspeech: {\n                        entry: say(\"Sorry\"),\n                        on: { ENDSPEECH : [{\n                            cond: (context) => context.count === 0,\n                            target: \"prompt\"},\n                            {\n                            cond: (context) => context.count === 1,\n                            target: \"prompt1\"},\n            \n                            { target: \"prompt2\",\n                            cond: (context) => context.count === 2},\n            \n                            { target: \"prompt3\",\n                            cond: (context) => context.count === 3},\n                        \n                            { target: \"#root.dm.init\",\n                            cond: (context) => context.count === 4},  \n                                ]}\n                            },\n                        },\n                    },\n                }\n            },\n            confirmed: {\n                id: 'confirmed',\n                initial: \"prompt\",\n                on: { ENDSPEECH: \"#root.dm.init\" },\n                states: {\n                    prompt: {\n                        entry: send((context) => ({\n                            type: \"SPEAK\",\n                            value: `Your appointment has been created!`\n                        }))\n                    },\n                }\n            }\n        } \n    })\n\n\n\n\n\n "]},"metadata":{},"sourceType":"module"}