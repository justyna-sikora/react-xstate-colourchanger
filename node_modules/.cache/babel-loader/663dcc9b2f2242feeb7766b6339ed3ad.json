{"ast":null,"code":"import { send, assign } from \"xstate\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"ten\": {\n    time: \"10:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"no\": false,\n  \"no way\": false\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't know\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => boolGrammar[context.recResult] !== undefined,\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it last the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't know\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"init\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". When is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't know\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirm_meeting: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"init\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". When is your meeting?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, I don't know\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","boolGrammar","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","duration","undefined","confirm_meeting"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"at ten\": { time: \"10:00\" },\n    \"ten\": { time: \"10:00\" },\n    \"at eleven\": { time: \"11:00\" }, \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"no\": false,\n      \"no way\": false\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'welcome'\n            }\n        },\n        welcome: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\" }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't know\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n\t  }\n        },\n\tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => boolGrammar[context.recResult] !== undefined,\n                    target: \"time\"\n                },\n                { target: \".nomatch\" }]\n            },\n\n\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it last the whole day?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't know\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n                },\n            },\n\n\ttime: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. When is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't know\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n                },\n            },\n\n\t    confirm_meeting: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"init\"\n                },\n                { target: \".nomatch\" }]\n\t\t},\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. When is your meeting?`\n                    })),\n\t\t    on: { ENDSPEECH: \"ask\" }\n                },\n\t\task: {\n\t\t     entry: listen()\n            },\n\t    nomatch: {\n\t    \tentry: say(\"Sorry, I don't know\"),\n\t\ton: { ENDSPEECH: \"prompt\" }\n\t    }\n                },\n            },\n\n\n\n    }})"]},"metadata":{},"sourceType":"module"}