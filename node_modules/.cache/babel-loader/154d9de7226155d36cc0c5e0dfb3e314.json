{"ast":null,"code":"import _objectSpread from \"/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { cancel } from \"xstate/lib/actionTypes\";\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse';\n\nconst nluRequest = text => fetch(new Request(proxyurl + rasaurl, {\n  method: 'POST',\n  headers: {\n    'Origin': 'http://localhost:3000/react-xstate-colourchanger'\n  },\n  // only required with proxy\n  body: \"{\\\"text\\\": \\\"\".concat(text, \"\\\"}\")\n})).then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Ridley\": {\n    person: \"Ridley Scott\"\n  },\n  \"Steven\": {\n    person: \"Steven Spielberg\"\n  },\n  \"Wes\": {\n    person: \"Wes Andreson\"\n  },\n  \"Stanley\": {\n    person: \"Stanley Kubrick\"\n  },\n  \"David\": {\n    person: \"David Lynch\"\n  },\n  \"Ingmar\": {\n    person: \"Ingmar Bergman\"\n  },\n  \"Alfred\": {\n    person: \"Alfred Hitchcock \"\n  },\n  \"Tim\": {\n    person: \"Tim Burton\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"6\": {\n    time: \"6:00\"\n  },\n  \"at 6\": {\n    time: \"6:00\"\n  },\n  \"7\": {\n    time: \"7:00\"\n  },\n  \"at 7\": {\n    time: \"7:00\"\n  },\n  \"8\": {\n    time: \"8:00\"\n  },\n  \"at 8\": {\n    time: \"8:00\"\n  },\n  \"9\": {\n    time: \"9:00\"\n  },\n  \"at 9\": {\n    time: \"9:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"13\": {\n    time: \"1:00 pm\"\n  },\n  \"at 13\": {\n    time: \"1:00 pm\"\n  },\n  \"14\": {\n    time: \"2:00 pm\"\n  },\n  \"at 14\": {\n    time: \"2:00 pm\"\n  },\n  \"15\": {\n    time: \"3:00 pm\"\n  },\n  \"at 15\": {\n    time: \"3:00 pm\"\n  },\n  \"16\": {\n    time: \"4:00 pm\"\n  },\n  \"at 16\": {\n    time: \"4:00 pm\"\n  }\n};\nconst boolGrammar = {\n  \"yes\": true,\n  \"of course\": true,\n  \"yep\": true,\n  \"sure\": true,\n  \"that's right\": true,\n  \"nope\": false,\n  \"no\": false,\n  \"no way\": false,\n  \"never\": false\n};\nconst commands = {\n  \"stop\": \"S\",\n  \"help\": \"H\"\n};\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 5000,\n          id: 'maxsp'\n        })]\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'ask'\n      }\n    },\n    help: {\n      id: \"help\",\n      entry: say(\"It seems that you need some help.\"),\n      on: {\n        'ENDSPEECH': \"ask.hist\"\n      }\n    },\n    maxspeech: {\n      entry: say(\"Sorry\"),\n      on: {\n        'ENDSPEECH': 'ask.hist'\n      }\n    },\n    ask: {\n      initial: \"welcome\",\n      on: {\n        RECOGNISED: {\n          target: '#help',\n          cond: context => context.recResult === 'help'\n        }\n      },\n      states: {\n        hist: {\n          type: history\n        },\n        welcome: {\n          id: \"wlcm\",\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              target: 'query',\n              cond: context => !(context.recResult === 'help'),\n              actions: assign(context => {\n                return {\n                  query: context.recResult\n                };\n              })\n            }, {\n              actions: cancel('maxsp'),\n              cond: context => context.recResult === 'stop'\n            }],\n            MAXSPEECH: 'maxspeech'\n          },\n          states: _objectSpread({}, promptAndAsk(\"What would you like to do?\")),\n          nomatch: {\n            entry: say(\"Sorry I don't understand.\"),\n            on: {\n              ENDSPEECH: \"prompt\"\n            }\n          }\n        }\n      },\n      query: {\n        invoke: {\n          id: 'rasa',\n          src: (context, event) => nluRequest(context.query),\n          onDone: {\n            target: 'menu',\n            cond: context => !(context.recResult === 'help'),\n            actions: [assign((context, event) => {\n              return {\n                intentbest: event.data\n              };\n            }), (context, event) => console.log(event.data)]\n          },\n          onError: {\n            target: 'welcome',\n            cond: context => !(context.recResult === 'help'),\n            actions: (context, event) => console.log(event.data)\n          }\n        }\n      },\n      menu: {\n        initial: \"prompt\",\n        on: {\n          ENDSPEECH: [{\n            cond: context => context.intentbest.intent.name === \"timer\",\n            target: \"Timer\"\n          }, {\n            cond: context => context.intentbest.intent.name === \"todo_item\",\n            target: \"TODOitem\"\n          }, {\n            cond: context => context.intentbest.intent.name === \"appointment\",\n            target: \"Appointment\"\n          }, {\n            target: \".nomatch\",\n            cond: context => !(context.recResult === 'help')\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"OK, noted!\"\n            }))\n          },\n          nomatch: {\n            entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n            on: {\n              ENDSPEECH: \"#wlcm\"\n            }\n          }\n        }\n      },\n      TODOitem: {\n        initial: \"prompt\",\n        on: {\n          ENDSPEECH: \"#root.dm.init\"\n        },\n        states: {\n          prompt: {\n            entry: say(\"Welcome to the To do item app\")\n          }\n        }\n      },\n      Timer: {\n        initial: \"prompt\",\n        on: {\n          ENDSPEECH: \"#root.dm.init\"\n        },\n        states: {\n          prompt: {\n            entry: say(\"Welcome to the Timer app\")\n          }\n        }\n      },\n      Appointment: {\n        initial: \"prompt\",\n        on: {\n          ENDSPEECH: \"who\"\n        },\n        states: {\n          prompt: {\n            entry: say(\"Let's create an appointment\")\n          }\n        }\n      },\n      who: {\n        initial: \"prompt\",\n        on: {\n          RECOGNISED: [{\n            cond: context => \"person\" in (grammar[context.recResult] || {}),\n            actions: cancel('maxsp'),\n            actions: assign(context => {\n              return {\n                person: grammar[context.recResult].person\n              };\n            }),\n            target: \"day\"\n          }, {\n            target: \".nomatch\",\n            cond: context => !(context.recResult === 'help')\n          }]\n        },\n        states: {\n          prompt: {\n            entry: say(\"Who are you meeting with?\"),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          },\n          ask: {\n            entry: listen()\n          },\n          nomatch: {\n            entry: say(\"Sorry I don't know them\"),\n            on: {\n              ENDSPEECH: \"prompt\"\n            }\n          }\n        }\n      },\n      day: {\n        initial: \"prompt\",\n        on: {\n          RECOGNISED: [{\n            cond: context => \"day\" in (grammar[context.recResult] || {}),\n            actions: assign(context => {\n              return {\n                day: grammar[context.recResult].day\n              };\n            }),\n            target: \"duration\"\n          }, {\n            target: \".nomatch\",\n            cond: context => !(context.recResult === 'help')\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"OK. \".concat(context.person, \". On which day is your meeting?\")\n            })),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          },\n          ask: {\n            entry: listen()\n          },\n          nomatch: {\n            entry: say(\"Sorry, I don't understand\"),\n            on: {\n              ENDSPEECH: \"prompt\"\n            }\n          }\n        }\n      },\n      duration: {\n        initial: \"prompt\",\n        on: {\n          RECOGNISED: [{\n            cond: context => boolGrammar[context.recResult] === false,\n            target: \"time\"\n          }, {\n            cond: context => boolGrammar[context.recResult] === true,\n            target: \"confirm_meeting_whole_day\"\n          }, {\n            target: \".nomatch\",\n            cond: context => !(context.recResult === 'help')\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"OK. \".concat(context.person, \" on \").concat(context.day, \". Will it take the whole day?\")\n            })),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          },\n          ask: {\n            entry: listen()\n          },\n          nomatch: {\n            entry: say(\"Sorry, I don't understand\"),\n            on: {\n              ENDSPEECH: \"prompt\"\n            }\n          }\n        }\n      },\n      time: {\n        initial: \"prompt\",\n        on: {\n          RECOGNISED: [{\n            cond: context => \"time\" in (grammar[context.recResult] || {}),\n            actions: assign(context => {\n              return {\n                time: grammar[context.recResult].time\n              };\n            }),\n            target: \"confirm_time\"\n          }, {\n            target: \".nomatch\",\n            cond: context => !(context.recResult === 'help')\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"OK. What time is your meeting?\"\n            })),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          },\n          ask: {\n            entry: listen()\n          },\n          nomatch: {\n            entry: say(\"Sorry, I don't understand\"),\n            on: {\n              ENDSPEECH: \"prompt\"\n            }\n          }\n        }\n      },\n      confirm_meeting_whole_day: {\n        initial: \"prompt\",\n        on: {\n          RECOGNISED: [{\n            cond: context => boolGrammar[context.recResult] === false,\n            target: \"#root.dm.init\"\n          }, {\n            cond: context => boolGrammar[context.recResult] === true,\n            target: \"confirmed\"\n          }, {\n            target: \".nomatch\",\n            cond: context => !(context.recResult === 'help')\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n            })),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          },\n          ask: {\n            entry: listen()\n          },\n          nomatch: {\n            entry: say(\"Sorry, I don't understand\"),\n            on: {\n              ENDSPEECH: \"prompt\"\n            }\n          }\n        }\n      },\n      confirm_time: {\n        initial: \"prompt\",\n        on: {\n          RECOGNISED: [{\n            cond: context => boolGrammar[context.recResult] === false,\n            target: \"who\"\n          }, {\n            cond: context => boolGrammar[context.recResult] === true,\n            target: \"confirmed\"\n          }, {\n            target: \".nomatch\",\n            cond: context => !(context.recResult === 'help')\n          }]\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"Do you want to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \"?\")\n            })),\n            on: {\n              ENDSPEECH: \"ask\"\n            }\n          },\n          ask: {\n            entry: listen()\n          },\n          nomatch: {\n            entry: say(\"Sorry, I don't understand\"),\n            on: {\n              ENDSPEECH: \"prompt\"\n            }\n          }\n        }\n      },\n      confirmed: {\n        initial: \"prompt\",\n        on: {\n          ENDSPEECH: \"#root.dm.init\"\n        },\n        states: {\n          prompt: {\n            entry: send(context => ({\n              type: \"SPEAK\",\n              value: \"Your appointment has been created!\"\n            }))\n          }\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["/mnt/c/users/justa/documents/assignment2/react-xstate-colourchanger/src/dmAppointmentble.ts"],"names":["send","assign","cancel","proxyurl","rasaurl","nluRequest","text","fetch","Request","method","headers","body","then","data","json","say","_context","type","value","listen","grammar","person","day","time","boolGrammar","commands","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","delay","id","dmMachine","init","CLICK","help","maxspeech","RECOGNISED","target","cond","context","recResult","hist","history","welcome","actions","query","MAXSPEECH","nomatch","invoke","src","event","onDone","intentbest","console","log","onError","menu","intent","name","TODOitem","Timer","Appointment","who","duration","confirm_meeting_whole_day","confirm_time","confirmed"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, actions, assign} from \"xstate\";\nimport { cancel } from \"xstate/lib/actionTypes\";\n\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\nconst rasaurl = 'https://assignment2nlu.herokuapp.com/model/parse'\nconst nluRequest = (text: string) =>\n    fetch(new Request(proxyurl + rasaurl, {\n        method: 'POST',\n        headers: { 'Origin': 'http://localhost:3000/react-xstate-colourchanger' }, // only required with proxy\n        body: `{\"text\": \"${text}\"}`\n    }))\n        .then(data => data.json());\n\n\n\nfunction say(text: string): Action<SDSContext, SDSEvent> {\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\n}\n\nfunction listen(): Action<SDSContext, SDSEvent> {\n    return send('LISTEN')\n}\n\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string } } = {\n    \"John\": { person: \"John Appleseed\" },\n    \"Ridley\": { person: \"Ridley Scott\" },\n    \"Steven\": { person: \"Steven Spielberg\" },\n    \"Wes\": { person: \"Wes Andreson\" },\n    \"Stanley\": { person: \"Stanley Kubrick\" },\n    \"David\": { person: \"David Lynch\" },\n    \"Ingmar\": { person: \"Ingmar Bergman\" },\n    \"Alfred\": { person: \"Alfred Hitchcock \"},\n    \"Tim\": { person: \"Tim Burton\" },\n\n    \"on Friday\": { day: \"Friday\" },\n    \"on Monday\": { day: \"Monday\" },\n    \"Monday\": { day: \"Monday\"},\n    \"Friday\": { day: \"Friday\" },\n    \"Tuesday\": { day: \"Tuesday\" },\n    \"Thursday\": { day: \"Thursday\" },\n    \"on Tuesday\": { day: \"Tuesday\" },\n    \"on Wednesday\": { day: \"Wednesday\" },\n    \"Wednesday\": { day: \"Wednesday\" },\n    \"on Thursday\": { day: \"Thursday\" },\n    \"on Saturday\": { day: \"Saturday\" },\n    \"Saturday\": { day: \"Saturday\" },\n    \"on Sunday\": { day: \"Sunday\" },\n    \"Sunday\": { day: \"Sunday\" },\n\n    \"6\": { time: \"6:00\" },\n    \"at 6\": { time: \"6:00\" },\n    \"7\": { time: \"7:00\" },\n    \"at 7\": { time: \"7:00\" },\n    \"8\": { time: \"8:00\" },\n    \"at 8\": { time: \"8:00\" },\n    \"9\": { time: \"9:00\" },\n    \"at 9\": { time: \"9:00\" },\n    \"10\": { time: \"10:00\" },\n    \"at 10\": { time: \"10:00\" },\n    \"11\": { time: \"11:00\" },\n    \"at 11\": { time: \"11:00\" },\n    \"12\": { time: \"12:00\" },\n    \"at 12\": { time: \"12:00\" },\n    \"13\": { time: \"1:00 pm\" },\n    \"at 13\": { time: \"1:00 pm\" },\n    \"14\": { time: \"2:00 pm\" },\n    \"at 14\": { time: \"2:00 pm\" },\n    \"15\": { time: \"3:00 pm\" },\n    \"at 15\": { time: \"3:00 pm\" },\n    \"16\": { time: \"4:00 pm\" },\n    \"at 16\": { time: \"4:00 pm\" },\n    \n}\n\nconst boolGrammar = {\n      \"yes\": true,\n      \"of course\": true,\n      \"yep\": true,\n      \"sure\": true,\n      \"that's right\": true,\n      \"nope\": false,\n      \"no\": false,\n      \"no way\": false,\n      \"never\": false,\n}\n\nconst commands = {\"stop\": \"S\", \"help\": \"H\"}\n\n\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\n    return ({\n        initial: 'prompt',\n        states: {\n            prompt: {\n                entry: say(prompt),\n                on: { ENDSPEECH: 'ask' }\n            },\n            ask: {\n                entry: [send('LISTEN'),\n                send('MAXSPEECH', {\n                    delay: 5000,\n                    id: 'maxsp'\n                })],\n            },\n        }\n    })\n}\n\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\n    initial: 'init',\n    states: {\n        init: {\n            on: {\n                CLICK: 'ask'\n            }\n        },\n        help: {\n            id: \"help\", \n            entry: say(\"It seems that you need some help.\"),\n            on: { 'ENDSPEECH' : \"ask.hist\" }\n        },\n        maxspeech: {\n            entry: say(\"Sorry\"),\n            on: {'ENDSPEECH': 'ask.hist'}\n        },\n        \n    ask: {\n        initial: \"welcome\",\n        on: {RECOGNISED: \n            { target: '#help', \n            cond: (context) => context.recResult === 'help' },},\n        states: {\n        hist: { type: history },\n        welcome: {\n            id: \"wlcm\",\n            initial: \"prompt\",\n            on: {\n            RECOGNISED: [{\n                target: 'query',\n                cond: (context) => !(context.recResult === 'help'),\n                actions: assign((context) => { return { query: context.recResult } })\n                },\n                {actions: cancel('maxsp'),\n                cond: (context) => context.recResult === 'stop'}],\n                \n            MAXSPEECH: 'maxspeech'\n        },\n                states: {\n                    ...promptAndAsk(\"What would you like to do?\")\n                    },\n                    \n                    nomatch: {\n                        entry: say(\"Sorry I don't understand.\"),\n                        on: { ENDSPEECH: \"prompt\" }\n                    }\n                }\n        },\n        \n        query: {\n            invoke: {\n            id: 'rasa',\n                    src: (context, event) => nluRequest(context.query),\n            onDone: {\n                    target: 'menu',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: [assign((context, event) => { return {intentbest: event.data }}),\n                                (context:SDSContext, event:any) => console.log(event.data)]\n                    },\n            onError: {\n                        target: 'welcome',\n                        cond: (context) => !(context.recResult === 'help'),\n                        actions: (context,event) => console.log(event.data)\n                    }\n                }\n        },\n\t    menu: {\n            initial: \"prompt\",\n            on: {\n                ENDSPEECH: [{\n                cond: (context) => context.intentbest.intent.name === \"timer\",\n                target: \"Timer\"\n                },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"todo_item\",\n                target: \"TODOitem\"\n\t\t        },\n\t\t        {cond: (context) => context.intentbest.intent.name === \"appointment\",\n                target: \"Appointment\"\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'),}]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK, noted!`\n                    }))\n                },\n                nomatch: {entry: say(\"Oh sorry, I can't help you with that at the moment. Let's start over\"),\n                on: { ENDSPEECH: \"#wlcm\" }\n                    },\n                }\n        },\n        TODOitem: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: { entry: say(\"Welcome to the To do item app\")\n                 }\n            }\n        },\n\t    Timer: {\n\t        initial: \"prompt\",\n\t        on: { ENDSPEECH: \"#root.dm.init\" },\n\t        states: {\n\t    prompt: { entry: say (\"Welcome to the Timer app\")\n\t             }\n\t        }\n\t    },\n        Appointment: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"who\" },\n            states: {\n                prompt: { entry: say(\"Let's create an appointment\") }\n            }\n        },\n        who: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\n                    actions: cancel('maxsp'),\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\n                    target: \"day\"\n\n                },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: say(\"Who are you meeting with?\"),\n                    on: { ENDSPEECH: \"ask\" }\n                },\n                ask: {\n                    entry: listen()\n                },\n                nomatch: {\n                    entry: say(\"Sorry I don't know them\"),\n                    on: { ENDSPEECH: \"prompt\" }\n                }\n            }\n        },\n        day: {\n            initial: \"prompt\",\n            on:{\n                RECOGNISED: [{\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\n                    target: \"duration\"\n                },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person}. On which day is your meeting?`\n                        })),\n\t\t            on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                 }\n\t             }\n        },\n    \tduration: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"time\"\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirm_meeting_whole_day\"\n\t\t            },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. ${context.person} on ${context.day}. Will it take the whole day?`\n                    })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t    \t            entry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n\t    time: {\n            initial: \"prompt\",\n            on: { RECOGNISED: [{\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\n                    target: \"confirm_time\"\n                    },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help'), }]\n\t\t    },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `OK. What time is your meeting?`\n                        })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t                entry: listen()\n                },\n\t            nomatch: {\n\t                \tentry: say(\"Sorry, I don't understand\"),\n\t\t                on: { ENDSPEECH: \"prompt\" }\n\t                }\n                }\n        },\n\t    confirm_meeting_whole_day: {\n            initial: \"prompt\",\n            on: {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"#root.dm.init\"\n                    },\n\t\t            {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t            target: \"confirmed\"\n\t\t             },\n                    { target: \".nomatch\",\n                    cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} for the whole day?`\n                        })),\n\t\t                on: { ENDSPEECH: \"ask\" }\n                },\n\t        \task: {\n\t\t            entry: listen()\n                },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t\t            on: { ENDSPEECH: \"prompt\" }\n\t            }\n            }\n\t    },\n \t    confirm_time: {\n            initial: \"prompt\",\n            on:  {\n                RECOGNISED: [{cond: (context) => (boolGrammar[context.recResult] === false),\n                    target: \"who\"\n                },\n\t\t        {cond: (context) => (boolGrammar[context.recResult] === true),\n\t\t        target: \"confirmed\"\n\t\t        },\n                { target: \".nomatch\",\n                cond: (context) => !(context.recResult === 'help'), }]\n            },\n            states: {\n                prompt: {\n                   entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Do you want to create an appointment with ${context.person} on ${context.day} at ${context.time}?`\n                })),\n\t\t        on: { ENDSPEECH: \"ask\" }\n                },\n\t\t        ask: {\n\t\t             entry: listen()\n                     },\n\t            nomatch: {\n\t    \t        entry: say(\"Sorry, I don't understand\"),\n\t            \ton: { ENDSPEECH: \"prompt\" }\n\t           }\n            },\n        },\n\t    confirmed: {\n            initial: \"prompt\",\n            on: { ENDSPEECH: \"#root.dm.init\" },\n            states: {\n                prompt: {\n                    entry: send((context) => ({\n                        type: \"SPEAK\",\n                        value: `Your appointment has been created!`\n                    }))\n                },\n\t\t    }\n\t    }\n    }\n }\n}\n)\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}